/**
 * @file Stores the functions that define the behavior of the units' specials
 * for the damage calculator.x
 *
 * # Notes:
 * - The properties that accept a function will take a function with 1 parameter
 *   named `p`, which is short for `parameters`. The function will be applied to
 *   every unit, and should return the value of the buff/debuff the unit shall
 *   receive (if an atk boost should not apply to the unit, return 1). The
 *   parameters come from `getParameters()` defined in "damage\js\cruncher.js", with
 *   an additional property called `sourceSlot`, which is inserted somewhere else.
 *   `sourceSlot` is the slot number of the unit that activated the special, while
 *   `slot` is the slot number of the unit that the function is currently being
 *   applied to. Specials and altspecials also get `p.cached`, which is the same
 *   params object, but cached upon the special activation. This can be used
 *   instead of evaluating conditions using `onActivation`. Simply use it like
 *   how you would normally use the params object, but append `.cached`. So
 *   `p.captain` becomes `p.cached.captain`. See details about cached parameters
 *   in cruncher.js, `cacheParameters()`.
 *
 * # Sample conditions:
 * - `p.slot == p.sourceSlot` - the special will only apply to the unit
 *   that launched the special
 * - `p.unit.type == 'INT'` - the special will only apply if the unit is INT. Note
 *   that types are uppercase.
 * - `p.unit.class.has('Free Spirit')` - will only apply to Free Spirit characters.
 *   `class` is an array, hence the `has`. Note that classes are in Sentence Case.
 * - `p.captain.type == 'STR' || p.friendCaptain == 'STR'` - will apply to all
 *   units if the captain or friend captain is STR
 * - `p.unit.cost <= 40` - applies if unit has a cost less than *or* equal to 40
 * - `p.percHP > 99` - applies if the team has an HP (set in slider) greater than
 *   99%. Note that when the game says "HP is full", it actually checks if the HP
 *   is greater than 99%.
 * - `p.currentHP >= 25000` - applies if the team's current HP is greater than
 *   25000. You can use `p.cached.currentHP` if you want to get the current HP
 *   at the time the special was activated.
 * - `p.cached.colorCount.DEX > 3` - gets the number of DEX units on the team
 *   at the time that the special was activated. Since you can launch a special
 *   and then swap the unit to a different type, using the cached params (or
 *   the onActivation pattern) is needed to get the correct multiplier.
 *   `p.colorCount.DEX` would give the current number of DEX units.
 * - `p.cached.captain.type == 'STR'` - if the captain's type is `STR` at the
 *   time of activation
 *
 *
 * # Sample functions/expressions:
 * - `atk: function(p) { return p.unit.type == "INT" ? 2 : 1; },`
 *   - If Max HP is greater or equal than 60k, the unit gets a 2x atk boost,
 *     1x (no boost) otherwise. The "1" can be other values too. If you are
 *     confused by the question mark and colon, look up "js ternary if". This is
 *     highly used in the file, so you'll need to get used to seeing it.
 *
 * # Possible function properties:
 * *All functions accept a `params` (p) object parameter generated by `getParameters()`.*
 * ## Buff functions
 * - `atk` - returns the atk boost multiplier that the unit gets.
 *   Return 1 if the unit doesn't get an atk boost. If it is a conditional atk
 *   boost, use the new `static` function instead, or add `type: "condition".
 * - `orb` - returns the orb boost multiplier that the unit gets.
 * - `affinity` - returns the color affinity/type effect boost multiplier.
 * - `rcv` - returns the RCV stat boost multiplier (not to be confused with cotton candies)
 * - `status` - returns the conditional atk boost multiplier, 1 if not applied.
 *   It is the function's responsibility to check if the status is applied).
 * - `atkStatic` - returns a static/additive ATK boost (for old units; not the
 *   same as base atk boost), conflicts with normal ATK boosts.
 * - `rcvStatic` - returns a static/additive RCV boost, 0 if none.
 * - `atkbase` - returns the amount of the base ATK boost, 0 if none.
 * - `chain` - returns the chain lock/chain boundary lower limit amount. *MUST*
 *   accompanied by `chainLimiter`.
 * - `chainLimiter` - returns the highest chain multiplier allowed for the unit.
 *   This is typically used to set the chain lock back to 1 when the previous unit
 *   makes a miss or below good. This also sets the upper limit of a chain boundary
 *   buff.
 * - `chainAddition` - returns the additive chain boost amount ("adds 0.5x to Chain
 *   multiplier": return 0.5)
 * - `chainMultiplication` - returns the multiplicative chain boost amount
 *   ("boosts Chain multiplier by 1.25x": return 1.25)
 * - `hit` - returns the atk boost multiplier that will only apply after the nth
 *   hit in the chain. This function takes an additional `n` argument as the
 *   first one, which indicates which hit it currently is. Currently stacks with
 *   atk boosts but not in-game, so a warning must be supplied.
 * - `staticMult` - returns the multiplier to this character's ATK to add to
 *   tap-timing bonuses.
 * - `ignoresImmunities` returns an array of strings that represent the enemy
 *   immunities that should be ignored, as defined in damage/js/app.js in
 *   $scope.data.enemyImmunities. These are basically the same names as the
 *   status effect functions used by the ability functions ("delay", "def", "poison", etc).
 *   Return an empty array if it won't ignore any immunity.
 *
 * ## Enemy status effect functions
 * - `delay` - returns the number of turns the enemy will be delayed for,
 *   0 if it won't be delayed. Specific number does not matter (but encouraged).
 * - `def` - returns the percentage that will be *multiplied* to the enemy's
 *   defense. Return 0 for 100% defense reduction, 1 if none.
 * - `increaseDamageTaken` - returns the multiplier of the Increase Damage Taken,
 *   1 if none.
 * - `poison` - returns the number of turns the enemy will be poisoned for.
 *   Specific number does not matter (but encouraged).
 * - `negative` - returns the number of turns the enemy will be affected by Negative.
 *   Specific number does not matter (but encouraged).
 *
 * ## Buff enhancing functions (return 0 if none)
 * - `atkPlus` - returns the amount to add to an existing ATK boost. If a
 *   special increases atk boosts by "0.25x", return 0.25
 * - `orbPlus` - returns the amount to add to an existing orb boost.
 * - `affinityPlus` - returns the amount to add to an existing color affinity boost.
 * - `statusPlus` - returns the amount to add to a conditional/status atk boost.
 * - `chainPlus` - returns the amount to add to a chain lock/boundary lower limit.
 * - `chainAdditionPlus` - returns the amount to add to an additive chain boost.
 *
 * ## Buff overriding functions (will only apply if types of such boosts are active; stronger boosts will also be overridden)
 * - `atkCeil` - returns the atk boost multiplier that will override the existing one
 * - `orbCeil` - returns the orb boost multiplier that will override the existing one
 *
 * ## Event callbacks
 * - `onActivation` - will be called whenever the special is turned on. Used for
 *   staged specials and specials that rely on current crew composition (such
 *   3080 carrot checking for captain type; can be activated then swap the
 *   captain and the boost will remain). Note that you can modify the `p.cached`
 *   properties here, but make sure that you don't touch properties that are
 *   declared in `getParameters`. Common use for this is `p.cached.multiplier`.
 * - `onDeactivation` - will be called whenever the special is turned off or the
 *   unit gets removed from the team.
 *
 * # Possible non-function properties:
 * - `type` {string} - says what kind of an atk boost it is, when `atk` function
 *   instead of the new `status` function is used. Possible values are
 *   "type", "class", and "condition". However, only "condition" actually makes
 *   a difference (boosts added static damage to tap-timing bonus).
 *   This is NOT an affinity boost.
 * - `warning` {string} - message that gets shown whenever the special is
 *   activated, used to warn the user about the special, like when the special
 *   assumes that a status effect is applied on the enemy.
 * - `stage` {number} - used to switch between the various stages of staged specials,
 *   which are specials with different cooldowns for its stages. This tells which
 *   stage is active
 * - `multiplier` {boolean|number|any} - similar to `stage`, this is used to switch
 *   between various special effects, like those specials that apply different
 *   boosts based on various conditions, though could also be used for staged
 *   specials. The value depends on how the special for the unit is implemented,
 *   but is often the boost multiplier that should currently be active, and can
 *   be used for any kind of buff. Not used outside the file.
 * - `multiplierN` {boolean|number|any} - similar to `multiplier`, but used when
 *   one is not enough.
 * - `orbmultiplier` {boolean|number|any} - similar to `multiplier`, but for orb boosts.
 * - `turnedOn` {boolean} - whether the special should be active or not, used
 *   for specials with various effects that depend on current crew composition.
 */

window.specials = {
    13: {
        delay: function(p) { return 1; },
    },
    14: {
        delay: function(p) { return 1; },
    },
    15: {
        delay: function(p) { return 1; },
    },
    16: {
        delay: function(p) { return 1; },
    },
    18: {
        def: function(p) { return 0.5; }
    },
    24: {
        def: function(p) { return 0.5; }
    },
    34: {
        def: function(p) { return 0; }
    },
    58: {
        poison: function(p) { return 99; }
    },
    127: {
        def: function(p) { return 0.5; }
    },
    137: {
        def: function(p) { return 0.5; }
    },
    148: {
        def: function(p) { return 0.5; }
    },
    158: {
        def: function(p) { return 0.5; }
    },
    204: {
        delay: function(p) { return 1; },
    },
    206: {
        def: function(p) { return 0.5; }
    },
    209: {
        atk: function(p) { return p.unit.type == "INT" ? 1.5 : 1; },
        type: "type"
    },
    210: {
        atk: function(p) { return p.unit.type == "INT" ? 2 : 1; },
        type: "type"
    },
    215: {
        poison: function(p) { return 99; }
    },
    222: {
        atk: function(p) { return p.unit.type == "PSY" ? 1.5 : 1; },
        type: "type"
    },
    223: {
        atk: function(p) { return p.unit.type == "PSY" ? 2 : 1; },
        type: "type"
    },
    248: {
        atk: function(p) { return p.unit.type == "STR" ? 1.75 : 1; },
        type: "type" 
    },
    249: {
        atk: function(p) { return p.unit.type == "STR" ? 1.75 : 1; },
        type: "type" 
    },
    263: {
        orb: function(p) { return 1.5; }
    },
    267: {
        def: function(p) { return 0.5; }
    },
    275: {
        def: function(p) { return 0.5; }
    },
    285: {
        def: function(p) { return 0.5; }
    },
    295: {
        def: function(p) { return 0.5; }
    },
    305: {
        orb: function(p) { return p.unit.type == "PSY" ? 1.75 : 1; },
    },
    306: {
        orb: function(p) { return p.unit.type == "PSY" ? 1.75 : 1; },
    },
    309: {
        def: function(p) { return 0.5; }
    },
    310: {
        def: function(p) { return 0.5; }
    },
    313: {
        atk: function(p) { return p.unit.class.has("Striker") ? 1.5 : 1; },
        type: "class"
    },
    314: {
        atk: function(p) { return p.unit.class.has("Striker") ? 1.5 : 1; },
        type: "class"
    },
    323: {
        orb: function(p) { return 1.5; }
    },
    324: {
        orb: function(p) { return 1.5; }
    },
    352: {
        atk: function(p) { return p.unit.class.has("Shooter") ? 1.75 : 1; },
        type: "class"
    },
    353: {
        atk: function(p) { return p.unit.class.has("Shooter") ? 1.75 : 1; },
        type: "class"
    },
    382: {
        def: function(p) { return 0.5; }
    },
    383: {
        poison: function(p) { return 99; }
    },
    384: {
        poison: function(p) { return 99; }
    },
    385: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.25 : 1; },
        type: "class"
    },
    386: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.25 : 1; },
        type: "class"
    },
    391: {
        def: function(p) { return 0.2; },
        poison: function(p) { return 1; }
    },
    392: {
        def: function(p) { return 0.2; },
        poison: function(p) { return 1; }
    },
    395: {
        orb: function(p) { return 1.25; }
    },
    396: {
        orb: function(p) { return 1.25; }
    },
    399: {
        atk: function(p) { return p.unit.type == "DEX" ? 1.5 : 1; },
        type: "type"
    },
    400: {
        atk: function(p) { return p.unit.type == "DEX" ? 1.5 : 1; },
        type: "type"
    },
    401: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.25 : 1; },
        type: "class"
    },
    402: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.25 : 1; },
        type: "class"
    },
    404: {
        rcv: function(p) { return 2; }
    },
    405: {
        rcv: function(p) { return 2; }
    },
    406: {
        atk: function(p) { return 1.2; },
        type: "type"
    },
    415: {
        delay: function(p) { return 1; },
    },
    416: {
        delay: function(p) { return 1; },
    },
    417: {
        orb: function(p) { return 2; }
    },
    418: {
        orb: function(p) { return 2; }
    },
    419: {
        def: function(p) { return 0.5; }
    },
    423: {
        def: function(p) { return 0.5; }
    },
    424: {
        def: function(p) { return 0.5; }
    },
    426: {
        atk: function(p) { return p.unit.type == "STR" ? 1.05 : 1; },
        type: "type"
    },
    429: {
        def: function(p) { return 0.5; }
    },
    430: {
        orb: function(p) { return 1.5; }
    },
    431: {
        orb: function(p) { return 1.5; }
    },
    434: {
        orb: function(p) { return 1.25; }
    },
    437: {
        poison: function(p) { return 1; }
    },
    438: {
        poison: function(p) { return 1; }
    },
    450: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.5 : 1; },
        type: "class"
    },
    451: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.5 : 1; },
        type: "class"
    },
    454: {
        atk: function(p) { return p.unit.type == "STR" ? 1.5 : 1; },
        type: "type"
    },
    455: {
        atk: function(p) { return p.unit.type == "STR" ? 1.5 : 1; },
        type: "type"
    },
    458: {
        atk: function(p) { return 1.5; },
        type: "type"
    },
    459: {
        atk: function(p) { return [1.5, 2][CrunchUtils.llimitUnlock(p, "specials")]; },
        type: "type",
        orb: function(p) { return p.unit.cost >= 20 ? [1, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
    },
    460: {
        delay: function(p) { return 1; },
    },
    461: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.25 : 1; },
        type: "class"
    },
    462: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.25 : 1; },
        type: "class"
    },
    465: {
        orb: function(p) { return 1.25; }
    },
    466: {
        delay: function(p) { return 1; },
    },
    468: {
        rcv: function(p) { return 1.5; }
    },
    470: {
        rcv: function(p) { return 1.5; }
    },
    487: {
        atk: function(p) { return p.unit.type == "STR" ? 1.2 : 1; },
        type: "type"
    },
    488: {
        atk: function(p) { return p.unit.type == "QCK" ? 1.2 : 1; },
        type: "type"
    },
    489: {
        atk: function(p) { return p.unit.type == "DEX" ? 1.2 : 1; },
        type: "type"
    },
    490: {
        atk: function(p) { return p.unit.type == "STR" ? 1.2 : 1; },
        type: "type"
    },
    491: {
        atk: function(p) { return p.unit.type == "QCK" ? 1.2 : 1; },
        type: "type"
    },
    492: {
        atk: function(p) { return p.unit.type == "DEX" ? 1.2 : 1; },
        type: "type"
    },
    494: {
        poison: function(p) { return 99; }
    },
    496: {
        poison: function(p) { return 99; }
    },
    499: {
        delay: function(p) { return 1; },
    },
    500: {
        delay: function(p) { return 1; },
    },
    503: {
        atk: function(p) { return 1.05; },
        def: function(p) { return 0.5; }
    },
    504: {
        atk: function(p) { return 1.05; },
        def: function(p) { return 0.5; }
    },
    505: {
        atk: function(p) { return p.unit.type == "QCK" ? 1.25 : 1; },
        type: "type"
    },
    506: {
        atk: function(p) { return p.unit.type == "QCK" ? 1.25 : 1; },
        type: "type"
    },
    509: {
        atk: function(p) { return p.unit.class.has("Striker") ? 1.5 : 1; },
        type: "class",
        poison: function(p) { return 99; }
    },
    510: {
        atk: function(p) { return p.unit.class.has("Striker") ? 1.5 : 1; },
        type: "class",
        poison: function(p) { return 99; }
    },
    511: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.25 : 1; },
        type: "class"
    },
    514: {
        def: function(p) { return 0.5; },
        atk: function(p) { return p.unit.type == "INT" ? 1.5 : 1; },
        type: "type"
    },
    517: {
        atk: function(p) { return 1.05; },
        type: "type"
    },
    518: {
        atk: function(p) { return 1.05; },
        type: "type"
    },
    519: {
        atk: function(p) { return p.unit.type == "STR" ? 2 : 1; },
        type: "type"
    },
    520: {
        atk: function(p) { return p.unit.type == "STR" ? 2 : 1; },
        type: "type"
    },
    529: {
        def: function(p) { return 0; }
    },
    530: {
        def: function(p) { return 0; }
    },
    533: {
        orb: function(p) { return 1.5; }
    },
    534: {
        orb: function(p) { return 1.5; }
    },
    542: {
        rcv: function(p) { return 2; }
    },
    545: {
        atk: function(p) { return p.unit.type == "PSY" ? 1.5 : 1; },
        type: "type"
    },
    546: {
        atk: function(p) { return p.unit.type == "PSY" ? 1.5 : 1; },
        type: "type"
    },
    549: {
        atk: function(p) { return p.defenseDown ? 1.3 : 1; },
        type: "condition"
    },
    550: {
        atk: function(p) { return p.defenseDown ? 1.3 : 1; },
        type: "condition"
    },
    552: {
        def: function(p) { return 0; }
    },
    555: {
        delay: function(p) { return 1; },
    },
    556: {
        delay: function(p) { return 1; },
    },
    559: {
        orb: function(p) { return 1.5; }
    },
    560: {
        orb: function(p) { return 1.5; }
    },
    568: {
        delay: function(p) { return 1; },
        def: function(p) { return 0.5; }
    },
    569: {
        delay: function(p) { return 1; },
        def: function(p) { return 0.5; }
    },
    572: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 2 : 1; },
        type: "class",
        onActivation: function(p) { p.tdata.lock = Math.max(1, p.tdata.lock); },
        onDeactivation: function(p) { if (p.tdata.lock == 1) p.tdata.lock = 0; }
    },
    574: {
        atk: function(p) { return p.unit.class.has("Striker") ? 1.75 : 1; },
        type: "class"
    },
    575: {
        atk: function(p) { return p.unit.class.has("Striker") ? 1.75 : 1; },
        type: "class"
    },
    576: {
        rcv: function(p) { return 1.5; }
    },
    582: {
        atk: function(p) { return p.unit.type == "QCK" ? 1.5 : 1; },
        type: "type"
    },
    583: {
        rcvStatic: function(p) { return p.unit.class.has("Shooter") ? 300: 0; },
    },
    589: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.5 : 1; },
        type: "class"
    },
    590: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.5 : 1; },
        type: "class"
    },
    596: {
        def: function(p) { return 0.5; }
    },
    597: {
        def: function(p) { return 0.5; }
    },
    600: {
        atk: function(p) { return p.unit.type == "PSY" ? 1.3 : 1; },
        type: "type"
    },
    601: {
        atk: function(p) { return p.unit.type == "PSY" ? 1.3 : 1; },
        type: "type"
    },
    602: {
        atk: function(p) { return p.unit.type == "QCK" ? 2 : 1; },
        type: "type"
    },
    603: {
        atk: function(p) { return p.unit.type == "QCK" ? 2 : 1; },
        type: "type"
    },
    612: {
        atkStatic: function(p) { return 45; },
        rcvStatic: function(p) { return 45; },
        type: "type"
    },
    613: {
        atkStatic: function(p) { return 45; },
        rcvStatic: function(p) { return 45; },
        type: "type"
    },
    614: {
        def: function(p) { return 0.5; }
    },
    617: {
        atk: function(p) { return p.unit.class.has("Shooter") ? 1.2 : 1; },
        type: "class"
    },
    622: {
        rcvStatic: function(p) { return 100; },
        type: "type"
    },
    632: {
        def: function(p) { return 0.5; }
    },
    633: {
        def: function(p) { return 0.5; }
    },
    634: {
        atk: function(p) { return p.unit.type == "QCK" || p.unit.type == "PSY" ? 1.2 : 1; },
        type: "type"
    },
    635: {
        atk: function(p) { return p.unit.type == "QCK" || p.unit.type == "PSY" ? 1.2 : 1; },
        type: "type"
    },
    637: {
        atk: function(p) { return 1.3; },
        type: "condition",
        warning: "Selected special (%name%) assumes that the enemy has a defense buff active."
    },
    642: {
        orb: function(p) { return 1.75; }
    },
    643: {
        orb: function(p) { return 1.75; }
    },
    644: {
        atk: function(p) { return p.delayed > 0 ? 1.2 : 1; },
        type: "condition",
    },
    645: {
        atk: function(p) { return p.delayed > 0 ? 1.2 : 1; },
        type: "condition",
    },
    648: {
        orb: function(p) { return 1.5; }
    },
    649: {
        orb: function(p) { return 1.5; }
    },
    650: {
        orb: function(p) { return 1.5; }
    },
    651: {
        orb: function(p) { return 1.5; }
    },
    655: {
        orb: function(p) { return 1.25; }
    },
    656: {
        orb: function(p) { return 1.25; }
    },
    660: {
        delay: function(p) { return 1; },
        def: function(p) { return 0.5; }
    },
    661: {
        delay: function(p) { return 1; },
        def: function(p) { return 0.5; }
    },
    665: {
        atk: function(p) { return p.defenseDown ? 1.3 : 1; },
        type: "condition"
    },
    666: {
        atk: function(p) { return p.defenseDown ? 1.3 : 1; },
        type: "condition"
    },
    668: {
        atk: function(p) { return !p.unit.class.has('Free Spirit') ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    669: {
        atk: function(p) { return !p.unit.class.has('Free Spirit') ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    670: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class"
    },
    671: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class"
    },
    680: {
        atk: function(p) { return p.unit.type == "DEX" ? 1.25 : 1; },
        rcv: function(p) { return p.unit.type == "DEX" ? 1.25 : 1; },
        type: "type"
    },
    681: {
        atk: function(p) { return p.unit.type == "DEX" ? 1.25 : 1; },
        rcv: function(p) { return p.unit.type == "DEX" ? 1.25 : 1; },
        type: "type"
    },
    686: {
        delay: function(p) { return 1; },
    },
    687: {
        atk: function(p) { return p.unit.class.has("Free Spirit") ? 1.3 : 1; },
        type: "class"
    },
    688: {
        atk: function(p) { return p.unit.class.has("Free Spirit") ? 1.3 : 1; },
        type: "class"
    },
    689: {
        orb: function(p) { return 1.5; }
    },
    690: {
        orb: function(p) { return 1.5; }
    },
    710: {
        atk: function(p) { return p.unit.class.has("Shooter") ? 1.25 : 1; },
        type: "class"
    },
    711: {
        atk: function(p) { return p.unit.class.has("Shooter") ? 1.25 : 1; },
        type: "class"
    },
    712: {
        atk: function(p) { return p.slot < 2 ? 1.5 : 1; },
        type: "class"
    },
    713: {
        atk: function(p) { return p.slot < 2 ? 1.5 : 1; },
        type: "class"
    },
    715: {
        atk: function(p) { return p.unit.class.has("Free Spirit") ? 1.5 : 1; },
        type: "class"
    },
    716: {
        atk: function(p) { return p.unit.class.has("Free Spirit") ? 1.5 : 1; },
        type: "class"
    },
    719: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? (p.cached.percHP <= 30 ? 2 : 1.5) : 1; },
        type: "class",
    },
    720: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? [(p.cached.percHP <= 30 ? 2 : 1.5), 2][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Cerebral") ? [1, 2][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        chain: function(p) { return [1, p.cached.percHP <= 50 ? 2 : 1][CrunchUtils.llimitUnlock(p, "specials")]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [Infinity, p.cached.percHP <= 50 ? 20.0 : Infinity][CrunchUtils.llimitUnlock(p, "specials")] : 1;
        }
    },
    727: {
        def: function(p) { return 0.5; }
    },
    730: {
        atk: function(p) { return p.unit.type == "INT" ? 1.5 : 1; },
        type: "type"
    },
    731: {
        atk: function(p) { return p.unit.type == "INT" ? 1.5 : 1; },
        type: "type"
    },
    732: {
        def: function(p) { return 0.5; }
    },
    733: {
        def: function(p) { return 0.5; }
    },
    740: {
        atk: function(p) { return 1.3; },
        type: "condition",
        warning: "Selected special (%name%) assumes that the enemy has a defense buff active."
    },
    741: {
        atk: function(p) { return 1.3; },
        type: "condition",
        warning: "Selected special (%name%) assumes that the enemy has a defense buff active."
    },
    742: {
        orb: function(p) { return 1.25; }
    },
    743: {
        orb: function(p) { return 1.25; }
    },
    753: {
        orb: function(p) { return 1.75; }
    },
    754: {
        orb: function(p) { return 1.75; }
    },
    755: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.75 : 1; },
        type: "class"
    },
    756: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.75 : 1; },
        type: "class"
    },
    761: {
        atk: function(p) { return 1.2; },
        type: "type"
    },
    762: {
        atk: function(p) { return p.unit.type == "PSY" ? 1.75 : 1; },
        type: "type"
    },
    766: {
        delay: function(p) { return 1; },
    },
    769: {
        poison: function(p) { return 99; }
    },
    770: {
        atk: function(p) { return p.delayed > 0 ? 1.3 : 1; },
        type: "condition",
    },
    771: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 1.75 : 1; },
        type: "type"
    },
    780: {
        atk: function(p) { return p.slot == p.sourceSlot ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.percHP <= 20 ? 2 : (p.percHP <= 50 ? 1.75 : 1.5));
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + n + 'x Self Attack boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    781: {
        atk: function(p) { return p.slot == p.sourceSlot ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.percHP <= 20 ? 2 : (p.percHP <= 50 ? 1.75 : 1.5));
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + n + 'x Self Attack boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    782: {
        delay: function(p) { return 1; },
    },
    783: {
        delay: function(p) { return 1; },
    },
    786: {
        delay: function(p) { return 1; },
    },
    787: {
        delay: function(p) { return 1; },
    },
    788: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.75 : 1; },
        type: "class"
    },
    789: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.75 : 1; },
        type: "class"
    },
    790: {
        atk: function(p) { return /STR|DEX|QCK/.test(p.unit.type) ? 1.2 : 1; },
        type: "type"
    },
    791: {
        atk: function(p) { return /STR|DEX|QCK/.test(p.unit.type) ? 1.2 : 1; },
        type: "type"
    },
    794: {
        delay: function(p) { return 1; },
    },
    795: {
        delay: function(p) { return 1; },
    },
    796: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.75 : 1; },
        type: "type"
    },
    797: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.75 : 1; },
        type: "type"
    },
    798: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class"
    },
    803: {
        atk: function(p) { return 1.1; },
        type: "type"
    },
    804: {
        atk: function(p) { return 1.1; },
        type: "type"
    },
    805: {
        orb: function(p) { return 1.75; }
    },
    806: {
        orb: function(p) { return 1.75; }
    },
    807: {
        atk: function(p) { return p.defenseDown ? 1.3 : 1; },
        type: "condition"
    },
    808: {
        atk: function(p) { return p.defenseDown ? 1.3 : 1; },
        type: "condition"
    },
    809: {
        orb: function(p) { return 1.5; },
        def: function(p) { return 0.2; }
    },
    810: {
        orb: function(p) { return 1.5; },
        def: function(p) { return 0.2; }
    },
    813: {
        delay: function(p) { return 1; },
        orb: function(p) { return 1.25; }
    },
    822: {
        rcvStatic: function(p) { return 100; },
        type: "type"
    },
    825: {
        atkStatic: function(p) { return 200; },
        type: "type"
    },
    826: {
        delay: function(p) { return 1; },
        atk: function(p) { return 0.2; },
        type: "type"
    },
    827: {
        atk: function(p) { return p.poisoned ? 1.05 : 1; },
        type: "condition",
    },
    828: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Driven") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP < 20 ? 1.75 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.75 ? 'below' : 'above') + ' 20%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }  
    },
    829: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Driven") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP < 20 ? 1.75 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.75 ? 'below' : 'above') + ' 20%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    832: {
        atk: function(p) { return p.unit.class.has("Free Spirit") ? 1.5 : 1; },
        type: "class"
    },
    833: {
        atk: function(p) { return p.unit.class.has("Free Spirit") ? 1.5 : 1; },
        type: "class"
    },
    835: {
        orb: function(p) { return 1.75; }
    },
    836: {
        orb: function(p) { return 1.75; }
    },
    837: {
        atk: function(p) { return p.unit.class.has("Driven") ? 1.75 : 1; },
        type: "class",
        poison: function(p) { return 99; }
    },
    838: {
        atk: function(p) { return p.unit.class.has("Driven") ? 1.75 : 1; },
        type: "class",
        poison: function(p) { return 99; }
    },
    839: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type"
    },
    840: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type"
    },
    841: {
        delay: function(p) { return 1; },
        atk: function(p) { return p.delayed > 0 ? 1.25 : 1; },
        type: "condition",
    },
    842: {
        delay: function(p) { return 1; },
        atk: function(p) { return p.delayed > 0 ? 1.25 : 1; },
        type: "condition",
    },
    843: {
        atk: function(p) {
            if (window.specials[843].first) return p.unit.class.has("Shooter") ? 1.5 : 1;
            else return p.unit.class.has("Shooter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? 1.5 : 1;
        },
        type: "class",
        onActivation: function(p) {
            window.specials[843].first = !window.specials[843].first;
            p.scope.notify({
                text: (window.specials[843].first ?
                    'Boosting Shooters. To switch to the second multiplier, disable and re-enable this special' :
                    'Boosting Shooters, Slashers and Strikers. To switch to the first multiplier, disable and re-enable this special'),
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    844: {
        atk: function(p) {
            if (window.specials[844].first) return p.unit.class.has("Shooter") ? 1.5 : 1;
            else return p.unit.class.has("Shooter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? 1.5 : 1;
        },
        type: "class",
        onActivation: function(p) {
            window.specials[844].first = !window.specials[844].first;
            p.scope.notify({
                text: (window.specials[844].first ?
                    'Boosting Shooters. To switch to the second multiplier, disable and re-enable this special' :
                    'Boosting Shooters, Slashers and Strikers. To switch to the first multiplier, disable and re-enable this special'),
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    847: {
        atk: function(p) { return 1.05; },
        orb: function(p) { return 1.1; },
        type: "class"
    },
    848: {
        atk: function(p) { return 1.05; },
        orb: function(p) { return 1.1; },
        type: "class"
    },
    849: {
        def: function() { return 0.5; }
    },
    853: {
        atk: function(p) { return p.unit.class.has("Powerhouse") || p.unit.class.has("Fighter") ? 1.2 : 1; },
        type: "class"
    },
    857: {
        rcv: function(p) { return p.unit.type == 'PSY' ? 1.5 : 1; },
        type: "type"
    },
    858: {
        rcv: function(p) { return p.unit.type == 'PSY' ? 1.5 : 1; },
        type: "type"
    },
    861: {
        orb: function(p) { return 1.5; }
    },
    862: {
        orb: function(p) { return 1.5; }
    },
    863: {
        def: function(p) { return 0.5; }
    },
    864: {
        delay: function(p) { return 1; },
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    865: {
        delay: function(p) { return 1; },
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    866: {
        atk: function(p) {
            return p.unit.class.has("Slasher") || p.unit.class.has("Cerebral") ? 1.3 : 1;
        },
        type: "class"
    },
    867: {
        delay: function(p) { return 1; },
    },
    869: {
        orb: function(p) { return 2.0; }
    },
    870: {
        orb: function(p) { return 2.0; },
        affinity: function(p) { return [1, 1.75][CrunchUtils.llimitUnlock(p, "specials")]; }
    },
    873: {
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x Orb boost. To switch to the ' + [1.75, 1.5][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    874: {
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x Orb boost. To switch to the ' + [1.75, 1.5][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    881: {
        atk: function(p) {
            return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 1.75 : 1;
        },
        rcv: function(p) { return 0.1; },
        type: "class"
    },
    882: {
        atk: function(p) {
            return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 1.75 : 1;
        },
        rcv: function(p) { return 0.1; },
        type: "class"
    },
    883: {
        atk: function(p) { return !p.unit.class.has('Powerhouse') ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    884: {
        atk: function(p) { return !p.unit.class.has('Powerhouse') ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    885: {
        atk: function(p) { return p.unit.class.has('Fighter') ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP <= 30 ? 1.5 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + n + 'x ATK boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    886: {
        atk: function(p) { return p.unit.class.has('Slasher') ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP <= 30 ? 1.5 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + n + 'x ATK boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    887: {
        def: function(p) { return 0.2; }
    },
    891: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.25 : 1; },
        type: "class"
    },
    902: {
        atk: function(p) { return !p.unit.class.has('Powerhouse') ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    903: {
        atk: function(p) { return !p.unit.class.has('Powerhouse') ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    904: {
        delay: function(p) { return 1; },
    },
    905: {
        atk: function(p) {
            if (!window.specials[905].stage) return p.slot == p.sourceSlot ? 1.5 : 1;
            if (window.specials[905].stage == 1) return p.unit.class.has("Slasher") ? 1.5 : 1;
            if (window.specials[905].stage == 2) return p.unit.class.has("Slasher") ? 1.75 : 1;
        },
        type: "class",
        stage: -1,
        onActivation: function(p) {
            window.specials[905].stage = (window.specials[905].stage + 1) % 3;
            p.scope.notify({
                text: 'Activating stage #' + (window.specials[905].stage + 1) + '. To move onto the next stage, disable and re-enable this special.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    906: {
        atk: function(p) {
            if (!window.specials[906].stage) return p.slot == p.sourceSlot ? 1.5 : 1;
            if (window.specials[906].stage == 1) return p.unit.class.has("Slasher") ? 1.5 : 1;
            if (window.specials[906].stage == 2) return p.unit.class.has("Slasher") ? 1.75 : 1;
        },
        type: "class",
        stage: -1,
        onActivation: function(p) {
            window.specials[906].stage = (window.specials[906].stage + 1) % 3;
            p.scope.notify({
                text: 'Activating stage #' + (window.specials[906].stage + 1) + '. To move onto the next stage, disable and re-enable this special.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    907: {
        delay: function(p) { return 1; },
    },
    908: {
        delay: function(p) { return 1; },
    },
    909: {
        atk: function(p) { return p.unit.type == "PSY" ? 1.5 : 1; },
        type: "type"
    },
    910: {
        atk: function(p) { return p.unit.type == "PSY" ? 1.5 : 1; },
        type: "type"
    },
    911: {
        atk: function(p) {
            if (!window.specials[911].stage) return p.unit.class.has("Powerhouse") ? 1.2 : 1;
            if (window.specials[911].stage == 1) return p.unit.class.has("Powerhouse") ? 2 : 1;
        },
        type: "class",
        stage: -1,
        onActivation: function(p) {
            window.specials[911].stage = (window.specials[911].stage + 1) % 2;
            p.scope.notify({
                text: 'Activating stage #' + (window.specials[911].stage + 1) + '. To move onto the next stage, disable and re-enable this special.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    912: {
        atk: function(p) {
            if (!window.specials[912].stage) return p.unit.class.has("Powerhouse") ? 1.2 : 1;
            if (window.specials[912].stage == 1) return p.unit.class.has("Powerhouse") ? 2 : 1;
        },
        type: "class",
        stage: -1,
        onActivation: function(p) {
            window.specials[912].stage = (window.specials[912].stage + 1) % 2;
            p.scope.notify({
                text: 'Activating stage #' + (window.specials[912].stage + 1) + '. To move onto the next stage, disable and re-enable this special.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    915: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 1.5 : 1; },
        rcv: function(p) { return p.unit.class.has("Cerebral") ? 1.5 : 1; },
        type: "class"
    },
    916: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 1.5 : 1; },
        rcv: function(p) { return p.unit.class.has("Cerebral") ? 1.5 : 1; },
        type: "class"
    },
    917: {
        delay: function(p) { return 1; },
    },
    918: {
        delay: function(p) { return 1; },
    },
    921: {
        orb: function(p) { return 1.5; }
    },
    922: {
        orb: function(p) { return 1.5; }
    },
    925: {
        atk: function(p) { return p.defenseDown ? 1.3 : 1; },
        type: "condition"
    },
    926: {
        atk: function(p) { return p.defenseDown ? 1.3 : 1; },
        type: "condition"
    },
    927: {
        atk: function(p) {
            return p.unit.class.has("Slasher") || p.unit.class.has("Driven") ? 1.2 : 1;
        },
        type: "class"
    },
    928: {
        atk: function(p) { return p.poisoned ? 1.3 : 1; },
        type: "condition",
    },
    929: {
        atk: function(p) { return p.poisoned ? 1.3 : 1; },
        type: "condition",
    },
    940: {
        atk: function(p) { return p.unit.type == "DEX" ? 1.75 : 1; },
        type: "type"
    },
    941: {
        atk: function(p) { return p.unit.type == "DEX" ? 1.75 : 1; },
        type: "type"
    },
    944: {
        atk: function(p) { return p.unit.class.has("Driven") ? 1.5 : 1; },
        rcv: function(p) { return p.unit.class.has("Driven") ? 1.5 : 1; },
        type: "class"
    },
    945: {
        atk: function(p) { return p.unit.class.has("Driven") ? 1.5 : 1; },
        rcv: function(p) { return p.unit.class.has("Driven") ? 1.5 : 1; },
        type: "class"
    },
    947: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "INT" ? 1.3 : 1; },
        type: "type"
    },
    954: {
        def: function(p) { return 0.2; }		
    },
    955: {
        atk: function(p) { return p.defenseDown ? 1.2 : 1; },
        type: "condition"
    },
    956: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.2 : 1; },
        type: "class"
    },
    961: {
        orb: function(p) { return 1.25; }
    },
    963: {
        def: function(p) { return 0; }
    },
    964: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.1 ? 1 : 0);
            p.cached.multiplier = [1.1, 1.5][n];
            p.scope.notify({
                text: 'Using the ' + [1.1, 1.5][n] + 'x ATK multiplier. To switch to the ' + [1.5, 1.1][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    965: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.1 ? 1 : 0);
            p.cached.multiplier = [1.1, 1.5][n];
            p.scope.notify({
                text: 'Using the ' + [1.1, 1.5][n] + 'x ATK multiplier. To switch to the ' + [1.5, 1.1][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    975: {
        atk: function(p) { return (p.unit.class.has("Driven") || p.unit.class.has("Striker")) ? 1.3 : 1; },
        type: "class"
    },
    976: {
        atk: function(p) { return (p.unit.class.has("Driven") || p.unit.class.has("Striker")) ? 1.3 : 1; },
        type: "class"
    },
    977: {
        chainAddition: function(p) { return 0.5; }
    },
    978: {
        chainAddition: function(p) { return 0.5; }
    },
    984: {
        delay: function(p) { return 1; },
    },
    981: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.75 : 1; },
        type: "type"
    },
    998: {
        delay: function(p) { return 1; },
    },
    999: {
        delay: function(p) { return 1; },
    },
    1005: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.75 : 1; },
        type: "type"
    },
    1006: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.75 : 1; },
        type: "type"
    },
    1010: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.3 : 1; },
        type: "type"
    },
    1011: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.3 : 1; },
        type: "type"
    },
    1013: {
        atk: function(p) { return p.delayed > 0 ? 1.2 : 1; },
        type: "condition",
    },
    1015: {
        atk: function(p) { return p.unit.type == "INT" ? 1.5 : 1; },
        type: "type"
    },
    1016: {
        atk: function(p) { return p.unit.type == "INT" ? 1.5 : 1; },
        type: "type"
    },
    1017: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.5 : 1},
        type: "class"
    },
    1018: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.5 : 1},
        type: "class"
    },
    1023: {
        atk: function(p) { return p.unit.class.has("Free Spirit") ? 1.75 : 1},
        type: "class"
    },
    1024: {
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.percHP >= 70 ? 1.25 : p.percHP >= 30 ? 1.5 : 1.75);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.75 ? 'below 30%' : n == 1.5 ? 'between 70% and 30%' : 'above 70%') + ', using the ' + n + 'x Orb boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1025: {
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.percHP >= 70 ? 1.25 : p.percHP >= 30 ? 1.5 : 1.75);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.75 ? 'below 30%' : n == 1.5 ? 'between 70% and 30%' : 'above 70%') + ', using the ' + n + 'x Orb boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1028: {
        //TODO
        hit: function(n,p) { return n > 30 ? 1.75 : 1; },
        onActivation: function(p) {
            p.scope.notify({
                text: 'This ability currently stacks with regular attack boosts when it does not in-game, so please keep that in mind.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1029: {
        //TODO
        hit: function(n,p) { return n > 30 ? 1.75 : 1; },
        onActivation: function(p) {
            p.scope.notify({
                text: 'This ability currently stacks with regular attack boosts when it does not in-game, so please keep that in mind.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1030: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2.25 : 1; },
        type: "type"
    },
    1031: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2.25 : 1; },
        type: "type"
    },
    1035: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? [1, 2][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "type",
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? [1, 2][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
    },
    1040: {
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            var n = (p.percHP <= 30 ? 1.5 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + n + 'x ATK boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1041: {
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            var n = (p.percHP <= 30 ? 1.5 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + n + 'x ATK boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1046: {
        staticMult: function(p) { return 55; }
    },
    1047: {
        staticMult: function(p) { return 55; }
    },
    1055: {
        poison: function(p) { return 99; },
        atk: function(p) { return 1.4; },
        type: "condition",
    },
    1056: {
        poison: function(p) { return 99; },
        atk: function(p) { return 1.4; },
        type: "condition",
    },
    1059: {
        orb: function(p) { return 1.5; }
    },
    1060: {
        orb: function(p) { return 1.5; }
    },
    1061: {
        chain: function(p) { return 2; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2 : 1;
        }
    },
    1063: {
        atk: function(p) { return p.unit.class.has("Shooter") ? 1.3 : 1},
        type: "class"
    },
    1065: {
        orb: function(p) { return 1.25; }
    },
    1066: {
        chainAddition: function(p) { return 0.1;}
    },
    1067: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.5 : 1; },
        type: "type"
    },
    1071: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.5 : 1},
        type: "class"
    },
    1072: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.5 : 1},
        type: "class"
    },
    1076: {
        delay: function(p) { return 1; },
    },
    1077: {
        delay: function(p) { return 1; },
    },
    1080: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type"
    },
    1081: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type"
    },
    1082: {
        atk: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Fighter")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP >= 70 ? 1.2 : p.percHP >= 30 ? 1.5 : 1.75);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.75 ? 'below 30%' : n == 1.5 ? 'between 70% and 30%' : 'above 70%') + ', using the ' + n + 'x Attack boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1083: {
        atk: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Fighter")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP >= 70 ? 1.2 : p.percHP >= 30 ? 1.5 : 1.75);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.75 ? 'below 30%' : n == 1.5 ? 'between 70% and 30%' : 'above 70%') + ', using the ' + n + 'x Attack boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1086: {
        orb: function(p) { return 1.5; }
    },
    1087: {
        orb: function(p) { return 1.5; }
    },
    1088: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Driven") ? 1.5 : 1},
        type: "class"
    },
    1089: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Driven") ? 1.5 : 1},
        type: "class"
    },
    1096: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.75 : 1; },
        type: "type"
    },
    1097: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.75 : 1; },
        type: "type"
    },
    1099: {
        orb: function(p) { return 1.5; }
    },
    1100: {
        orb: function(p) { return 1.5; }
    },
    1101: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "INT" ? 1.75 : 1; },
        type: "type"
    },
    1102: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "INT" ? 1.75 : 1; },
        type: "type"
    },
    1105: {
        delay: function(p) { return 1; },
        chainAddition: function(p) { return 0.2;}
    },
    1106: {
        delay: function(p) { return 1; },
        chainAddition: function(p) { return 0.2;}
    },
    1107: {
        atk: function(p) { return p.unit.class.has("Driven") ? 1.75 : 1; },
        type: "class"
    },
    1108: {
        atk: function(p) { return p.unit.class.has("Driven") ? 1.75 : 1; },
        type: "class"
    },
    1111: {
        orb: function(p) { return 1.25; }
    },
    1112: {
        orb: function(p) { return 1.25; }
    },
    1113: {
        atk: function(p) { return 1.2; },
        type: "type"
    },
    1114: {
        atk: function(p) { return p.unit.type == "STR" ? 2 : 1; },
        type: "type" 
    },
    1115: {
        atk: function(p) { return p.unit.type == "STR" ? 2 : 1; },
        type: "type" 
    },
    1122: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2.25 : 1; },
        type: "type",
        orb: function(p) { return p.slot == p.sourceSlot ? 1.5 : 1}
    },
    1123: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2.25 : 1; },
        type: "type",
        orb: function(p) { return p.slot == p.sourceSlot ? 1.5 : 1}
    },
    1132: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Shooter")  ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x ATK multiplier. To switch to the ' + [1.75, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1133: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Shooter") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x ATK multiplier. To switch to the ' + [1.75, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1137: {
        orb: function(p) { return p.unit.class.has("Free Spirit") ? 1.5 : 1; }
    },
    1138: {
        atk: function(p) { return p.unit.class.has("Powerhouse") || p.unit.class.has("Fighter") ? 1.3 : 1},
        type: "class"
    },
    1142: {
        delay: function(p) { return 1; },
    },
    1143: {
        delay: function(p) { return 1; },
    },
    1149: {
        poison: function(p) { return 99; }
    },
    1153: {
        def: function(p) { return 0; },
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.25 : 1},
        type: "class" 
    },
    1154: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.5 : 1},
        type: "class"
    },
    1158: {
        poison: function(p) { return 99; }
    },
    1159: {
        poison: function(p) { return 99; }
    },
    1164: {
        orb: function(p) { return 1.5; },
        rcv: function(p) { return 1.5; }
    },
    1165: {
        orb: function(p) { return 1.5; },
        rcv: function(p) { return 1.5; }
    },
    1168: {
        atk: function(p) { return p.unit.type == "STR" ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP <= 10 ? 1.75 : p.percHP <= 30 ? 1.5 : p.percHP <= 50 ? 1.25 : 1.1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.75 ? 'below' : 'above') + ' ' + (n == 1.75 ? '10%' : n == 1.5 ? '10%' : n == 1.25 ? '30%' : '50%') + ', using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1169: {
        atk: function(p) { return p.unit.type == "STR" ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP <= 10 ? 1.75 : p.percHP <= 30 ? 1.5 : p.percHP <= 50 ? 1.25 : 1.1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.75 ? 'below' : 'above') + ' ' + (n == 1.75 ? '10%' : n == 1.5 ? '10%' : n == 1.25 ? '30%' : '50%') + ', using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1181: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1181].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1181].turnedOn = false;
        }
    },
    1182: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1182].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1182].turnedOn = false;
        }
    },
    1193: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    1194: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    1195: {
        atk: function(p) { return p.unit.class.has("Striker") ? 1.75 : 1; },
        type: "class"
    },
    1196: {
        atk: function(p) { return p.unit.class.has("Striker") ? 1.75 : 1; },
        type: "class"
    },
    1209: {
        delay: function(p) { return 1; },
    },
    1210: {
        delay: function(p) { return 1; },
    },
    1211: {
        orb: function(p) { return 1.5; }
    },
    1212: {
        orb: function(p) { return 1.5; }
    },
    1219: {
        atk: function(p) {
            if (!window.specials[1219].stage) return p.unit.class.has("Shooter") ? 1.2 : 1;
            if (window.specials[1219].stage == 1) return p.unit.class.has("Shooter") ? 1.5 : 1;
            if (window.specials[1219].stage == 2) return p.unit.class.has("Shooter") ? 2 : 1;
        },
        type: "class",
        stage: -1,
        onActivation: function(p) {
            window.specials[1219].stage = (window.specials[1219].stage + 1) % 3;
            p.scope.notify({
                text: 'Activating stage #' + (window.specials[1219].stage + 1) + '. To move onto the next stage, disable and re-enable this special.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1220: {
        atk: function(p) {
            if (!window.specials[1220].stage) return p.unit.class.has("Shooter") ? 1.2 : 1;
            if (window.specials[1220].stage == 1) return p.unit.class.has("Shooter") ? 1.5 : 1;
            if (window.specials[1220].stage == 2) return p.unit.class.has("Shooter") ? 2 : 1;
        },
        type: "class",
        stage: -1,
        onActivation: function(p) {
            window.specials[1220].stage = (window.specials[1220].stage + 1) % 3;
            p.scope.notify({
                text: 'Activating stage #' + (window.specials[1220].stage + 1) + '. To move onto the next stage, disable and re-enable this special.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1221: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1221].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1221].turnedOn = false;
        }
    },
    1222: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1222].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1222].turnedOn = false;
        }
    },
    1225: {
        delay: function(p) { return 1; },
    },
    1227: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.75 : 1; },
        type: "type"
    },
    1233: {//Tashigi
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Cerebral") ? 1.5 : 1; }
    },
    1234: {//Tashigi
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Cerebral") ? 1.5 : 1; }
    },
    1235: {
        delay: function(p) { return 1; },
    },
    1236: {
        delay: function(p) { return 1; },
    },
    1237: {
        //TODO
        hit: function(n,p) { return n > 30 ? 2 : 1; },
        onActivation: function(p) {
            p.scope.notify({
                text: 'This ability currently stacks with regular attack boosts when it does not in-game, so please keep that in mind.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1238: {
        //TODO
        hit: function(n,p) { return n > 30 ? 2 : 1; },
        onActivation: function(p) {
            p.scope.notify({
                text: 'This ability currently stacks with regular attack boosts when it does not in-game, so please keep that in mind.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1239: {
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[1239].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Only affects damage if Kizaru is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[1239].turnedOn[p.slot] = false;
        }
    },
    1240: {
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[1240].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Only affects damage if Kizaru is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[1240].turnedOn[p.slot] = false;
        }
    },
    1241: {
        staticMult: function(p) { return 15; }
    },
    1242: {
        staticMult: function(p) { return 15; }
    },
    1245: {
        atk: function(p) { return !p.unit.class.has('Fighter') ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.3 ? 1 : 0);
            p.cached.multiplier = [1.3, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.3, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.3][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1246: {
        atk: function(p) { return !p.unit.class.has('Fighter') ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.3 ? 1 : 0);
            p.cached.multiplier = [1.3, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.3, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.3][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1247: {
        atk: function(p) { return !p.unit.class.has('Fighter') ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.3 ? 1 : 0);
            p.cached.multiplier = [1.3, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.3, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.3][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1250: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.5 : 1; },
        type: "class"
    },
    1251: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.5 : 1; },
        type: "class"
    },
    1253: {
        atk: function(p) { return p.unit.type == "STR" ? 1.75 : 1; },
        type: "class"
    },
    1254: {
        def: function(p) { return 0.2; }
    },
    1255: {
        orb: function(p) { return 1.5; }
    },
    1256: {
        atk: function(p) { return 1.3 },
        type: "condition",
        warning: "Selected special (%name%) assumes that the enemy has a defense buff active."
    },
    1259: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1259].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1259].turnedOn = false;
        }
    },
    1260: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1260].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1260].turnedOn = false;
        }
    },
    1261: {//Young Senor Pink
        affinity: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 1.5 : 1; }
    },
    1262: {//Young Senor Pink
        affinity: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 1.5 : 1; }
    },
    1263: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type"
    },
    1264: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type"
    },
    1265: {
        atk: function(p) { return p.unit.class.has("Free Spirit") ? 1.75 : 1; },
        type: "class"
    },
    1266: {
        atk: function(p) { return p.unit.class.has("Free Spirit") ? 1.75 : 1; },
        type: "class"
    },
    1269: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1269].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1269].turnedOn = false;
        }
    },
    1270: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1270].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1270].turnedOn = false;
        }
    },
    1271: {
        orb: function(p) { return p.unit.class.has("Shooter") ? 1.75 : 1; }
    },
    1272: {
        orb: function(p) { return p.unit.class.has("Shooter") ? 1.75 : 1; }
    },
    1273: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.5 : 1; },
        type: "class"
    },
    1274: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.5 : 1; },
        type: "class"
    },
    1282: {
        atk: function(p) { return 1.2; },
        type: "class",
        orb: function(p) { return 1.2; },
    },
    1283: {
        atk: function(p) { return p.unit.class.has("Driven") ? 1.5 : 1; },
        type: "class"
    },
    1286: {
        atk: function(p) { return p.unit.class.has("Shooter") ? 1.5 : 1; },
        type: "class"
    },
    1287: {
        atk: function(p) { return p.unit.class.has("Shooter") ? 1.5 : 1; },
        type: "class"
    },
    1295: {
        def: function(p) { return 0; }
    },
    1296: {
        def: function(p) { return 0; }
    },
    1297: {
        affinity: function(p) { return p.unit.type == "STR" ? 1.75 : 1; }
    },
    1298: {
        affinity: function(p) { return p.unit.type == "STR" ? 1.75 : 1; }
    },
    1299: {
        atk: function(p) { return p.unit.type == "INT" ? 1.75 : 1; },
        type: "class"
    },
    1300: {
        atk: function(p) { return p.unit.type == "INT" ? 1.75 : 1; },
        type: "class"
    },
    1313: {
        atk: function(p) { return p.unit.cost >= 50 ? 1.75 : 1; },
        type: "class"
    },
    1314: {
        atk: function(p) { return p.unit.cost >= 50 ? 1.75 : 1; },
        type: "class"
    },
    1317: {
        delay: function(p) { return 1; },
        def: function(p) { return 0.2; }
    },
    1318: {
        delay: function(p) { return 1; },
        def: function(p) { return 0.2; }
    },
    1319: {
        atk: function(p) { return 1.5; },
        type: "class"
    },
    1320: {
        atk: function(p) { return 1.5; },
        type: "class"
    },
    1321: {
        atk: function(p) { return p.delayed > 0 ? 1.5 : 1; },
        type: "condition",
    },
    1322: {
        atk: function(p) { return p.delayed > 0 ? 1.5 : 1; },
        type: "condition",
    },
    1323: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1323].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1323].turnedOn = false;
        }
    },
    1324: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1324].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1324].turnedOn = false;
        }
    },
    1329: {
        affinity: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? 1.25 : 1; }
    },
    1330: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1330].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1330].turnedOn = false;
        }
    },
    1334: {
        poison: function(p) { return 99; }
    },
    1335: {
        chainAddition: function(p) { return 0.5; }
    },
    1336: {
        chainAddition: function(p) { return 0.5; }
    },
    1339: {
        chainAddition: function(p) {
            if (!window.specials[1339].stage) return 0.2;
            if (window.specials[1339].stage == 1) return 0.3;
            if (window.specials[1339].stage == 2) return 0.5;
        },
        stage: -1,
        onActivation: function(p) {
            window.specials[1339].stage = (window.specials[1339].stage + 1) % 3;
            p.scope.notify({
                text: 'Activating stage #' + (window.specials[1339].stage + 1) + '. To move onto the next stage, disable and re-enable this special.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1340: {
        delay: function(p) { return 1; },
    },
    1341: {
        delay: function(p) { return 1; },
    },
    1343: {
        atk: function(p) { return p.defenseDown ? 1.3 : 1; },
        type: "condition"
    },
    1344: {
        atk: function(p) { return p.unit.class.has("Driven") ? 1.3 : 1; },
        type: "class"
    },
    1348: {
        atk: function(p) { return 1.2; },
        type: "class",
        orb: function(p) { return 1.2; },
    },
    1349: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 1.2 : 1; },
        type: "class"
    },
    1351: {
        delay: function(p) { return 1; },
        def: function(p) { return 0.5; }
    },
    1353: {
        chainAddition: function(p) { return 0.5; }
    },
    1354: {
        orb: function(p) { return 1.5; },
    },
    1355: {
        orb: function(p) { return 1.5; },
    },
    1358: {
        delay: function(p) { return 1; },
        rcv: function(p) { return 1.75; }
    },
    1359: {
        delay: function(p) { return 1; },
        rcv: function(p) { return 1.75; }
    },
    1361: {
        atk: function(p) { return !p.unit.class.has('Slasher') ? 1 : p.sourceSlot < 2 ? 2 : 1.75 ; },
        type: "class",
    },
    1362: {
        atk: function(p) { return !p.unit.class.has('Slasher') ? 1 : p.sourceSlot < 2 ? 2 : 1.75 ; },
        type: "class",
    },
    1363: {
        orb: function(p) { return p.unit.type == "PSY" ? 2 : 1; },
    },
    1364: {
        orb: function(p) { return p.unit.type == "PSY" ? 2 : 1; },
    },
    1365: {
        delay: function(p) { return 1; },
    },
    1366: {
        delay: function(p) { return 1; },
    },
    1367:{
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x Orb boost. To switch to the ' + [1.75, 1.5][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1368:{
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x Orb boost. To switch to the ' + [1.75, 1.5][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1373: {
        delay: function(p) { return 1; },
        poison: function(p) { return 99; }
    },
    1374: {
        delay: function(p) { return 1; },
        poison: function(p) { return 99; }
    },
    1375: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.5 : 1; },
        type: "type",
        orb: function(p) { return p.slot == p.sourceSlot ? 1.5 : 1}
    },
    1376: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.5 : 1; },
        type: "type",
        orb: function(p) { return p.slot == p.sourceSlot ? 1.5 : 1}
    },
    1379: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1379].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1379].turnedOn = false;
        },
        orb: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral")) ? 2 : 1; }
    },
    1380: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1380].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1380].turnedOn = false;
        },
        orb: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral")) ? 2 : 1; }
    },
    1387: {
        delay: function(p) { return 1; },
    },
    1389: {
        orb: function(p) { return p.unit.type == "INT" ? 1.75 : 1; },
    },
    1390: {
        atk: function(p) { return p.unit.cost <= 40 ? 1.75 : 1; },
        type: "class"
    },
    1391: {
        atk: function(p) { return p.unit.cost <= 40 ? 1.75 : 1; },
        type: "class"
    },
    1392: {
        atk: function(p) { return p.unit.type == "PSY" ? 1.75 : 1; },
        type: "class"
    },
    1393: {
        atk: function(p) { return 1.1; },
        type: "class",
        orb: function(p) { return 1.1; },
    },
    1394: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Striker") ? 1.5 : 1; },
        type: "class"
    },
    1395: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Striker") ? 1.5 : 1; },
        type: "class"
    },
    1396: {
        delay: function(p) { return 1; },
        def: function(p) { return 0.2; }
    },
    1397: {
        delay: function(p) { return 1; },
        def: function(p) { return 0.2; }
    },
    1400: {
        affinity: function(p) { return p.unit.class.has("Shooter") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x Affinity boost. To switch to the ' + [1.75, 1.5][n] + 'x Affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1401: {
        affinity: function(p) { return p.unit.class.has("Shooter") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x Affinity boost. To switch to the ' + [1.75, 1.5][n] + 'x Affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1402: {
        atk: function(p) { return p.unit.type == "PSY" ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.3 ? 1 : 0);
            p.cached.multiplier = [1.3, 1.5][n];
            p.scope.notify({
                text: 'Using the ' + [1.3, 1.5][n] + 'x Type boost. To switch to the ' + [1.5, 1.3][n] + 'x Type boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1403: {
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[p.team[p.slot].unit.number+1].turnedOn[p.slot] = true;
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.slot].unit.number+1].turnedOn[p.slot] = false;
        }
    },
    1404: {
        atk: function(p) { return p.unit.class.has("Free Spirit") ? [1, 1.75][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "type",
        def: function(p) { return [[1, 1],[1, 0.2]][p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")]; },
        status: function(p) { return p.defenseDown ? [[1, 1],[1, p.cached.multiplier2]][p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[p.team[p.slot].unit.number+1].turnedOn[p.slot] = true;
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.cached.captain.class.has("Free Spirit") ? 1.75 : 1;
            p.scope.notify({
                text: 'Using the Stage ' + [1, 2][levels[n]] + ' special. To switch to the Stage' + [1, 2][levels[(n + 1) % levels.length]] + ' special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.slot].unit.number+1].turnedOn[p.slot] = false;
        }
    },
    1405: {
        atk: function(p) { return p.cached.enemyImmunities.delay && p.unit.class.has("Shooter") ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return p.cached.enemyImmunities.delay && p.unit.class.has("Shooter") ? 1.75 : 1; },
    },
    1406: {
        atk: function(p) { return p.cached.enemyImmunities.delay && p.unit.class.has("Shooter") ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return p.cached.enemyImmunities.delay && p.unit.class.has("Shooter") ? 1.75 : 1; },
    },
    1407: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "DEX" ? 2 : 1; },
        type: "type"
    },
    1408: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "DEX" ? 2 : 1; },
        type: "type"
    },
    1409: {
        delay: function(p) { return 1; },
        atk: function(p) {
            return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 1.75 : 1;
        },
        type: "class"
    },
    1410: {
        delay: function(p) { return 1; },
        atk: function(p) {
            return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 1.75 : 1;
        },
        type: "class"
    },
    1413: {
        orb: function(p) { return [1, 2][CrunchUtils.llimitUnlock(p, "specials")]; },
        atkbase: function(p) { return [0, 800][CrunchUtils.llimitUnlock(p, "specials")]; },
    },
    1415: {
        atk: function(p) { return p.unit.cost <= 30 ? 1.5 : 1; },
        type: "class"
    },
    1416: {
        atk: function(p) { return p.unit.cost <= 30 ? 1.5 : 1; },
        type: "class"
    },
    1419: {
        atk: function(p) { return p.defenseDown ? 1.5 : 1; },
        type: "condition"
    },
    1420: {
        atk: function(p) { return p.defenseDown ? 1.5 : 1; },
        type: "condition"
    },
    1421: {
        atk: function(p) { return p.unit.class.has("Driven") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP == 100 ? 2 : 1.5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'equal to' : 'below') + ' 100%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1422: {
        atk: function(p) { return p.unit.class.has("Driven") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP == 100 ? 2 : 1.5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'equal to' : 'below') + ' 100%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1425: {
        orb: function(p) { return 1.5; },
        warning: "Selected special (%name%) assumes that an ally has been inflicted with Bind."
    },
    1426: {
        orb: function(p) { return 1.5; },
        warning: "Selected special (%name%) assumes that an ally has been inflicted with Bind."
    },
    1428: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.75 : 1; },
        type: "class",
        warning: "Selected special (%name%) assumes that the enemy has been Delayed."
    },
    1431: {
        atk: function(p) { return 1.5; },
        type: "type"
    },
    1432: {
        atk: function(p) { return 1.5; },
        type: "type"
    },
    1435: {
        delay: function(p) { return 1; },
    },
    1436: {
        delay: function(p) { return 1; },
    },
    1437: {
        atk: function(p) { return p.delayed > 0 ? 1.5 : 1; },
        type: "condition",
        orb: function(p) { return p.unit.class.has("Powerhouse") ? 1.75 : 1; },
    },
    1438: {
        atk: function(p) { return p.delayed > 0 ? 1.5 : 1; },
        type: "condition",
        orb: function(p) { return p.unit.class.has("Powerhouse") ? 1.75 : 1; },
    },
    1439: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.75 : 1; },
        type: "class"
    },
    1440: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.75 : 1; },
        type: "class"
    },
    1441: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    1442: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    1443: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.5 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Powerhouse") ? 1.5 : 1; },
    },
    1444: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.5 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Powerhouse") ? 1.5 : 1; },
    },
    1445: {
        delay: function(p) { return 1; },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "QCK" ? [1.75, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        rcv: function(p) { return p.unit.type == "PSY" || p.unit.type == "QCK" ? [1.75, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "type"
    },
    1446: {
        delay: function(p) { return 1; },
    },
    1447: {
        atk: function(p) { return p.slot == p.sourceSlot ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.2 ? 1 : 0);
            p.cached.multiplier = [1.2, 1.5][n];
            p.scope.notify({
                text: 'Using the ' + [1.2, 1.5][n] + 'x ATK multiplier. To switch to the ' + [1.5, 1.2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1449: {
        def: function(p) { return 0.5; }
    },
    1450: {
        def: function(p) { return 0.5; }
    },
    1459: {
        atk: function(p) { return p.defenseDown ? 1.5 : 1; },
        type: "condition"
    },
    1460: {
        atk: function(p) { return p.defenseDown ? 1.5 : 1; },
        type: "condition"
    },
    1461: {
        atk: function(p) { return p.unit.type == "QCK" ? 1.5 : 1; },
        type: "type"
    },
    1462: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1462].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1462].turnedOn = false;
        }
    },
    1463: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1463].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1463].turnedOn = false;
        }
    },
    1466: {
        def: function(p) { return 0; }
    },
    1467: {
        def: function(p) { return 0; }
    },
    1468: {
        delay: function(p) { return 1; },
    },
    1469: {
        delay: function(p) { return 1; },
    },
    1476: {
        delay: function(p) { return 1; },
        atk: function(p) {
            return p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? 1.75 : 1;
        },
        type: "class"
    },
    1477: {
        delay: function(p) { return 1; },
        atk: function(p) {
            return p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? 1.75 : 1;
        },
        type: "class"
    },
    1478: {
        atk: function(p) { return p.unit.type == "INT" || p.unit.type == "QCK" ? 2 : 1; },
        type: "type"
    },
    1479: {
        atk: function(p) { return p.unit.type == "INT" || p.unit.type == "QCK" ? 2 : 1; },
        type: "type"
    },
    1482: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.25 ? 1 : 0);
            p.cached.multiplier = [1.25, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.25, 1.75][n] + 'x ATK multiplier. To switch to the ' + [1.75, 1.25][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1483: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.25 ? 1 : 0);
            p.cached.multiplier = [1.25, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.25, 1.75][n] + 'x ATK multiplier. To switch to the ' + [1.75, 1.25][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1484: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    1485: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    1486: {
        orb: function(p) { return (p.unit.class.has("Fighter")) ? 2 : 1; }
    },
    1487: {
        orb: function(p) { return (p.unit.class.has("Fighter")) ? 2 : 1; }
    },
    1490: {
        def: function(p) { return 0.5; }
    },
    1491: {
        def: function(p) { return 0.5; }
    },
    1492: {
        atk: function(p) { return p.unit.class.has('Free Spirit') ? [[1.5, 2, 1.75, 2], [1.75, 2.25, 2, 2.5]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        type: "class",
        status: function(p) { return [[1, 1, 1, 1], [1, 1, 1.5, 1.5]]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Stage 1, Turn 1", "Stage 1 Turn 2", "Stage 2, Turn 1", "Stage 2 Turn 2"][n] + 'Special. To ' + ["Stage 1, Turn 1", "Stage 1 Turn 2", "Stage 2, Turn 1", "Stage 2 Turn 2"][(n + 1) % levels.length] + 'Special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1497: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.5 : 1; },
        type: "type"
    },
    1501: {
        atk: function(p) { return 1.3; },
        type: "type"
    },
    1505: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2.25 : 1; },
        type: "type"
    },
    1506: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2.25 : 1; },
        type: "type"
    },
    1507: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class"
    },
    1508: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class"
    },
    1511: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.5 : 1; },
        type: "type"
    },
    1512: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP <= 30 ? 1.5 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.5 ? 'below' : 'above') + ' 30%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1515: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1515].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1515].turnedOn = false;
        }
    },
    1516: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1516].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1516].turnedOn = false;
        }
    },
    1517: {
        orb: function(p) { return 1.75; }
    },
    1518: {
        orb: function(p) { return 1.75; }
    },
    1522: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.75 : 1; },
        type: "type",
    },
    1525: {
        delay: function(p) { return 1; },
        atk: function(p) { return p.delayed > 0 ? 1.3 : 1; },
        type: "condition",
    },
    1526: {
        atk: function(p) { return p.slot < 2 ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x ATK multiplier. To switch to the ' + [1.75, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1527: {
        atk: function(p) { return p.slot < 2 ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x ATK multiplier. To switch to the ' + [1.75, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1528: {
        turnedOn: false,
        onActivation: function(p) {
            if(p.percHP < 30) {
                window.specials[1528].turnedOn = true;
            }
        },
        onDeactivation: function(p) {
            window.specials[1528].turnedOn = false;
        }
    },
    1529: {
        orb: function(p) { return (p.unit.class.has("Slasher")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP >= 50 ? 2.25 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.25 ? 'above' : 'below') + ' 50%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1530: {
        orb: function(p) { return (p.unit.class.has("Slasher")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP >= 50 ? 2.25 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.25 ? 'above' : 'below') + ' 50%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1531: {
        delay: function(p) { return 1; },
        chainAddition: function(p) {return p.cached.multiplier;},
        onActivation: function(p) {
            var n = (p.cached.multiplier == 0.2 ? 1 : 0);
            p.cached.multiplier = [0.2, 0.3][n];
            p.scope.notify({
                text: 'Using the ' + [0.2, 0.3][n] + 'x chain addition. To switch to the ' + [0.3, 0.2][n] + 'x chain addition, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1532: {
        delay: function(p) { return 1; },
        chainAddition: function(p) {return p.cached.multiplier;},
        onActivation: function(p) {
            var n = (p.cached.multiplier == 0.2 ? 1 : 0);
            p.cached.multiplier = [0.2, 0.3][n];
            p.scope.notify({
                text: 'Using the ' + [0.2, 0.3][n] + 'x chain addition. To switch to the ' + [0.3, 0.2][n] + 'x chain addition, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1535: {
        atk: function(p) { return p.unit.type == "PSY" ? 1.75 : 1; },
        type: "type"
    },
    1536: {
        atk: function(p) { return p.unit.type == "PSY" ? 1.75 : 1; },
        type: "type"
    },
    1539: {
        def: function(p) { return 0.2; }
    },
    1540: {
        def: function(p) { return 0.2; }
    },
    1541: {
        chainAddition: function(p) { return 0.5; },
        def: function(p) { return 0; }
    },
    1542: {
        chainAddition: function(p) { return 0.5; },
        def: function(p) { return 0; }
    },
    1543: {
        delay: function(p) { return p.cached.enemyImmunities.delay ? 1 : [3, 5][CrunchUtils.llimitUnlock(p, "specials")]; },
        ignoresImmunities: function(p) { return ['delay']; },
        orb: function(p) { return p.unit.class.has("Shooter") ? [2, 1, 2][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        atk: function(p) { return p.unit.class.has("Shooter") ? [1, 2, 2][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb Boost", "ATK Boost", "Orb & ATK Boosts"][levels[n]] + '. To switch to ' + ["Orb Boost", "ATK Boost", "Orb & ATK Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1544: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.5 : 1; },
        type: "class"
    },
    1545: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.5 : 1; },
        type: "class"
    },
    1546: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1546].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1546].turnedOn = false;
        },
        atk: function(p) { return p.unit.class.has("Free Spirit") ? 1.5 : 1; },
        type: "class"
    },
    1547: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1547].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1547].turnedOn = false;
        },
        atk: function(p) { return p.unit.class.has("Free Spirit") ? 1.5 : 1; },
        type: "class"
    },
    1548: {
        delay: function(p) { return 1; },
        chainAddition: function(p) { return 0.2;}
    },
    1551: {
        delay: function(p) { return 1; },
    },
    1552: {
        atk: function(p) { return p.unit.cost == 40 ? 1.75 : 1; },
        type: "class"
    },
    1553: {
        atk: function(p) { return p.unit.cost == 40 ? 1.75 : 1; },
        type: "class"
    },
    1554: {
        atk: function(p) { return p.unit.type == "DEX" ? 1.35 : 1; },
        orb: function(p) { return p.unit.type == "DEX" ? 1.35 : 1; },
        type: "type",
    },
    1555: {
        atk: function(p) { return p.unit.type == "DEX" ? 1.35 : 1; },
        orb: function(p) { return p.unit.type == "DEX" ? 1.35 : 1; },
        type: "type",
    },
    1556: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type",
        warning: "Selected special (%name%) assumes that the enemy has over 3,000,000 HP."
    },
    1557: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1557].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1557].turnedOn = false;
        },
    },
    1561: {
        atk: function(p) { return p.unit.class.has("Striker") ? 1.5 : 1; },
        type: "class"
    },
    1562: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.75 : 1; },
        type: "class"
    },
    1563: {
        chainAddition: function(p) { return 0.3; }
    },
    1564: {
        chainAddition: function(p) { return 0.3; }
    },
    1567: {
        orb: function(p) { return 1.5; }
    },
    1568: {
        orb: function(p) { return 1.5; }
    },
    1570: {
        staticMult: function(p) { return 80; }
    },
    1571: {
        staticMult: function(p) { return 80; }
    },
    1572: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 1.75 : 1; },
        type: "class"
    },
    1573: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 1.75 : 1; },
        type: "class"
    },
    1574: {
        delay: function(p) { return 1; },
    },
    1575: {
        delay: function(p) { return 1; },
    },
    1578: {
        chainAddition: function(p) {return p.cached.multiplier;},
        onActivation: function(p) {
            var n = (p.cached.multiplier == 0.2 ? 1 : p.cached.multiplier == 0.3 ? 2 : 0);
            p.cached.multiplier = [0.2, 0.3, 0.5][n];
            p.scope.notify({
                text: 'Using the ' + [0.2, 0.3, 0.5][n] + 'x chain addition. To switch to the ' + [0.3, 0.5, 0.2][n] + 'x chain addition, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1579: {
        chainAddition: function(p) {return p.cached.multiplier;},
        onActivation: function(p) {
            var n = (p.cached.multiplier == 0.2 ? 1 : p.cached.multiplier == 0.3 ? 2 : 0);
            p.cached.multiplier = [0.2, 0.3, 0.5][n];
            p.scope.notify({
                text: 'Using the ' + [0.2, 0.3, 0.5][n] + 'x chain addition. To switch to the ' + [0.3, 0.5, 0.2][n] + 'x chain addition, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1580: {
        orb: function(p) { return 1.5; }
    },
    1581: {
        orb: function(p) { return 1.5; }
    },
    1582: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 1.5 : 1; },
        rcv: function(p) { return p.unit.class.has("Cerebral") ? 1.5 : 1; },
        type: "class"
    },
    1583:{
        orb: function(p) { return (p.unit.class.has("Striker")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 2][n] + 'x Orb boost. To switch to the ' + [2, 1.5][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1584:{
        orb: function(p) { return (p.unit.class.has("Striker")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 2][n] + 'x Orb boost. To switch to the ' + [2, 1.5][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1585: {
        atk: function(p) { return (p.cached.currentHP < 5000 && (p.unit.class.has("Slasher") || p.unit.class.has("Driven"))) ? 1.75 : 1; },
        type: "class"
    },
    1586: {
        atk: function(p) { return (p.cached.currentHP < 5000 && (p.unit.class.has("Slasher") || p.unit.class.has("Driven"))) ? 1.75 : 1; },
        type: "class"
    },
    1587: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type"
    },  
    1588: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type"
    },
    1591: {
        atk: function(p) {
            return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? 1.75 : 1;
        },
        type: "class"
    },
    1592: {
        atk: function(p) {
            return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? 1.75 : 1;
        },
        type: "class"
    },
    1593: {
        turnedOn: [ false, false, false, false, false, false ],
        atk: function(p) { return p.unit.class.has("Fighter") ? [[1, 1, 1], [2, 2.5, 2.5]][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
        atkPlus: function(p) { return [[0, 0, 0], [0, 0, 0.25]][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            window.specials[p.team[p.slot].unit.number+1].turnedOn[p.slot] = true;
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["2x ATK Boost", "2.5x ATK Boost", "ATK Boost & ATK Buff"][levels[n]] + '. To switch to ' + ["2x ATK Boost", "2.5x ATK Boost", "ATK Boost & ATK Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.slot].unit.number+1].turnedOn[p.slot] = false;
        }
    },
    1594: {
        orb: function(p) { return (p.unit.class.has("Powerhouse")) ? 2 : 1; }
    },
    1595: {
        orb: function(p) { return (p.unit.class.has("Powerhouse")) ? 2 : 1; }
    },
    1598: {
        atk: function(p) { return 1.2 },
        type: "class",
    },
    1599: {
        def: function(p) { return 0.5 },
    },
    1600: {
        orb: function(p) { return (p.unit.type == "INT" || p.unit.type == "PSY") ? 1.75 : 1; },
    },
    1603: {
        delay: function(p) { return 1; },
    },
    1606: {
        delay: function(p) { return 1; },
        def: function(p) { return 0.5 },
    },
    1607: {
        atk: function(p) { return (p.unit.class.has("Shooter")) ? 1.5 : 1; },
        type: "class",
    },
    1613: {
        def: function(p) { return 0.5 },
        orb: function(p) { return 1.75; }
    },
    1614: {
        def: function(p) { return 0.5 },
        orb: function(p) { return 1.75; }
    },
    1615: {
        atk: function(p) { return p.unit.class.has("Striker") ? 1.5 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Striker") ? 1.5 : 1; }
    },
    1616: {
        atk: function(p) { return p.unit.class.has("Striker") ? 1.5 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Striker") ? 1.5 : 1; }
    },
    1617: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "INT" || p.unit.type == "DEX" ? 1.75 : 1; },
        type: "type"
    },
    1618: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "INT" || p.unit.type == "DEX" ? 1.75 : 1; },
        type: "type"
    },
    1619: {
        delay: function(p) { return 1; },
        orbPlus: function(p) { return [0, 0.3][CrunchUtils.llimitUnlock(p, "specials")]; },
    },
    1620: {
        atk: function(p) { return p.unit.class.has("Striker") ? 2 : 1; },
        type: "class",
    },
    1621: {
        atk: function(p) { return p.unit.class.has("Striker") ? 2 : 1; },
        type: "class",
    },
    1622: {
        orb: function(p) { return 2; }
    },
    1623: {
        orb: function(p) { return 2; }
    },
    1624: {
        poison: function(p) { return 99; }
    },
    1626: {
        atk: function(p) { return p.unit.type == "PSY" ? 1.5 : 1; },
        type: "type"
    },
    1627: {
        affinity: function(p) { return p.unit.class.has("Striker") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.25 ? 1 : p.cached.multiplier == 1.5 ? 2 : 0);
            p.cached.multiplier = [1.25, 1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.25, 1.5, 1.75][n] + 'x affinity boost. To switch to the ' + [1.5, 1.75, 1.25][n] + 'x affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1628: {
        affinity: function(p) { return p.unit.class.has("Striker") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.25 ? 1 : p.cached.multiplier == 1.5 ? 2 : 0);
            p.cached.multiplier = [1.25, 1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.25, 1.5, 1.75][n] + 'x affinity boost. To switch to the ' + [1.5, 1.75, 1.25][n] + 'x affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1631: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.75 : 1; },
        type: "class",
    },
    1632: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.75 : 1; },
        type: "class",
    },
    1633: {
        orb: function(p) { return 1.25; }
    },
    1636: {
        atk: function(p) { return p.poisoned ? 1.3 : 1; },
        type: "condition",
    },
    1637: {
        atk: function(p) { return p.poisoned ? 1.3 : 1; },
        type: "condition",
    },
    1640: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1640].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1640].turnedOn = false;
        }
    },
    1641: {
        atk: function(p) { return p.poisoned ? 1.2 : 1; },
        type: "condition",
    },
    1642: {
        poison: function(p) { return 99; }
    },
    1643: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.2 : 1; },
        type: "class",
    },
    1650: {
        orb: function(p) { return 1.5; }
    },
    1651: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1651].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1651].turnedOn = false;
        }
    },
    1652: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1652].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1652].turnedOn = false;
        }
    },
    1653: {
        orb: function(p) { return 1.75; }
    },
    1654: {
        orb: function(p) { return 1.75; }
    },
    1655: {
        atk: function(p) { return p.unit.type == "QCK" ? 2 : 1; },
        type: "type"
    },
    1656: {
        atk: function(p) { return p.unit.type == "QCK" ? 2 : 1; },
        type: "type"
    },
    1657: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2.75) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.captain.class.has("Striker")) {
                p.cached.multiplier = 2.75;
            }
        },
    },
    1658: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2.75) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.captain.class.has("Striker")) {
                p.cached.multiplier = 2.75;
            }
        },
    },
    1661: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    1662: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    1663: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? [1, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
        onActivation: function(p) {
            var levels = [2.25, 2.5, 2.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1664: {
        atk: function(p) { return p.cached.captain.class.has("Shooter") ? p.unit.class.has("Shooter") ? 2 : 1 : 1; },
        type: "class",
    },
    1665: {
        atk: function(p) { return p.cached.captain.class.has("Shooter") ? p.unit.class.has("Shooter") ? 2 : 1 : 1; },
        type: "class",
    },
    1666: {
        orb: function(p) { return (p.unit.class.has("Powerhouse") || p.unit.class.has("Striker")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP <= 70 ? 1 : 1.5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.5 ? 'above' : 'below') + ' 70%, using the ' + n + 'x orb boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1667: {
        orb: function(p) { return (p.unit.class.has("Powerhouse") || p.unit.class.has("Striker")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP <= 70 ? 1 : 1.5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.5 ? 'above' : 'below') + ' 70%, using the ' + n + 'x orb boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1668: {
        atk: function(p) { return p.unit.class.has("Striker") ? 1.75 : 1; },
        type: "class"
    },
    1669: {
        atk: function(p) { return p.unit.class.has("Striker") ? 1.75 : 1; },
        type: "class"
    },
    1670: {
        delay: function(p) { return 1; },
    },
    1671: {
        orb: function(p) { return 1.5; }
    },
    1673: {
        def: function(p) { return 0.1; }
    },
    1674: {
        def: function(p) { return 0.1; }
    },
    1675: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Driven") ? 1.5 : 1},
        type: "class"
    },
    1676: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Driven") ? 1.5 : 1},
        type: "class"
    },
    1677: {
        affinity: function(p) { return p.unit.class.has("Slasher") ? 1.5 : 1; }
    },
    1678: {
        affinity: function(p) { return p.unit.class.has("Slasher") ? 1.5 : 1; }
    },
    1681: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.slot > 1 ? 0.5 : 0);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Luffy is ' + (n == 0.5 ? 'not captain' : 'captain') + ', using the ' + n + ' Chain Addition.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1682: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.slot > 1 ? 0.5 : 0);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Luffy is ' + (n == 0.5 ? 'not captain' : 'captain') + ', using the ' + n + ' Chain Addition.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1683: {
        atk: function(p) { return p.defenseDown ? 1.5 : 1; },
        type: "condition"
    },
    1684: {
        atk: function(p) { return p.defenseDown ? 1.5 : 1; },
        type: "condition"
    },
    1685: {
        delay: function(p) { return 1; },
    },
    1686: {
        delay: function(p) { return 1; },
    },
    1687: {
        def: function(p) { return 0; }
    },
    1688: {
        def: function(p) { return 0; }
    },
    1689: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type"
    },
    1690: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type"
    },
    1691: {
        atk: function(p) { return p.defenseDown ? 1.3 : 1; },
        type: "condition"
    },
    1692: {
        chainAddition: function(p) { return 0.3; },
        def: function(p) { return 0.5; }
    },
    1693: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.75 : 1; },
        type: "type",
        orb: function(p) { return p.slot == p.sourceSlot ? 1.75 : 1}
    },
    1694: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.75 : 1; },
        type: "type",
        orb: function(p) { return p.slot == p.sourceSlot ? 1.75 : 1}
    },
    1695: {
        orb: function(p) { return (p.unit.class.has("Striker")) ? 1.75 : 1; }
    },
    1696: {
        orb: function(p) { return (p.unit.class.has("Striker")) ? 1.75 : 1; }
    },
    1697: {
        poison: function(p) { return 99; }
    },
    1698: {
        poison: function(p) { return 99; }
    },
    1699: {
        chainAddition: function(p) { return 0.3; }
    },
    1700: {
        chainAddition: function(p) { return 0.3; }
    },
    1703: {
        atk: function(p) { return 1.75; },
        type: "condition",
        warning: "Selected special (%name%) assumes that the enemy has been inflicted with Toxin."
    },
    1704: {
        atk: function(p) { return 1.75; },
        type: "condition",
        warning: "Selected special (%name%) assumes that the enemy has been inflicted with Toxin."
    },
    1707: {
        def: function(p) { return 0; },
        atk: function(p) { return p.unit.type == "PSY" ? [1, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
        onActivation: function(p) {
            var levels = [2.25, 2.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1710: {
        orb: function(p) { return (p.unit.class.has("Cerebral")) ? 1.75 : 1; }
    },
    1711: {
        orb: function(p) { return (p.unit.class.has("Cerebral")) ? 1.75 : 1; }
    },
    1712: {
        orb: function(p) { return (p.unit.class.has("Driven")) ? 2 : 1; }
    },
    1713: {
        orb: function(p) { return (p.unit.class.has("Driven")) ? 2 : 1; }
    },
    1716: {
        delay: function(p) { return 1; },
        atk: function(p) { return p.unit.class.has("Driven") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP <= 30 ? 1.75 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.75 ? 'below' : 'above') + ' 30%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1718: {
        atk: function(p) { return p.unit.class.has("Driven") ? 1.25 : 1},
        type: "class"
    },
    1720: {
        chain: function(p) { return p.cached.captain.class.has("Fighter") ? 2.5 : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? (p.cached.captain.class.has("Fighter") ? 2.5 : Infinity) : 1;
        }
    },
    1721: {
        chain: function(p) { return p.cached.captain.class.has("Fighter") ? 2.5 : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? (p.cached.captain.class.has("Fighter") ? 2.5 : Infinity) : 1;
        },
    },
    1722: {
        atk: function(p) { return p.unit.class.has("Striker") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.percHP <= 50 ? 1.5 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1723: {
        atk: function(p) { return p.unit.class.has("Striker") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.percHP <= 50 ? 1.5 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1724: {
        staticMult: function(p) { return 25; }
    },
    1725: {
        staticMult: function(p) { return 25; }
    },
    1726: {
        staticMult: function(p) { return 55; }
    },
    1727: {
        staticMult: function(p) { return 55; }
    },
    1732: {
        atk: function(p) { return p.cached.enemyImmunities.delay && (p.unit.class.has("Striker") || p.unit.class.has("Powerhouse")) ? 1.75 : 1; },
        type: "class"
    },
    1733: {
        atk: function(p) { return p.cached.enemyImmunities.delay && (p.unit.class.has("Striker") || p.unit.class.has("Powerhouse")) ? 1.75 : 1; },
        type: "class"
    },
    1736: {
        delay: function(p) { return 1; },
    },
    1737: {
        delay: function(p) { return 1; },
    },
    1738: {
        orb: function(p) { return 1.75; }
    },
    1739: {
        orb: function(p) { return 1.75; }
    },
    1740: {
        def: function(p) { return .2; },
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? 1.75 : 1},
        type: "class"
    },
    1741: {
        def: function(p) { return .2; },
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? 1.75 : 1},
        type: "class"
    },
    1742: {
        atk: function(p) { return p.defenseDown ? 1.75 : 1; },
        type: "condition"
    },
    1743: {
        atk: function(p) { return p.defenseDown ? 1.75 : 1; },
        type: "condition"
    },
    1744: {
        orb: function(p) { return (p.unit.class.has("Shooter")) ? 1.75 : 1; }
    },
    1745: {
        orb: function(p) { return (p.unit.class.has("Shooter")) ? 1.75 : 1; }
    },
    1746: {
        delay: function(p) { return 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1746].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1746].turnedOn = false;
        }
    },
    1747: {
        delay: function(p) { return 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1747].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1747].turnedOn = false;
        }
    },
    1750:{
        orb: function(p) { return (p.unit.class.has("Striker")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2.25][n] + 'x Orb boost. To switch to the ' + [2.25, 1.75][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1751:{
        atk: function(p) { return p.unit.class.has("Striker") ? [[1, 1, 1, 1],[1, 2, 1, 2]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Striker") ? [[1.75, 1.75, 2.25, 2.25],[2, 2, 2.5, 2.5]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Stage 1", "Stage 1 /w ATK boost", "Stage 2", "Stage 2 /w ATK boost"][n] + ' special. To switch to the ' + ["Stage 1", "Stage 1 /w ATK boost", "Stage 2", "Stage 2 /w ATK boost"][(n + 1) % levels.length] + ' special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1752: {
        atk: function(p) { return !(p.unit.cost <= 30) ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1753: {
        atk: function(p) { return !(p.unit.cost <= 30) ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1754: {
        orb: function(p) { return 1.75; }
    },
    1755: {
        orb: function(p) { return 1.75; }
    },
    1758: {
        delay: function(p) { return 1; },
    },
    1759: {
        delay: function(p) { return 1; },
    },
    1762: {
        def: function(p) { return .2; },
    },
    1763: {
        def: function(p) { return .2; },
        affinity: function(p) { return (p.unit.class.has("Powerhouse")) ? [1, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; }
    },
    1764: {
        chain: function(p) { return [2.5, 2.75][CrunchUtils.llimitUnlock(p, "specials")]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [2.5, 35][CrunchUtils.llimitUnlock(p, "specials")] : 1;
        }
    },
    1765: {
        def: function(p) { return .5; },
    },
    1766: {
        def: function(p) { return .5; },
    },
    1767: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.5 : 1},
        type: "class"
    },
    1769: {
        delay: function(p) { return 1; },
        atk: function(p) { return (p.delayed > 0 && p.cached.captain.class.has("Cerebral")) ? 1.5 : 1; },
        type: "condition"
    },
    1770: {
        delay: function(p) { return 1; },
        atk: function(p) { return (p.delayed > 0 && p.cached.captain.class.has("Cerebral")) ? 1.5 : 1; },
        type: "condition",
    },
    1771: {
        orb: function(p) { return 1.75; }
    },
    1772: {
        orb: function(p) { return 1.75; }
    },
    1773: {
        orb: function(p) { return p.unit.class.has("Free Spirit") ? 1.5 : 1; }
    },
    1774: {
        orb: function(p) { return p.unit.class.has("Free Spirit") ? 1.75 : 1; }
    },
    1777: {
        chainAddition: function(p) { return 0.2;}
    },
    1778: {
        chainAddition: function(p) { return 0.2;}
    },
    1779: {
        chainAddition: function(p) {return 0.5;}
    },
    1780: {
        chainAddition: function(p) { return 0.5;}
    },
    1781: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.3 : 1; },
        type: "type"
    },
    1782: {
        delay: function(p) { return 1; },
    },
    1783: {
        orb: function(p) { return 1.5; }
    },
    1784: {
        atk: function(p) { return 1.5; },
        type: "type"
    },
    1785: {
        orb: function(p) { return 1.25; }
    },
    1791: {
        orb: function(p) { return 1.75; }
    },
    1792: {
        orb: function(p) { return 1.75; }
    },
    1793: {
        atk: function(p) { return !(p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1794: {
        chainAddition: function(p) { return [0, 0.9][CrunchUtils.llimitUnlock(p, "specials")]; },
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var levels = [[1.75, 2],[1.75, 2.25, 2.5]][CrunchUtils.llimitUnlock(p, "specials")];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x multiplier. To switch to ' + levels[(n + 1) % levels.length] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1795: {
        delay: function(p) { return 1; },
    },
    1796: {
        delay: function(p) { return 1; },
    },
    1797: {
        atk: function(p) { return p.delayed > 0 ? 1.5 : 1; },
        type: "condition",
    },
    1798: {
        atk: function(p) { return p.delayed > 0 ? 1.5 : 1; },
        type: "condition",
    },
    1799: {
        atk: function(p) { return p.defenseDown ? 1.75 : 1; },
        type: "condition"
    },
    1800: {
        atk: function(p) { return p.defenseDown ? 1.75 : 1; },
        type: "condition"
    },
    1801: {
        def: function(p) { return 0.1; }
    },
    1802: {
        def: function(p) { return 0.1; }
    },
    1805: {
		def: function(p) { return 0.0; },
        orb: function(p) { return 1.5; }
    },
    1806: {
		def: function(p) { return 0.0; },
        orb: function(p) { return 1.5; }
    },
    1807: {
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[1807].turnedOn[p.slot] = true;
        },
        onDeactivation: function(p) {
            window.specials[1807].turnedOn[p.slot] = false;
        },
        chain: function(p) { return p.cached.captain.class.has("Slasher") ? 2.75 : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? (p.cached.captain.class.has("Slasher") ? 2.75 : Infinity) : 1;
        },
        orb: function(p) { return p.cached.captain.class.has("Slasher") && p.unit.class.has("Slasher") ? 2 : 1; },
    },
    1808: {
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[1808].turnedOn[p.slot] = true;
        },
        onDeactivation: function(p) {
            window.specials[1808].turnedOn[p.slot] = false;
        },
        chain: function(p) { return p.cached.captain.class.has("Slasher") ? [2.75, 3.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? (p.cached.captain.class.has("Slasher") ? [2.75, 3.25][CrunchUtils.llimitUnlock(p, "specials")] : Infinity) : 1;
        },
        orb: function(p) { return p.cached.captain.class.has("Slasher") && p.unit.class.has("Slasher") ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
    },
    1811: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.5 : 1; },
        type: "class"
    },
    1812: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.5 : 1; },
        type: "class"
    },
    1813: {
        atk: function(p) { return p.slot == 1 ? 1.5 : 1; },
        type: "class"
    },
    1814: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "class"
    },
    1815: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "class"
    },
    1816: {
        status: function(p) { return [1, 1.75][CrunchUtils.llimitUnlock(p, "specials")]; },
        atk: function(p) { return p.unit.class.has("Shooter") ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class"
    },
    1817: {
        atk: function(p) { return p.slot > 1 ? 1.2 : 1; },
        type: "class"
    },
    1818: {
        atk: function(p) { return p.slot > 1 ? 1.2 : 1; },
        type: "class"
    },
    1819: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.75 : 1; },
        type: "type"
    },
    1825: {
        affinity: function(p) { return p.unit.type == "INT" ? 1.75 : 1; }
    },
    1826: {
        affinity: function(p) { return p.unit.type == "INT" ? 1.75 : 1; }
    },
    1827: {
        atk: function(p) { return p.unit.type == "INT" ? 2 : 1; },
        type: "type"
    },
    1828: {
        atk: function(p) { return p.unit.type == "INT" ? 2 : 1; },
        type: "type"
    },
    1829: {
        orb: function(p) { return (p.unit.class.has("Driven") || p.unit.class.has("Cerebral")) ? 1.75 : 1; },
        poison: function(p) { return 99; }
    },
    1830: {
        orb: function(p) { return (p.unit.class.has("Driven") || p.unit.class.has("Cerebral")) ? 1.75 : 1; },
        poison: function(p) { return 99; }
    },
    1831: {
        orb: function(p) { return 2; }
    },
    1832: {
        orb: function(p) { return [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")]; }
    },
    1835: {
        chain: function(p) { return (p.cached.captain.type == "STR" || p.cached.captain.type == "PSY") ? 2.5 : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? (p.cached.captain.class.has("Powerhouse") ? 2.5 : Infinity) : 1;
        },
        delay: function(p) { return p.cached.captain.class.has("Powerhouse") ? 1 : 0; },
    },
    1836: {
        chain: function(p) { return (p.cached.captain.type == "STR" || p.cached.captain.type == "PSY") ? 2.5 : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? (p.cached.captain.class.has("Powerhouse") ? 2.5 : Infinity) : 1;
        },
        delay: function(p) { return p.cached.captain.class.has("Powerhouse") ? 1 : 0; },
    },
    1837: {
        atk: function(p) { return (p.cached.captain.type == "QCK" || p.cached.captain.type == "PSY") ? 1.75 : 1; },
        type: "class",
    },
    1838: {
        atk: function(p) { return (p.cached.captain.type == "QCK" || p.cached.captain.type == "PSY") ? 1.75 : 1; },
        type: "class",
    },
    1839: {
        atk: function(p) { return (p.delayed > 0 && (p.cached.captain.type == "DEX" || p.cached.captain.type == "PSY")) ? 1.75 : 1; },
        type: "condition",
        staticMult: function(p) { return p.cached.captain.class.has("Powerhouse") ? 40 : 0; }
    },
    1840: {
        atk: function(p) { return (p.delayed > 0 && (p.cached.captain.type == "DEX" || p.cached.captain.type == "PSY")) ? 1.75 : 1; },
        type: "condition",
        staticMult: function(p) { return p.cached.captain.class.has("Powerhouse") ? 40 : 0; }
    },
    1841: {
        atk: function(p) { return p.unit.class.has("Driven") ? 1.5 : 1; },
        type: "class"
    },
    1842: {
        atk: function(p) { return p.unit.class.has("Driven") ? 1.5 : 1; },
        type: "class"
    },
    1845: {
        def: function(p) { return 0; }
    },
    1846: {
        def: function(p) { return 0; }
    },
    1847: {
        atk: function(p) { return [1.5, 2][CrunchUtils.llimitUnlock(p, "specials")]; },
        type: "type",
        orb: function(p) { return p.unit.cost <= 30 ? [1, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
    },
    1850: {
        chainAddition: function(p) { return 0.5; }
    },
    1851: {
        chainAddition: function(p) { return 0.5; }
    },
    1852: {
        atk: function(p) { return p.slot == p.sourceSlot && p.cached.enemyEffects.barrier ? 2.25 : 1; },
        type: "type",
        orb: function(p) { return p.cached.enemyImmunities.delay ? 2 : 1; }
    },
    1853: {
        atk: function(p) { return p.cached.enemyEffects.barrier ? [p.slot == p.sourceSlot ? 2.25 : 1, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "type",
        orb: function(p) { return p.cached.enemyImmunities.delay ? 2 : 1; },
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? [1, 1.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; }
    },
    1854: {
        atk: function(p) { return p.unit.class.has("Free Spirit") ? 1.5 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Free Spirit") ? 1.5 : 1; }
    },
    1855: {
        atk: function(p) { return p.unit.class.has("Free Spirit") ? 1.5 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Free Spirit") ? 1.5 : 1; }
    },
    1856: {
        affinity: function(p) { return p.unit.class.has("Powerhouse") ? 1.25 : 1; }
    },
    1857: {
        affinity: function(p) { return p.unit.class.has("Powerhouse") ? 1.25 : 1; }
    },
    1858: {
        staticMult: function(p) { return 65; }
    },
    1859: {
        staticMult: function(p) { return 65; }
    },
    1860: {
        atk: function(p) { return (p.delayed > 0 && (p.cached.captain.class.has("Shooter"))) ? 1.75 : 1; },
        type: "condition",
    },
    1861: {
        atk: function(p) { return (p.delayed > 0 && (p.cached.captain.class.has("Shooter"))) ? 1.75 : 1; },
        type: "condition",
    },
    1864: {
        atk: function(p) { return p.unit.class.has("Striker") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier === 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x ATK multiplier. To switch to the ' + [1.75, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1865: {
        atk: function(p) { return p.unit.class.has("Striker") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier === 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x ATK multiplier. To switch to the ' + [1.75, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1868: {
        delay: function(p) { return 1; },
    },
    1869: {
        delay: function(p) { return 1; },
    },
    1872: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.75 : 1; },
        type: "class"
    },
    1873: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.75 : 1; },
        type: "class"
    },
    1874: {
        chainAddition: function(p) { return 0.5; }
    },
    1875: {
        chainAddition: function(p) { return 0.5; }
    },
    1878: {
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[1878].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Only affects damage if Bartolomeo is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[1878].turnedOn[p.slot] = false;
        }
    },
    1879: {
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[1879].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Only affects damage if Bartolomeo is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[1879].turnedOn[p.slot] = false;
        }
    },
    1880: {
        affinity: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Powerhouse") ? [1, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        onActivation: function(p) {
            var levels = [1.75, 2, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: '' + levels[n] + 'x boost. To use the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1881: {
        atk: function(p) { return p.unit.class.has("Slasher") ? [1, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
        onActivation: function(p) {
            var levels = [2, 2.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: '' + levels[n] + 'x boost. To use the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1882: {
        orb: function(p) { return 1.75; },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    1883: {
        orb: function(p) { return 1.75; },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    1884: {
        delay: function(p) { return 1; },
    },
    1885: {
        delay: function(p) { return 1; },
    },
    1886: {
        atk: function(p) { return p.delayed > 0 ? 1.5 : 1; },
        type: "condition",
    },
    1887: {
        atk: function(p) { return p.delayed > 0 ? 1.5 : 1; },
        type: "condition",
    },
    1888: {
        atk: function(p) { return p.unit.class.has("Driven") ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Driven") ? 1.75 : 1; }
    },
    1889: {
        def: function(p) { return [1, 0][CrunchUtils.llimitUnlock(p, "specials")]; },
        atk: function(p) { return p.unit.class.has("Driven") ? [1.75, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Driven") ? [1.75, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; }
    },
    1890: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1890].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1890].turnedOn = false;
        },
    },
    1891: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1891].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1891].turnedOn = false;
        },
    },
    1892: {
        atk: function(p) { return (p.delayed > 0) ? p.cached.multiplier : 1; },
        type: "condition",
        delay: function(p) { return 1; },
        onActivation: function(p) {
            p.cached.multiplier = false;
            if (p.captain) if (p.captain.type == "PSY") p.cached.multiplier = 1.5;
            else p.cached.multiplier = 1;
        },
    },
    1893: {
        atk: function(p) { return (p.delayed > 0) ? p.cached.multiplier : 1; },
        type: "condition",
        delay: function(p) { return 1; },
        onActivation: function(p) {
            p.cached.multiplier = false;
            if (p.captain) if (p.captain.type == "PSY") p.cached.multiplier = 1.5;
            else p.cached.multiplier = 1;
        },
    },
    1894: {
        atk: function(p) { return p.unit.class.has("Fighter") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.percHP <= 50 ? 2 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + n + 'x ATK boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1895: {
        atk: function(p) { return p.unit.class.has("Fighter") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.percHP <= 50 ? 2 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + n + 'x ATK boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1896: {
        chainAddition: function(p) { return p.cached.captain.class.has("Driven") ? p.cached.multiplier : 0; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == .3 ? 1 : 0);
            p.cached.multiplier = [.3, .7][n];
            p.scope.notify({
                text: 'Using the ' + [.3, .7][n] + 'x chain boost multiplier. To switch to the ' + [.7, .3][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1897: {
        chainAddition: function(p) { return p.cached.captain.class.has("Driven") ? p.cached.multiplier : 0; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == .3 ? 1 : 0);
            p.cached.multiplier = [.3, .7][n];
            p.scope.notify({
                text: 'Using the ' + [.3, .7][n] + 'x chain boost multiplier. To switch to the ' + [.7, .3][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1900: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.5 : 1; },
        type: "type"
    },
    1905: {
        orb: function(p) { return (p.unit.class.has("Driven")) ? 1.75 : 1; }
    },
    1906: {
        orb: function(p) { return (p.unit.class.has("Driven")) ? 1.75 : 1; }
    },
    1907: {
        atk: function(p) { return p.classCount.Driven == 6 ? p.unit.class.has("Driven") ? 2 : 1 : 1; },
        type: "class",
    },
    1908: {
        atk: function(p) { return p.classCount.Driven == 6 ? p.unit.class.has("Driven") ? 2 : 1 : 1; },
        type: "class",
    },
    1913: {
        orb: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral")) ? 1.75 : 1; }
    },
    1914: {
        orb: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral")) ? 1.75 : 1; }
    },
    1915: {
        affinity: function(p) { return 1.75; }
    },
    1916: {
        affinity: function(p) { return [1.75, 2.25][CrunchUtils.llimitUnlock(p, "specials")]; }
    },
    1917: {
        atk: function(p) { return p.unit.type == "STR" ? 1.75 : 1; },
        type: "type"
    },
    1918: {
        atk: function(p) { return p.unit.type == "STR" ? 1.75 : 1; },
        type: "type"
    },
    1921: {
        atk: function(p) { return p.unit.class.has('Slasher') ? p.cached.multiplier2 : 1; },
        type: "class",
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1];
            if (p.cached.multiplier > 1) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = [p.slot > 1 ? 2.5 : 1, 3.25][CrunchUtils.llimitUnlock(p, "specials")];
            p.cached.multiplier2 = [p.slot > 1 ? 2 : 1.75, 2.25][CrunchUtils.llimitUnlock(p, "specials")];
        },
    },
    1922: {
        orb: function(p) { return p.unit.class.has("Cerebral") ? [2.25, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        atkbase: function(p) { return p.unit.class.has("Cerebral") ? [0, 500][CrunchUtils.llimitUnlock(p, "specials")] : 1; }
    },
    1923: {
        atk: function(p) { return 1.75; },
        type: "class"
    },
    1924: {
        atk: function(p) { return 1.75; },
        type: "class"
    },
    1925: {
        atk: function(p) { return p.unit.class.has("Driven") ? 1.75 : 1; },
        type: "class",
    },
    1926: {
        atk: function(p) { return p.unit.class.has("Driven") ? 1.75 : 1; },
        type: "class",
    },
    1927: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 2 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Cerebral") ? [1, 2][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        chain: function(p) { return p.cached.multiplier[0]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1];
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier[1] : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = (CrunchUtils.llimitUnlock(p, "specials") > 0 && p.percHP <= 50) ? [2.5, 25] : [1, Infinity];
        },
    },
    1928: {
        atk: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Driven")) ? [[1.5, 2][CrunchUtils.llimitUnlock(p, "specials")], 1, [1.5, 2][CrunchUtils.llimitUnlock(p, "specials")]][p.cached.multiplier] : 1; },
        type: "class",
        orb: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Driven")) ? [[1.5, 2][CrunchUtils.llimitUnlock(p, "specials")], 1, [1.5, 2][CrunchUtils.llimitUnlock(p, "specials")]][p.cached.multiplier] : 1; },
        affinity: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Driven")) ? [1, [1, 2][CrunchUtils.llimitUnlock(p, "specials")], [1, 2][CrunchUtils.llimitUnlock(p, "specials")]][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if(CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: 'Using the ' + ["ATK & Orb Boost", "Affinity Boost", "All Boosts"][levels[n]] + '. To switch to ' + ["ATK & Orb Boost", "Affinity Boost", "All Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1929: {
        atk: function(p) { return p.unit.type == "DEX" ? 2 : 1; },
        type: "type"
    },
    1930: {
        atk: function(p) { return p.unit.type == "DEX" ? 2 : 1; },
        type: "type"
    },
    1931: {
        chainAddition: function(p) { return 0.25; },
        atk: function(p) { return !p.unit.class.has('Fighter') ? 1 : p.cached.multiplier; },
        type: "class",
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1931].turnedOn = true;
            var n = (window.specials[1933].turnedOn ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x ATK multiplier. To switch to the ' + [1.75, 1.5][n] + 'x multiplier, Switch the order of the specials needed.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[1931].turnedOn = false;
        },
    },
    1932: {
        orb: function(p) { return (p.unit.class.has("Fighter")) ? 1.25 : 1; },
        atk: function(p) { return !p.unit.class.has('Fighter') ? 1 : p.cached.multiplier; },
        type: "class",
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1932].turnedOn = true;
            var n = (window.specials[1931].turnedOn ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x ATK multiplier. To switch to the ' + [1.75, 1.5][n] + 'x multiplier, Switch the order of the specials needed.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[1932].turnedOn = false;
        },
    },
    1933: {
        atk: function(p) { return !p.unit.class.has('Fighter') ? 1 : p.cached.multiplier; },
        type: "class",
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1933].turnedOn = true;
            var n = (window.specials[1932].turnedOn ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x ATK multiplier. To switch to the ' + [1.75, 1.5][n] + 'x multiplier, Switch the order of the specials needed.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[1933].turnedOn = false;
        },
    },
    1934: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Slasher") || p.unit.class.has("Fighter") ? 2 : 1},
        type: "class"
    },
    1935: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Slasher") || p.unit.class.has("Fighter") ? 2 : 1},
        type: "class"
    },
    1936: {
        staticMult: function(p) { return 15; }
    },
    1937: {
        staticMult: function(p) { return 15; }
    },
    1938: {
        orb: function(p) { return 1.75; },
        onActivation: function(p) {
            p.scope.notify({
                text: 'Assuming there are more than 4 enemies on the stage',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1939: {
        orb: function(p) { return 1.75; },
        onActivation: function(p) {
            p.scope.notify({
                text: 'Assuming there are more than 4 enemies on the stage',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1940: {
        turnedOn: false,
        onActivation: function(p) {
            if(p.captain.class.has("Free Spirit")) {
                window.specials[1940].turnedOn = true;
            }
        },
        onDeactivation: function(p) {
            window.specials[1940].turnedOn = false;
        },
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "PSY" ? 1.75 : 1; },
        type: "type"
    },
    1941: {
        turnedOn: false,
        onActivation: function(p) {
            if(p.captain.class.has("Free Spirit")) {
                window.specials[1941].turnedOn = true;
            }
        },
        onDeactivation: function(p) {
            window.specials[1941].turnedOn = false;
        },
        burn: function(p) { return [0,60][CrunchUtils.llimitUnlock(p, "specials")]; },
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "PSY" ? [1.75, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "type"
    },
    1942: {
        atk: function(p) { return (p.delayed > 0) && p.cached.captain.class.has("Free Spirit") ? 1.75 : 1; },
        type: "condition",
    },
    1943: {
        atk: function(p) { return (p.delayed > 0) && p.cached.captain.class.has("Free Spirit") ? 1.75 : 1; },
        type: "condition",
    },
    1944: {
        affinity: function(p) { return p.unit.class.has("Cerebral") ? 1.75 : 1; }
    },
    1945: {
        affinity: function(p) { return p.unit.class.has("Cerebral") ? 1.75 : 1; }
    },
    1946: {
        orb: function(p) { return 1.5; },
    },
    1947: {
        orb: function(p) { return 1.5; },
    },
    1951: {
        orb: function(p) { return p.unit.class.has("Cerebral") ? [1, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; }
    },
    1952: {
        chainAddition: function(p) { return p.cached.captain.class.has("Cerebral") ? .7 : 0; }
    },
    1953: {
        chainAddition: function(p) { return p.cached.captain.class.has("Cerebral") ? .7 : 0; }
    },
    1954: {
        atk: function(p) { return !p.unit.class.has('Cerebral') ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2.25][n] + 'x ATK multiplier. To switch to the ' + [2.25, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1955: {
        atk: function(p) { return !p.unit.class.has('Cerebral') ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2.25][n] + 'x ATK multiplier. To switch to the ' + [2.25, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1956: {
        chain: function(p) { return 2.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.75 : 1;
        }
    },
    1957: {
        chain: function(p) { return 2.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.75 : 1;
        }
    },
    1960: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1960].turnedOn = true;
            p.scope.notify({
                text: 'Captain Ability boost effect only works if Sweet Heart Memory Pudding is the captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[1960].turnedOn[p.slot] = false;
        },
        delay: function(p) { return 1; }
    },
    1961: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1961].turnedOn = true;
            p.scope.notify({
                text: 'Captain Ability boost effect only works if Sweet Heart Memory Pudding is the captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[1961].turnedOn[p.slot] = false;
        },
        delay: function(p) { return 1; }
    },
    1962: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1962].turnedOn = true;
            p.scope.notify({
                text: 'Captain Ability boost effect only works if Sweet Heart Memory Sanji is the Captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[1962].turnedOn[p.slot] = false;
        },
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    1963: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1963].turnedOn = true;
            p.scope.notify({
                text: 'Captain Ability boost effect only works if Sweet Heart Memory Sanji is the Captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[1963].turnedOn[p.slot] = false;
        },
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    1964: {
        delay: function(p) { return 1; },
    },
    1965: {
        delay: function(p) { return 1; },
    },
    1966: {
        atk: function(p) { return p.delayed > 0 ? 1.5 : 1; },
        type: "condition",
    },
    1967:{
        orb: function(p) { return (p.unit.class.has("Shooter") || p.unit.class.has("Cerebral")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x Orb boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1968:{
        orb: function(p) { return (p.unit.class.has("Shooter") || p.unit.class.has("Cerebral")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x Orb boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1971: {
        atk: function(p) { return (p.cached.captain.class.has("Cerebral") && p.defenseDown) ? 1.75 : 1; },
        type: "condition",
        def: function(p) { return p.cached.captain.class.has("Cerebral") ? .2 : 1; },
    },
    1972: {
        atk: function(p) { return (p.cached.captain.class.has("Cerebral") && p.defenseDown) ? [1.75, 2][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "condition",
        def: function(p) { return p.cached.captain.class.has("Cerebral") ? .2 : 1; },
    },
    1977: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1977].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1977].turnedOn = false;
        }
    },
    1978: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[1978].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[1978].turnedOn = false;
        }
    },
    1983: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 1.5 : 1; },
        type: "type"
    },
    1984: {
        orb: function(p) { return 2; },
    },
    1985: {
        orb: function(p) { return 2; },
    },
    1986: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == .5 ? 1 : 0);
            if (p.colorCount.STR >= 3) {
                p.cached.multiplier = [.5, .75][n];
            }
            else {
                p.cached.multiplier = 0;
            }
            p.scope.notify({
                text: 'Using the ' + [.5, .75][n] + 'x chain boost multiplier. To switch to the ' + [.75, .5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1987: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == .5 ? 1 : 0);
            if (p.colorCount.STR >= 3) {
                p.cached.multiplier = [.5, .75][n];
            }
            else {
                p.cached.multiplier = 0;
            }
            p.scope.notify({
                text: 'Using the ' + [.5, .75][n] + 'x chain boost multiplier. To switch to the ' + [.75, .5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    1988: {
        atk: function(p) { return (p.delayed > 0 && p.cached.captain.class.has("Slasher")) ? 1.75 : 1; },
        type: "condition",
    },
    1989: {
        atk: function(p) { return (p.delayed > 0 && p.cached.captain.class.has("Slasher")) ? 1.75 : 1; },
        type: "condition",
    },
    1990: {
        delay: function(p) { return 1; },
        staticMult: function(p) { return p.cached.captain.type == "STR" || p.cached.captain.type == "QCK" ? 55 : 0; },
    },
    1991: {
        delay: function(p) { return 1; },
        staticMult: function(p) { return p.cached.captain.type == "STR" || p.cached.captain.type == "QCK" ? 55 : 0; },
    },
    1992: {
        atk: function(p) { return p.unit.class.has('Free Spirit') ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            if (p.colorCount.QCK >= 3) {
                p.cached.multiplier = [1.75, 2][n];
            }
            else{
                p.cached.multiplier = 1;
            }
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1993: {
        atk: function(p) { return p.unit.class.has('Free Spirit') ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            if (p.colorCount.QCK >= 3) {
                p.cached.multiplier = [1.75, 2][n];
            }
            else{
                p.cached.multiplier = 1;
            }
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    1996: {
        delay: function(p) { return 1; },
    },
    1997: {
        delay: function(p) { return 1; },
    },
    2000: {
        orb: function(p) { return p.unit.type == "DEX" || p.unit.type == "PSY" ? 2.25 : 1; }
    },
    2001: {
        increaseDamageTaken: function(p) { return [1, 1.5][CrunchUtils.llimitUnlock(p, "specials")]; }
    },
    2003: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type"
    },
    2004: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type"
    },
    2006: {
        atk: function(p) { return p.unit.type == p.cached.multiplier ? 2.25 : 1; },
        type: "type",
        chainAddition: function(p) { return .9; },
        onActivation: function(p) {
            p.cached.multiplier = p.colorCount.STR>=4 ? "STR" : p.colorCount.DEX>=4 ? "DEX" : p.colorCount.QCK>=4 ? "QCK" : p.colorCount.PSY>=4 ? "PSY" : p.colorCount.INT>=4 ? "INT" : "NaT";
        }
    },
    2007: {
        atk: function(p) { return p.unit.type == p.cached.multiplier ? 2.25 : 1; },
        type: "type",
        chainAddition: function(p) { return .9; },
        onActivation: function(p) {
            p.cached.multiplier = p.colorCount.STR>=4 ? "STR" : p.colorCount.DEX>=4 ? "DEX" : p.colorCount.QCK>=4 ? "QCK" : p.colorCount.PSY>=4 ? "PSY" : p.colorCount.INT>=4 ? "INT" : "NaT";
        }
    },
    2008: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : p.cached.multiplier == 1.75 ? 2 : 0);
            p.cached.multiplier = [1.5, 1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75, 2][n] + 'x affinity boost. To switch to the ' + [1.75, 2, 1.5][n] + 'x affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2009: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : p.cached.multiplier == 1.75 ? 2 : 0);
            p.cached.multiplier = [1.5, 1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75, 2][n] + 'x affinity boost. To switch to the ' + [1.75, 2, 1.5][n] + 'x affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2014: {
        delay: function(p) { return 1; },
        atk: function(p) { return p.delayed > 0 ? 1.75 : 1; },
        type: "condition",
    },
    2015: {
        delay: function(p) { return 1; },
        atk: function(p) { return p.delayed > 0 ? 1.75 : 1; },
        type: "condition",
    },
    2016: {
        atk: function(p) { return p.unit.class.has("Driven") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP >= 50 ? 2 : 1.5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 50%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2017: {
        atk: function(p) { return p.unit.class.has("Driven") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP >= 50 ? 2 : 1.5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 50%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2020: {
        orb: function(p) { return 1.5; },
    },
    2021: {
        orb: function(p) { return 1.5; },
    },
    2022: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "INT") ? 2.25 : 1; },
    },
    2023: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "INT") ? 2.25 : 1; },
    },
    2024: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "QCK" ? 2.25 : 1; },
        type: "type",
    },
    2025: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "QCK" ? 2.25 : 1; },
        type: "type",
    },
    2026: {
        delay: function(p) { return 1; },
        affinity: function(p) { return (p.unit.type == "QCK" || p.unit.type == "PSY") && (p.cached.captain.type == "QCK" || p.cached.captain.type == "PSY") ? 2 : 1; },
    },
    2027: {
        delay: function(p) { return 1; },
        affinity: function(p) { return (p.unit.type == "QCK" || p.unit.type == "PSY") && (p.cached.captain.type == "QCK" || p.cached.captain.type == "PSY") ? 2 : 1; },
    },
    2028: {
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.colorCount.QCK + p.colorCount.PSY >= 4) {
                p.cached.multiplier = 2;
            }
        }
    },
    2029: {
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.colorCount.QCK + p.colorCount.PSY >= 4) {
                p.cached.multiplier = 2;
            }
        }
    },
    2032: {
        atk: function(p) { return 1.5; },
        type: "type",
        orb: function(p) { return p.cached.captain.type == "PSY" ? 1.5 : 1; },
        chainAddition: function(p) { return p.cached.captain.type == "PSY" ? .3 : 0; },
        staticMult: function(p) { return p.cached.captain.type == "PSY" ? 20 : 0; },
    },
    2033: {
        atk: function(p) { return 1.5; },
        type: "type",
        orb: function(p) { return p.cached.captain.type == "PSY" ? 1.5 : 1; },
        chainAddition: function(p) { return p.cached.captain.type == "PSY" ? .3 : 0; },
        staticMult: function(p) { return p.cached.captain.type == "PSY" ? 20 : 0; },
    },
    2034: {
        atk: function(p) { return [1, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")]; },
        type: "type",
        affinity: function(p) { return [1, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")]; },
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[2034].turnedOn[p.slot] = true;
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: '' + levels[n] + 'x boost. To use the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
            p.scope.notify({
                text: 'Also affects damage if Kizaru is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2034].turnedOn[p.slot] = false;
        }
    },
    2035: {
        status: function(p) { return p.defenseDown ? [1, 1.75][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        atk: function(p) { return p.unit.cost <= 40 ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class"
    },
    2036: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class",
    },
    2037: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class",
    },
    2040: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2.25 : 1; },
        type: "type"
    },
    2041: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2.25 : 1; },
        type: "type"
    },
    2044: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 1.5 : 1; },
        type: "class",
    },
    2046: {
        orb: function(p) { return p.unit.type == window.specials[2046].multiType ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            if (p.colorCount.STR >= 4 || p.colorCount.DEX >= 4 || p.colorCount.QCK >= 4 || p.colorCount.PSY >= 4 || p.colorCount.INT >= 4) {
                p.cached.multiplier = 1.75;
                if (p.colorCount.STR >= 4) {
                    window.specials[2046].multiType = "STR";
                }
                if (p.colorCount.QCK >= 4) {
                    window.specials[2046].multiType = "QCK";
                }
                if (p.colorCount.DEX >= 4) {
                    window.specials[2046].multiType = "DEX";
                }
                if (p.colorCount.PSY >= 4) {
                    window.specials[2046].multiType = "PSY";
                }
                if (p.colorCount.INT >= 4) {
                    window.specials[2046].multiType = "INT";
                }
            }
            else{
                p.cached.multiplier = 1;
                window.specials[2046].multiType = "null";
            }
        }
    },
    2047: {
        orb: function(p) { return p.cached.enemyImmunities.delay && p.unit.class.has("Fighter") ? 2 : 1; },
    },
    2048: {
        orb: function(p) { return p.cached.enemyImmunities.delay && p.unit.class.has("Fighter") ? 2 : 1; },
    },
    2049: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    2050: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    2051: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class",
    },
    2052: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class",
    },
    2057: {
        atk: function(p) { return p.unit.cost <= 15 ? 1.75 : 1; },
        type: "class"
    },
    2058: {
        orb: function(p) { return p.unit.cost <= 15 ? 1.75 : 1; },
    },
    2059: {
        orb: function(p) { return 1.5; },
        chain: function(p) { return p.cached.multiplier != Infinity ? p.cached.multiplier : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == Infinity ? 1 : p.cached.multiplier == 2.5 ? 2 : p.cached.multiplier == 2.75 ? 3 : 0);
            p.cached.multiplier = [Infinity, 2.5, 2.75, 3][n];
            p.scope.notify({
                text: 'Using the ' + ['Regular ', 2.5, 2.75, 3][n] + 'x chain lock. To switch to the ' + [2.5, 2.75, 3, 'Regular '][n] + 'x chain lock, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2060: {
        orb: function(p) { return 1.5; },
        chain: function(p) { return p.cached.multiplier != Infinity ? p.cached.multiplier : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == Infinity ? 1 : p.cached.multiplier == 2.5 ? 2 : p.cached.multiplier == 2.75 ? 3 : 0);
            p.cached.multiplier = [Infinity, 2.5, 2.75, 3][n];
            p.scope.notify({
                text: 'Using the ' + ['Regular', '2.5x', '2.75x', '3x'][n] + ' chain lock. To switch to the ' + ['2.5x', '2.75x', '3x', 'Regular'][n] + ' chain lock, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2063: {
        atk: function(p) { return p.unit.type == p.cached.captain.type ? 1.75 : 1; },
        type: "type",
    },
    2064: {
        def: function(p) { return [1, 0][CrunchUtils.llimitUnlock(p, "specials")]; },
        atk: function(p) { return p.unit.type == p.cached.captain.type ? [1.75, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "type",
    },
    2066: {
        affinity: function(p) { return (p.unit.class.has("Fighter")) ? [1, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain.class.has("Fighter") ? 2 : 1;
        },
    },
    2067: {
        chain: function(p) { return 2.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.75 : 1;
        }
    },
    2068: {
        chain: function(p) { return 2.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.75 : 1;
        }
    },
    2069: {
        delay: function(p) { return 1; },
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    2070: {
        delay: function(p) { return 1; },
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    2071: {
        def: function(p) { return 0.2; },
        chainAddition: function(p) { return 0.6; }
    },
    2072: {
        def: function(p) { return 0.2; },
        chainAddition: function(p) { return 0.6; }
    },
    2073: {
        atk: function(p) { return 2; },
        type: "class"
    },
    2074: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var levels = [[2],[2.25, 2.5]][CrunchUtils.llimitUnlock(p, "specials")];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x multiplier. To switch to ' + levels[(n + 1) % levels.length] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2075: {
        affinity: function(p) { return (p.cached.multiplier && (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven"))) ? 1.75 : 1; },
        orb: function(p) { return (p.cached.multiplier && (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven"))) ? 2 : 1; },
        onActivation: function(p) {
            if (p.captain.class.has("Free Spirit") || p.captain.class.has("Cerebral") || p.captain.class.has("Powerhouse") || p.captain.class.has("Driven")) p.cached.multiplier = true;
        },
        onDeactivation: function(p) {
            p.cached.multiplier = false;
        },
    },
    2076: {
        affinity: function(p) { return (p.cached.multiplier && (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven"))) ? 1.75 : 1; },
        orb: function(p) { return (p.cached.multiplier && (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven"))) ? 2 : 1; },
        onActivation: function(p) {
            if (p.captain) if (p.captain.class.has("Free Spirit") || p.captain.class.has("Cerebral") || p.captain.class.has("Powerhouse") || p.captain.class.has("Driven")) p.cached.multiplier = true;
        },
        onDeactivation: function(p) {
            p.cached.multiplier = false;
        },
    },
    2077: {
        delay: function(p) { return 1; },
        atk: function(p) { return p.defenseDown ? 1.75 : 1; },
        type: "condition"
    },
    2078: {
        delay: function(p) { return 1; },
        atk: function(p) { return p.defenseDown ? 1.75 : 1; },
        type: "condition"
    },
    2079: {
        affinity: function(p) { return p.cached.enemyImmunities.delay ? 1.75 : 1; },
    },
    2080: {
        affinity: function(p) { return p.cached.enemyImmunities.delay ? 1.75 : 1; },
    },
    2081: {
        atk: function(p) { return p.cached.enemyImmunities.delay ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return p.cached.enemyImmunities.delay ? 1.75 : 1; },
    },
    2082: {
        atk: function(p) { return p.cached.enemyImmunities.delay ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return p.cached.enemyImmunities.delay ? 1.75 : 1; },
    },
    2083: {
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "QCK" || p.unit.type == "PSY") ? 1.75 : 1; },
    },
    2084: {
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "QCK" || p.unit.type == "PSY") ? 1.75 : 1; },
    },
    2085: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.type == "QCK" || p.unit.type == "INT" ? 1.75 : 1; },
        type: "type"
    },
    2086: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.type == "QCK" || p.unit.type == "INT" ? 1.75 : 1; },
        type: "type"
    },
    2087: {
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[2087].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Only affects damage if Luffy is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2087].turnedOn[p.slot] = false;
        },
        chainAddition: function(p) { return 0.5; }
    },
    2088: {
        orb: function(p) { return 1.5; }
    },
    2089: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP == 100 ? 1.5 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.5 ? 'equal to' : 'below') + ' 100%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2091: {
        delay: function(p) { return 1; },
    },
    2092: {
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[2092].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Only affects damage if Zoro is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2092].turnedOn[p.slot] = false;
        },
        atk: function(p) { return p.defenseDown ? 1.5 : 1; },
        type: "condition",
        def: function(p) { return 0.5; }
    },
    2093: {
        atk: function(p) { return p.delayed > 0 ? 1.5 : 1; },
        type: "condition",
    },
    2096: {
        affinity: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Driven")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP == 100 ? 2 : 1.75);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'equal to' : 'below') + ' 100%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2097: {
        affinity: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Driven")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP == 100 ? 2 : 1.75);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'equal to' : 'below') + ' 100%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2098: {
        chain: function(p) { return 3.25; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.25 : 1;
        }
    },
    2099: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var levels = [[3.25],[3.5, 4]][CrunchUtils.llimitUnlock(p, "specials")];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x multiplier. To switch to ' + levels[(n + 1) % levels.length] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2100: {
        atk: function(p) { return (p.cached.captain.type == "STR" || p.cached.captain.type == "QCK") ? 1.75 : 1; },
        type: "class",
    },
    2101: {
        atk: function(p) { return (p.cached.captain.type == "STR" || p.cached.captain.type == "QCK") ? 1.75 : 1; },
        type: "class",
    },
    2102: {
        orb: function(p) { return (p.cached.captain.type == "INT" || p.cached.captain.type == "QCK") ? 1.75 : 1; },
    },
    2103: {
        orb: function(p) { return (p.cached.captain.type == "INT" || p.cached.captain.type == "QCK") ? 1.75 : 1; },
    },
    2104: {
        staticMult: function(p) { return (p.cached.captain.type == "DEX" || p.cached.captain.type == "QCK") ? 40 : 0; },
    },
    2105: {
        staticMult: function(p) { return (p.cached.captain.type == "DEX" || p.cached.captain.type == "QCK") ? 40 : 0; },
    },
    2108: {
        orb: function(p) { return 3; },
        affinity: function(p) { return 1.25; },
        atk: function(p) { return 1.25; },
        type: "type",
    },
    2109: {
        orb: function(p) { return [3, 3.25][CrunchUtils.llimitUnlock(p, "specials")]; },
        affinity: function(p) { return 1.25; },
        atk: function(p) { return 1.25; },
        type: "type",
    },
    2112: {
        status: function(p) { return (p.delayed > 0) ? 1.75 : 1; },
    },
    2113: {
        status: function(p) { return (p.delayed > 0) ? [1.75, 2][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        orb: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) ? [1, 2.25] : 1; },
        delay: function(p) { return [0, 1][CrunchUtils.llimitUnlock(p, "specials")]; },
        ignoresImmunities: function(p) { return [[], [[],['delay']][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: 'Using the ' + ["Delay", "Immunity Ignore Delay"][levels[n]] + '. To switch to the ' + ["Delay", "Immunity Ignore Delay"][levels[(n + 1) % levels.length]] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2114: {
        staticMult: function(p) { return 30; }
    },
    2115: {
        staticMult: function(p) { return 30; }
    },
    2116: {
        def: function(p) { return 0; }
    },
    2117: {
        def: function(p) { return 0; }
    },
    2120: {
        atk: function(p) { return p.cached.multiplier == 2 ? ((p.unit.class.has("Fighter") || p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) && (p.delayed > 0)) ? p.cached.multiplier : 1 : (p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse")) ? p.cached.multiplier : 1; },
        type: "class",
        warning: "For the 2x boost special (%name%) assumes that the enemy is Delayed.",
        onActivation: function(p) {
            var n = p.cached.multiplier == 1.75 ? 1 : 0;
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using ' + [1.75, 2][n] + 'x ATK boost. To switch to the ' + [2, 1.75][n] + 'x ATK boost, disable and re-enable this special.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2121: {
        atk: function(p) { return p.cached.multiplier == 2 ? ((p.unit.class.has("Fighter") || p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) && (p.delayed > 0)) ? p.cached.multiplier : 1 : (p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse")) ? p.cached.multiplier : 1; },
        type: "class",
        warning: "For the 2x boost special (%name%) assumes that the enemy is Delayed.",
        onActivation: function(p) {
            var n = p.cached.multiplier == 1.75 ? 1 : 0;
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using ' + [1.75, 2][n] + 'x ATK boost. To switch to the ' + [2, 1.75][n] + 'x ATK boost, disable and re-enable this special.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2122: {
        def: function(p) { return 0.2; },
        orb: function(p) { return (p.unit.class.has("Powerhouse") || p.unit.class.has("Cerebral")) ? 1.75 : 1; }
    },
    2123: {
        def: function(p) { return 0.2; },
        orb: function(p) { return (p.unit.class.has("Powerhouse") || p.unit.class.has("Cerebral")) ? 1.75 : 1; }
    },
    2124: {
        orb: function(p) { return (p.unit.class.has("Striker")) ? 1.5 : 1; }
    },
    2126: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP <= 50 ? 1.75 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.75 ? 'below' : 'above') + ' 50%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2127: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 1.5 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Cerebral") ? 1.5 : 1; }
    },
    2128: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2128].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2128].turnedOn = false;
        }
    },
    2129: {
        atk: function(p) { return 1.2; },
        type: "class"
    },
    2131:{
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Shooter") || p.unit.class.has("Cerebral")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x ATK boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2132:{
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Shooter") || p.unit.class.has("Cerebral")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x ATK boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2135: {
        orb: function(p) { return p.unit.type == "QCK" ? 1.75 : 1; },
    },
    2136: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type",
    },
    2137: {
        atk: function(p) { return [p.slot == p.sourceSlot ? 2 : 1, 2.25][CrunchUtils.llimitUnlock(p, "specials")]; },
        type: "type",
    },
    2138: {
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse")) ? [2, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
        atkPlus: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = (p.colorCount.STR > 1 && p.colorCount.DEX > 1 && p.colorCount.QCK > 1 && p.colorCount.PSY > 1 && p.colorCount.INT > 1) ? 0.25 : 0;
        },
    },
    2139: {
        atk: function(p) { return p.poisoned && p.cached.captain.class.has("Powerhouse") ? 1.75 : 1; },
        poison: function(p) { return (p.cached.captain.type == "PSY" || p.cached.captain.type == "INT") ? 99 : 0; },
        type: "condition",
    },
    2140: {
        orb: function(p) { return (p.cached.captain.type == "INT" || p.cached.captain.type == "QCK") ? 2 : 1; },
    },
    2141: {
        chain: function(p) { return (p.cached.captain.type == "INT" || p.cached.captain.type == "DEX") ? 2.75 : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? (p.cached.captain.type == "INT" || p.cached.captain.type == "DEX" ? 2.75 : Infinity) : 1;
        },
    },
    2142: {
        staticMult: function(p) { return (p.cached.captain.type == "INT" || p.cached.captain.type == "STR") ? 55 : 1; },
    },
    2143: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.5 : 1; },
        type: "class",
    },
    2144: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.5 : 1; },
        type: "class",
    },
    2147: {
        atk: function(p) { return p.unit.class.has("Fighter") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP >= 50 ? 2.25 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.25 ? 'above' : 'below') + ' 50%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2148: {
        atk: function(p) { return p.unit.class.has("Fighter") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP >= 50 ? 2.25 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.25 ? 'above' : 'below') + ' 50%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2149: {
        affinity: function(p) { return (p.unit.class.has("Fighter") && p.cached.captain.class.has("Fighter")) ? 1.75 : 1; },
    },
    2150: {
        affinity: function(p) { return (p.unit.class.has("Fighter") && p.cached.captain.class.has("Fighter")) ? 1.75 : 1; },
    },
    2159: {
        poison: function(p) { return 99; },
        status: function(p) { return p.poisoned ? [1, 2][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        delay: function(p) { return [0, 1][p.cached.multiplier]; },
        atk: function(p) { return [1, [1, 2][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")]; },
        type: "class",
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Poison Effect", "Already Poisoned Effects"][levels[n]] + '. To switch to ' + ["Poison Effect", "Already Poisoned Effects"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2160: {
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[2160].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Only affects damage if Doflamingo is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2160].turnedOn[p.slot] = false;
        },
        orb: function(p) { return (p.unit.class.has("Shooter")) ? 2 : 1; }
    },
    2161: {
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[2161].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Only affects damage if Doflamingo is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2161].turnedOn[p.slot] = false;
        },
        orb: function(p) { return (p.unit.class.has("Shooter")) ? 2 : 1; }
    },
    2162: {
        delay: function(p) { return window.specials[2162].turnedOn ? 1 : 0; },
        onActivation: function(p) {
            window.specials[2162].turnedOn = p.classCount.Fighter >= 5 ? true : false;
        },
        onDeactivation: function(p) {
            window.specials[2162].turnedOn = false;
        },
    },
    2163: {
        delay: function(p) { return window.specials[2163].turnedOn ? 1 : 0; },
        onActivation: function(p) {
            window.specials[2163].turnedOn = p.classCount.Fighter >= 5 ? true : false;
        },
        onDeactivation: function(p) {
            window.specials[2163].turnedOn = false;
        },
    },
    2164: {
        orb: function(p) { return (p.unit.class.has("Fighter")) ? 1.75 : 1; }
    },
    2165: {
        orb: function(p) { return (p.unit.class.has("Fighter")) ? 1.75 : 1; }
    },
    2168: {
        orb: function(p) { return p.cached.multiplier; },
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[2168].turnedOn[p.slot] = true;
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x Orb boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2168].turnedOn[p.slot] = false;
        },
    },
    2169: {
        orb: function(p) { return p.cached.multiplier; },
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[2169].turnedOn[p.slot] = true;
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x Orb boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2169].turnedOn[p.slot] = false;
        },
    },
    2170: {
        delay: function(p) { return 1; },
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x ATK multiplier. To switch to the ' + [1.75, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2171: {
        delay: function(p) { return 1; },
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x ATK multiplier. To switch to the ' + [1.75, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2172: {
        chainAddition: function(p) { return 0.65; }
    },
    2173: {
        chainAddition: function(p) { return 0.65; }
    },
    2175: {
        atkbase: function(p) { return p.unit.class.has("Powerhouse") ? [0, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")] : 0; },
        onActivation: function(p) {
            var levels = [800, 1000, 1250];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the +' + levels[n] + ' boost. To switch to the +' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2176: {
        chainAddition: function(p) { return p.cached.captain.class.has("Striker") ? .5 : 0; },
    },
    2177: {
        chainAddition: function(p) { return p.cached.captain.class.has("Striker") ? .5 : 0; },
    },
    2178: {
        atk: function(p) { return p.unit.class.has("Striker") ? 1.5 : 1; },
        type: "class",
    },
    2179: {
        affinity: function(p) { return p.unit.type == "STR" ? 1.25 : 1; }
    },
    2182: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.colorCount.INT >= 3) {
                p.cached.multiplier = 2;
            }
        }
    },
    2183: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.colorCount.INT >= 3) {
                p.cached.multiplier = 2;
            }
        }
    },
    2184: {
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.colorCount.PSY >= 3) {
                p.cached.multiplier = 2;
            }
        }
    },
    2185: {
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.colorCount.PSY >= 3) {
                p.cached.multiplier = 2;
            }
        }
    },
    2186: {
        chain: function(p) { return (p.cached.captain.type == "PSY" || p.cached.captain.type == "INT") ? 3 : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? (p.cached.captain.type == "PSY" || p.cached.captain.type == "INT" ? 3 : Infinity) : 1;
        },
    },
    2187: {
        chain: function(p) { return (p.cached.captain.type == "PSY" || p.cached.captain.type == "INT") ? 3 : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? (p.cached.captain.type == "PSY" || p.cached.captain.type == "INT" ? 3 : Infinity) : 1;
        },
    },
    2190: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Slasher") ? 1.75 : 1; },
        type: "class",
    },
    2191: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Slasher") ? 1.75 : 1; },
        type: "class",
    },
    2196: {
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            var n = (p.percHP <= 10 ? 2 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + n + 'x ATK boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2197: {
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            var n = (p.percHP <= 10 ? 2 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + n + 'x ATK boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2198: {
        affinity: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x affinity boost. To switch to the ' + [1.75, 1.5][n] + 'x affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2199: {
        affinity: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + 'x affinity boost. To switch to the ' + [1.75, 1.5][n] + 'x affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2203: {
        affinity: function(p) { return [1, p.cached.multiplier1][CrunchUtils.llimitUnlock(p, "specials")]; },
        orbPlus: function(p) { return [0, [0, 0.25][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            p.cached.multiplier1 = p.percHP <= 10 ? 2 : 1;
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["No Orb Buff", "Orb Buff"][levels[n]] + '. To switch to ' + ["No Orb Buff", "Orb Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2204: {
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.percHP <= 10 ? 2 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + n + 'x Orb boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2205: {
        orb: function(p) { return [p.cached.multiplier1, [1, 2.25][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")]; },
        atk: function(p) { return [1, p.cached.multiplier1][CrunchUtils.llimitUnlock(p, "specials")]; },
        type: "class",
        onActivation: function(p) {
            p.cached.multiplier1 = p.percHP <= 10 ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1;
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["No Orb Boost", "Orb Boost"][levels[n]] + '. To switch to ' + ["No Orb Boost", "Orb Boost"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2206:{
        atk: function(p) { return (p.unit.type == "DEX" || p.unit.type == "QCK" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        type: "class",
        def: function(p) { return 0; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1 ? 1 : p.cached.multiplier == 1.75 ? 2 : p.cached.multiplier == 2 ? 3 : 0);
            p.cached.multiplier = [1, 1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1, 1.75, 2, 2.25][n] + 'x ATK boost. To switch to the ' + [1.75, 2, 2.25, 1][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2207:{
        atk: function(p) { return (p.unit.type == "DEX" || p.unit.type == "QCK" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        type: "class",
        def: function(p) { return 0; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1 ? 1 : p.cached.multiplier == 1.75 ? 2 : p.cached.multiplier == 2 ? 3 : 0);
            p.cached.multiplier = [1, 1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1, 1.75, 2, 2.25][n] + 'x ATK boost. To switch to the ' + [1.75, 2, 2.25, 1][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2211: {
        status: function(p) { return p.paralysis ? [1, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        paralysis: function(p) { return [0, 2][CrunchUtils.llimitUnlock(p, "specials")]; },
    },
    2214: {
        delay: function(p) { return 1; },
    },
    2215: {
        delay: function(p) { return 1; },
    },
    2216: {
        rcv: function(p) { return 1.5; },
    },
    2217: {
        rcv: function(p) { return 1.5; },
    },
    2218: {
        chain: function(p) { return p.cached.captain.class.has("Cerebral") ? 2.5 : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? (p.cached.captain.class.has("Cerebral") ? 2.5 : Infinity) : 1;
        },
    },
    2219: {
        chain: function(p) { return p.cached.captain.class.has("Cerebral") ? 2.5 : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? (p.cached.captain.class.has("Cerebral") ? 2.5 : Infinity) : 1;
        },
    },
    2222: {
        atk: function(p) { return 1.25; },
        type: "type"
    },
    2223: {
        orb: function(p) { return 1.25; }
    },
    2224: {
        chainAddition: function(p) { return 0.25; }
    },
    2225: {
        affinity: function(p) { return 1.25; }
    },
    2226: {
        staticMult: function(p) { return 2.5; }
    },
    2227: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2227].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2227].turnedOn = false;
        },
    },
    2229: {
        affinity: function(p) { return p.unit.class.has("Shooter") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP >= 50 ? 1.5 : 1);//change this
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1 ? 'below' : 'above') + ' 50%, using the ' + n + 'x multiplier.',//change this
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2230: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type",
        chainAddition: function(p) { return 0.4; }
    },
    2232: {
        orb: function(p) { return [1, [2.25, 1, 2.25][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")]; },
        orbPlus: function(p) { return [0, [0, 0.3, 0.3][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb Boost", "Orb Buff", "Orb Buff and Buff"][levels[n]] + '. To switch to ' + ["Orb Boost", "Orb Buff", "Orb Buff and Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2233: {
        atk: function(p) { return p.cached.multiplier ? p.slot < 2 ? 2 : 1 : p.slot == p.sourceSlot ? 2 : 1; },
        type: "class",
        orb: function(p) { return p.cached.multiplier ? (p.slot < 2) ? 2 : 1 : p.slot == p.sourceSlot ? 2 : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.slot < 2 ? true : false);
        }
    },
    2234: {
        atk: function(p) { return p.cached.multiplier ? p.slot < 2 ? 2 : 1 : p.slot == p.sourceSlot ? 2 : 1; },
        type: "class",
        orb: function(p) { return p.cached.multiplier ? (p.slot < 2) ? 2 : 1 : p.slot == p.sourceSlot ? 2 : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.slot < 2 ? true : false);
        }
    },
    2235: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2235].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2235].turnedOn = false;
        }
    },
    2236: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2236].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2236].turnedOn = false;
        }
    },
    2239: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.75 : 1; }
    },
    2240: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.75 : 1; }
    },
    2241: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.75 : 1; },
    },
    2242: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.75 : 1; },
    },
    2245: {
        chainAddition: function(p) { return [0.8, 1.4][CrunchUtils.llimitUnlock(p, "specials")]; },
        atkbase: function(p) { return p.slot == p.sourceSlot ? [0, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")] : 0; },
        onActivation: function(p) {
            p.cached.multiplier = p.sourceSlot <= 1 ? 1200 : 0;
        },
    },
    2246: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    2247: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    2248: {
        turnedOn: false,
        affinity: function(p) { return p.cached.multiplier == 2 ? 1.5 : p.cached.multiplier == 3 ? 1.75 : 1; },
        chainAddition: function(p) { return p.cached.multiplier == 0 ? .5 : p.cached.multiplier == 1 ? .8 : 0; },
        delay: function(p) { return p.cached.multiplier == 0 ? 1 : p.cached.multiplier == 1 ? 2 : 0; },
        onActivation: function(p) {
            var n = p.cached.multiplier != null ? (p.cached.multiplier + 1) % 4 : 0;
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['4 STR and DEX orbs Stage 1', '4 STR and DEX orbs Stage 2', '4 PSY and INT orbs Stage 1', '4 PSY and INT orbs Stage 2'][n] + ' special. To switch to the ' + ['4 STR and DEX orbs Stage 2', '4 PSY and INT orbs Stage 1', '4 PSY and INT orbs Stage 2', '4 STR and DEX orbs Stage 1'][n] + ' special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
            window.specials[2248].turnedOn = n > 1 ? true : false;
        },
        onDeactivation: function(p) {
            window.specials[2248].turnedOn = false;
        }
    },
    2249: {
        turnedOn: false,
        affinity: function(p) { return p.cached.multiplier == 2 ? 1.5 : p.cached.multiplier == 3 ? 1.75 : 1; },
        chainAddition: function(p) { return p.cached.multiplier == 0 ? .5 : p.cached.multiplier == 1 ? .8 : 0; },
        delay: function(p) { return p.cached.multiplier == 0 ? 1 : p.cached.multiplier == 1 ? 2 : 0; },
        onActivation: function(p) {
            var n = p.cached.multiplier != null ? (p.cached.multiplier + 1) % 4 : 0;
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['4 STR and DEX orbs Stage 1', '4 STR and DEX orbs Stage 2', '4 PSY and INT orbs Stage 1', '4 PSY and INT orbs Stage 2'][n] + ' special. To switch to the ' + ['4 STR and DEX orbs Stage 2', '4 PSY and INT orbs Stage 1', '4 PSY and INT orbs Stage 2', '4 STR and DEX orbs Stage 1'][n] + ' special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
            window.specials[2249].turnedOn = n > 1 ? true : false;
        },
        onDeactivation: function(p) {
            window.specials[2249].turnedOn = false;
        }
    },
    2250: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    2251: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    2252: {
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[2252].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Only affects damage if Pound is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2252].turnedOn[p.slot] = false;
        },
        orb: function(p) { return (p.slot >= 2) ? 1.5 : 1; },
    },
    2253: {
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[2253].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Only affects damage if Pound is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2253].turnedOn[p.slot] = false;
        },
        orb: function(p) { return (p.slot >= 2) ? 1.5 : 1; },
    },
    2256:{
        atk: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x ATK boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2260: {
        staticMult: function(p) { return 60; }
    },
    2261: {
        atk: function(p) { return [1, 1.75][CrunchUtils.llimitUnlock(p, "specials")]; },
        type: "class",
        staticMult: function(p) { return [60, 100][CrunchUtils.llimitUnlock(p, "specials")]; }
    },
    2264: {
        turnedOn: false,
        onActivation: function(p) {
            if(p.cached.multiplier == 2.25) {
                window.specials[2264].turnedOn = true;
            }
        },
        onDeactivation: function(p) {
            window.specials[2264].turnedOn = false;
        },
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2.25][n] + 'x ATK multiplier. To switch to the ' + [2.25, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2265: {
        turnedOn: false,
        onActivation: function(p) {
            if(p.cached.multiplier == 2.25) {
                window.specials[2265].turnedOn = true;
            }
        },
        onDeactivation: function(p) {
            window.specials[2265].turnedOn = false;
        },
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2.25][n] + 'x ATK multiplier. To switch to the ' + [2.25, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2266: {
        orb: function(p) { return 1.75; }
    },
    2267: {
        orb: function(p) { return 1.75; }
    },
    2270: {
        chainAddition: function(p) { return 0.7; }
    },
    2271: {
        chainAddition: function(p) { return 0.7; }
    },
    2272: {
        atk: function(p) { return p.defenseDown && p.cached.captain.class.has("Powerhouse") ? 1.75 : 1; },
        type: "condition",
        def: function(p) { return 0; },
    },
    2273: {
        atk: function(p) { return p.defenseDown && p.cached.captain.class.has("Powerhouse") ? 1.75 : 1; },
        type: "condition",
        def: function(p) { return 0; },
    },
    2274: {
        atk: function(p) { return (p.delayed > 0 && p.cached.multiplier != 0) ? 1.75 : 1; },
        type: "condition",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1 ? 2 : (p.cached.multiplier == 2 | p.cached.multiplier == undefined) ? 0 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['Delay', 'Conditional boost', 'Conditional boost and Delay'][n] + '. To switch to the ' + ['Conditional boost', 'Conditional boost and Delay', 'Delay'][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        delay: function(p) { return p.cached.multiplier != 1 ? 1 : 0; },
    },
    2275: {
        atk: function(p) { return (p.delayed > 0 && p.cached.multiplier != 0) ? 1.75 : 1; },
        type: "condition",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1 ? 2 : (p.cached.multiplier == 2 | p.cached.multiplier == undefined) ? 0 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['Delay', 'Conditional boost', 'Conditional boost and Delay'][n] + '. To switch to the ' + ['Conditional boost', 'Conditional boost and Delay', 'Delay'][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        delay: function(p) { return p.cached.multiplier != 1 ? 1 : 0; },
    },
    2276: {
        atk: function(p) { return p.unit.stars <= 4 ? 1.75 : 1; },
        type: "type",
        delay: function(p) { return 1; },
    },
    2277: {
        atk: function(p) { return p.unit.stars <= 4 ? 1.75 : 1; },
        type: "type",
        delay: function(p) { return 1; },
    },
    2280: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            if (p.colorCount.DEX >= 3) p.cached.multiplier = 2;
            else p.cached.multiplier = 1;
        },
    },
    2281: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            if (p.colorCount.DEX >= 3) p.cached.multiplier = 2;
            else p.cached.multiplier = 1;
        },
    },
    2282: {
        orb: function(p) { return 2; },
    },
    2283: {
        orb: function(p) { return 2; },
    },
    2284: {
        orb: function(p) { return p.unit.class.has("Powerhouse") ? 2.25 : 1; },
    },
    2285: {
        orb: function(p) { return p.unit.class.has("Powerhouse") ? 2.25 : 1; },
    },
    2286: {
        atk: function(p) { return p.unit.type == "STR" ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = (p.captain.class.has("Powerhouse") || p.captain.class.has("Striker")) ? [1.75, 2.25][n] : 1;
            p.scope.notify({
                text: 'Using the ' + [1.75, 2.25][n] + 'x ATK multiplier. To switch to the ' + [2.25, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2287: {
        atk: function(p) { return p.unit.type == "STR" ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = (p.captain.class.has("Powerhouse") || p.captain.class.has("Striker")) ? [1.75, 2.25][n] : 1;
            p.scope.notify({
                text: 'Using the ' + [1.75, 2.25][n] + 'x ATK multiplier. To switch to the ' + [2.25, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2288: {
        rcv: function(p) { return p.cached.multiplier != 0 ? 1.5 : 1; },
        staticMult: function(p) { return p.cached.multiplier != 1 ? 45 : 0; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1 ? 2 : (p.cached.multiplier == 2 | p.cached.multiplier == undefined) ? 0 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['Sabo Buff', 'RCV boost', 'RCV boost and Sabo Buff'][n] + '. To switch to the ' + ['RCV boost', 'RCV boost and Sabo Buff', 'Sabo Buff'][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2289: {
        rcv: function(p) { return p.cached.multiplier != 0 ? 1.5 : 1; },
        staticMult: function(p) { return p.cached.multiplier != 1 ? 45 : 0; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1 ? 2 : (p.cached.multiplier == 2 | p.cached.multiplier == undefined) ? 0 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['Sabo Buff', 'RCV boost', 'RCV boost and Sabo Buff'][n] + '. To switch to the ' + ['RCV boost', 'RCV boost and Sabo Buff', 'Sabo Buff'][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2290: {
        rcv: function(p) { return p.cached.multiplier != 0 ? 1.5 : 1; },
        staticMult: function(p) { return p.cached.multiplier != 1 ? 45 : 0; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1 ? 2 : (p.cached.multiplier == 2 | p.cached.multiplier == undefined) ? 0 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['Sabo Buff', 'RCV boost', 'RCV boost and Sabo Buff'][n] + '. To switch to the ' + ['RCV boost', 'RCV boost and Sabo Buff', 'Sabo Buff'][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2293: {
        atk: function(p) { return p.unit.class.has("Cerebral") && p.cached.captain.class.has("Cerebral") ? 1.5 : 1; },
        type: "class",
    },
    2294: {
        atk: function(p) { return p.unit.class.has("Cerebral") && p.cached.captain.class.has("Cerebral") ? 1.5 : 1; },
        type: "class",
    },
    2296: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        chainAddition: function(p) { return 0.5; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1 ? 1 : p.cached.multiplier == 1.75 ? 2 : p.cached.multiplier == 2 ? 3 : 0);
            p.cached.multiplier = [1, 1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1, 1.75, 2, 2.25][n] + 'x orb boost. To switch to the ' + [1.75, 2, 2.25, 1][n] + 'x orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2298: {
        def: function(p) { return 0.2 },
        atk: function(p) { return (p.defenseDown > 0 && p.cached.multiplier != 1) ? 1.75 : 1; },
        type: "condition",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1 ? 2 : (p.cached.multiplier == 2 | p.cached.multiplier == undefined) ? 0 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['Conditional boost', 'Orb boost', 'Conditional boost and Orb boost'][n] + '. To switch to the ' + ['Orb boost', 'Conditional boost and Orb boost', 'Conditional boost'][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        orb: function(p) { return (p.cached.multiplier != 0 && p.unit.class.has("Shooter")) ? 2 : 1; },
    },
    2299: {
        def: function(p) { return 0.2 },
        atk: function(p) { return p.defenseDown > 0 ? [p.cached.multiplier1, 1, p.cached.multiplier1][p.cached.multiplier] : 1; },
        type: "condition",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = [ 1.75, 2 ][CrunchUtils.llimitUnlock(p, "specials")];
            p.cached.multiplier2 = [ 2, 2.25 ][CrunchUtils.llimitUnlock(p, "specials")];
            p.scope.notify({
                text: 'Using the ' + ["Conditional boost', 'Orb boost', 'Conditional boost and Orb boost"][levels[n]] + '. To switch to ' + ["Conditional boost', 'Orb boost', 'Conditional boost and Orb boost"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        orb: function(p) { return p.unit.class.has("Shooter") ? [1, p.cached.multiplier2, p.cached.multiplier2][p.cached.multiplier] : 1; },
    },
    2300: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Slasher") || p.unit.class.has("Fighter") ? [p.cached.multiplier, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1},
        type: "class",
        onActivation: function(p) {
            var levels = [2, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") < 0) p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ATK boost. To switch to the ' + levels[(n + 1) % levels.length] + ' ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2301: {
        atk: function(p) { return p.unit.class.has("Shooter") ? 2 : 1; },
        type: "class"
    },
    2302: {
        atk: function(p) { return p.unit.class.has("Shooter") ? 2 : 1; },
        type: "class"
    },
    2305: {
        poison: function(p) { return 99; },
        atk: function(p) { return (p.cached.captain.class.has("Cerebral") || p.cached.captain.class.has("Slasher")) && p.poisoned ? 1.75 : 1; },
        type: "condition",
    },
    2306: {
        poison: function(p) { return 99; },
        atk: function(p) { return (p.cached.captain.class.has("Cerebral") || p.cached.captain.class.has("Slasher")) && p.poisoned ? 1.75 : 1; },
        type: "condition",
    },
    2309: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2309].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2309].turnedOn = false;
        }
    },
    2310: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2310].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2310].turnedOn = false;
        }
    },
    2317: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.5 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Powerhouse") ? 1.5 : 1; }
    },
    2318: {
        chainAddition: function(p) { return 0.5; },
        onActivation: function(p) {
            window.specials[2318].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2318].turnedOn = false;
        }
    },
    2322: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.75 : 1; },
    },
    2323: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.75 : 1; },
    },
    2324: {
        chainAddition: function(p) { return p.cached.enemyImmunities.delay ? 0.75 : 0; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2324].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2324].turnedOn = false;
        },
    },
    2325: {
        chainAddition: function(p) { return p.cached.enemyImmunities.delay ? 0.75 : 0; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2325].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2325].turnedOn = false;
        },
        warning: "Selected special (%name%) assumes that the enemy has Delay Protection."
    },
    2328: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.75 : 1; },
        type: "class"
    },
    2329: {
        staticMult: function(p) { return 50; }
    },
    2330: {
        staticMult: function(p) { return [50, 100][CrunchUtils.llimitUnlock(p, "specials")]; },
        atk: function(p) { return p.unit.class.has("Shooter") ? [1, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
    },
    2333: {
        delay: function(p) { return 1; },
        orb: function(p) { return (p.unit.class.has("Shooter") && p.cached.multiplier) ? 1.75 : 1; },
        onActivation: function(p) {
            if (p.cached.multiplier == null) {
                p.cached.multiplier = true;
            }
            else{
                p.cached.multiplier = !p.cached.multiplier;
            }
            p.scope.notify({
                text: (p.cached.multiplier ? 'En' : 'Dis') + 'abling the orb boost. Enemy with highest MAX HP is ' + (p.cached.multiplier ? 'Under or equal to ' : 'Over ') + '80% HP',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2334: {
        delay: function(p) { return 1; },
        orb: function(p) { return p.unit.class.has("Shooter") ? [[1.75, 1][p.cached.multiplier], 2][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        status: function(p) { return p.delayed > 0 ? [1, p.cached.multiplier1][CrunchUtils.llimitUnlock(p, "specials")] : 1},
        onActivation: function(p) {
            p.cached.multiplier1 = p.captain != null ? p.captain.class.has("Shooter") ? 2 : 1 : 1;
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if(CrunchUtils.llimitUnlock(p, "specials")) p.scope.notify({
                text: 'Using the ' + ["Orb Boost", "No Orb Boost"][levels[n]] + '. To switch to ' + ["Orb Boost", "No Orb Boost"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2335: {
        chainAddition: function(p) { return 0.7; }
    },
    2336: {
        chainAddition: function(p) { return [0.7, 0.9][CrunchUtils.llimitUnlock(p, "specials")]; }
    },
    2337: {
        orb: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Cerebral")) ? 2 : 1; },
    },
    2338: {
        orb: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Cerebral")) ? 2 : 1; },
    },
    2339: {
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Cerebral")) ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 2.25][n] + 'x ATK multiplier. To switch to the ' + [2.25, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2340: {
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Cerebral")) ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 2.25][n] + 'x ATK multiplier. To switch to the ' + [2.25, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2341: {
        affinity: function(p) { return ((p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Cerebral")) && p.cached.multiplier != 0) ? 1.75 : 1; },
        orb: function(p) { return ((p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Cerebral")) && p.cached.multiplier != 1) ? 1.75 : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1 ? 2 : (p.cached.multiplier == 2 | p.cached.multiplier == undefined) ? 0 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['Orb boost', 'Affinity boost', 'Affinity boost and Orb boost'][n] + '. To switch to the ' + ['Affinity boost', 'Affinity boost and Orb boost', 'Orb boost'][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2342: {
        affinity: function(p) { return ((p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Cerebral")) && p.cached.multiplier != 0) ? 1.75 : 1; },
        orb: function(p) { return ((p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Cerebral")) && p.cached.multiplier != 1) ? 1.75 : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1 ? 2 : (p.cached.multiplier == 2 | p.cached.multiplier == undefined) ? 0 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['Orb boost', 'Affinity boost', 'Affinity boost and Orb boost'][n] + '. To switch to the ' + ['Affinity boost', 'Affinity boost and Orb boost', 'Orb boost'][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2343: {
        atk: function(p) { return p.unit.class.has("Shooter") ? 1.75 : 1; },
        type: "class"
    },
    2344: {
        atk: function(p) { return p.unit.class.has("Shooter") ? 1.75 : 1; },
        type: "class"
    },
    2345: {
        delay: function(p) { return 1; },
        chain: function(p) { return p.cached.captain.type == "QCK" || p.cached.captain.type == "INT" ? 3 : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? (p.cached.captain.type == "QCK" || p.cached.captain.type == "INT" ? 3 : Infinity) : 1;
        },
    },
    2346: {
        delay: function(p) { return 1; },
        chain: function(p) { return p.cached.captain.type == "QCK" || p.cached.captain.type == "INT" ? 3 : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? (p.cached.captain.type == "QCK" || p.cached.captain.type == "INT" ? 3 : Infinity) : 1;
        },
    },
    2347: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "PSY" ? 1.5 : 1; },
        type: "type",
    },
    2348: {
        def: function(p) { return 0; },
        atk: function(p) { return (window.specials[2348].turnedOn && p.defenseDown) ? 2 : 1 },
        type: "condition",
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2348].turnedOn = p.classCount.Slasher >= 5 ? true : false;
        },       
    },
    2349: {
        def: function(p) { return 0; },
        atk: function(p) { return (window.specials[2349].turnedOn && p.defenseDown) ? 2 : 1 },
        type: "condition",
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2349].turnedOn = p.classCount.Slasher >= 5 ? true : false;
        },       
    },
    2351: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 1.3 : 1; },
    },
    2353: {
        poison: function(p) { return 99; },
        def: function(p) { return (p.cached.multiplier == 1.75) ? 0 : 1; },
        atk: function(p) { return p.poisoned ? p.cached.multiplier : 1; },
        type: "condition",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + ' Conditional Boost. To switch to the ' + [1.75, 1.5][n] + ' Conditional Boost, disable and re-enable this special. <br>Selected special assumes that the enemy has been ' + ['Poisoned', 'Poisoned or Strongly Poisoned'][n] + '.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2354: {
        poison: function(p) { return 99; },
        def: function(p) { return (p.cached.multiplier == 1.75) ? 0 : 1; },
        atk: function(p) { return p.poisoned ? p.cached.multiplier : 1; },
        type: "condition",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 1.75][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75][n] + ' Conditional Boost. To switch to the ' + [1.75, 1.5][n] + ' Conditional Boost, disable and re-enable this special. <br>Selected special assumes that the enemy has been ' + ['Poisoned', 'Poisoned or Strongly Poisoned'][n] + '.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2355: {
        orb: function(p) { return (p.unit.class.has("Slasher")) ? 1.75 : 1; }
    },
    2356: {
        orb: function(p) { return (p.unit.class.has("Slasher")) ? 1.75 : 1; }
    },
    2357: {
        atk: function(p) { return p.slot == p.sourceSlot ? [2.25, 3.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "type",
        orb: function(p) { return p.slot == p.sourceSlot ? [2, 3.5][CrunchUtils.llimitUnlock(p, "specials")] : 1}
    },
    2358:{
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x ATK boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2359: {
        affinity: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Cerebral") ? 1.75 : 1; }
    },
    2363: {
        orb: function(p) { return [[1.5, 1.75, 2], [1.75, 2.25, 2.5]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier]; },
        chainAddition: function(p) { return [[.3, .7, .7], [.6, .9, .9]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier]; },
        turnedOn: false,
        onActivation: function(p) {
            if (p.sourceSlot < 2) window.specials[2363].turnedOn = true;
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Stage 1", "Stage 2 - Turn 1", "Stage 2 - Turn 2"][levels[n]] + 'x ATK boost. To switch to the ' + ["Stage 1", "Stage 2 - Turn 1", "Stage 2 - Turn 2"][levels[(n + 1) % levels.length]] + ' ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2363].turnedOn = false;
        }
    },
    2364: {
        staticMult: function(p) { return Math.min(p.damageCounter,200000) * 15; }
    },
    2365: {
        staticMult: function(p) { return Math.min(p.damageCounter,200000) * 15; }
    },
    2366: {
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Shooter") || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse")) ? 1.75 : 1; },
        type: "class",
    },
    2367: {
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Shooter") || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse")) ? 1.75 : 1; },
        type: "class",
    },
    2368: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "PSY") && (p.cached.captain.type == "STR" || p.cached.captain.type == "PSY") ? 1.75 : 1; },
    },
    2369: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "PSY") && (p.cached.captain.type == "STR" || p.cached.captain.type == "PSY") ? 1.75 : 1; },
    },
    2370: {
        onActivation: function(p) {
            window.specials[2370].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2370].turnedOn = false;
        }
    },
    2371: {
        onActivation: function(p) {
            window.specials[2371].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2371].turnedOn = false;
        }
    },
    2372: {
        staticMult: function(p) { return [130, 200][CrunchUtils.llimitUnlock(p, "specials")]; },
        chain: function(p) { return [1, 2.25][CrunchUtils.llimitUnlock(p, "specials")]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [Infinity, 35][CrunchUtils.llimitUnlock(p, "specials")] : 1;
        },
    },
    2373: {
        chainAddition: function(p) { return [0, 1.5][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            window.specials[2371].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2371].turnedOn = false;
        }
    },
    2374: {
        turnedOn: false,
        affinity: function(p) { return (p.cached.captain.class.has("Slasher") || p.cached.captain.class.has("Powerhouse")) && (p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse")) ? 1.75 : 1; },
        onActivation: function(p) {
            window.specials[2374].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2374].turnedOn = false;
        },
    },
    2375: {
        turnedOn: false,
        affinity: function(p) { return (p.cached.captain.class.has("Slasher") || p.cached.captain.class.has("Powerhouse")) && (p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse")) ? 1.75 : 1; },
        onActivation: function(p) {
            window.specials[2374].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2374].turnedOn = false;
        },
    },
    2376: {
        atk: function(p) { return p.slot < 2 ? 1.75 : 1; },
        type: "class",
    },
    2377: {
        atk: function(p) { return p.slot < 2 ? 1.75 : 1; },
        type: "class",
    },
    2378: {
        rcv: function(p) { return 1.5; },
    },
    2379: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.5 : 1; },
        type: "class",
    },
    2380: {
        //TODO
        hit: function(n,p) { return (n > 12 && (p.unit.class.has("Driven") || p.unit.class.has("Powerhouse"))) ? 2.25 : 1; },
        onActivation: function(p) {
            p.scope.notify({
                text: 'This ability currently stacks with regular attack boosts when it does not in-game, so please keep that in mind.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2381: {
        //TODO
        hit: function(n,p) { return (n > 12 && (p.unit.class.has("Driven") || p.unit.class.has("Powerhouse"))) ? 2.25 : 1; },
        onActivation: function(p) {
            p.scope.notify({
                text: 'This ability currently stacks with regular attack boosts when it does not in-game, so please keep that in mind.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2383:{
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x ATK boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2384: {
        orb: function(p) { return 1.5; },
        affinity: function(p) { return (p.cached.captain.type == "STR" || p.cached.captain.type == "PSY") ? 1.5 : 1; },
    },
    2386: {
        atk: function(p) { return p.slot == p.sourceSlot ? 3.25 : 1; },
        type: "class",
        orb: function(p) { return 1.5; },
    },
    2387: {
        atk: function(p) { return p.slot == p.sourceSlot ? [3.25, 3.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
        orb: function(p) { return [1.5, 1.75][CrunchUtils.llimitUnlock(p, "specials")]; },
    },
    2389: {
        atk: function(p) { return 1.3; },
        type: "class",
        orb: function(p) { return 1.3; },
    },
    2391: {
        orb: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit")) ? 1.75 : 1; }
    },
    2393: {
        orb: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") || p.unit.class.has("Powerhouse")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP <= 30 ? 2.25 : 2);
            p.cached.multiplier = n;
        }
    },
    2394: {
        orb: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") || p.unit.class.has("Powerhouse")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP <= 30 ? 2.25 : 2);
            p.cached.multiplier = n;
        }
    },
    2398: {
        orb: function(p) { return (p.unit.class.has("Shooter")) ? 1.75 : 1; },
        turnedOn: [ false, false, false, false, false, false ],
        multiplier: true,
        onActivation: function(p) {
            window.specials[2398].turnedOn[p.slot] = p.cached.multiplier ? true : false;
            if (p.cached.multiplier){
                p.scope.notify({
                    text: 'Only affects damage if Big Emperor is your captain, to use turn 2 Orb boost only, disable and re-enable the special',
                    name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
                });
            }
            p.cached.multiplier = !p.cached.multiplier;
        },
        onDeactivation: function(p) {
            window.specials[2398].turnedOn[p.slot] = false;
        }
    },
    2400: {
        atk: function(p) { return p.unit.type == "STR" ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            if (p.colorCount.DEX + p.colorCount.QCK >= 2) {
                p.cached.multiplier = 2.25;
            }
            else{
                p.cached.multiplier = 1.75;
            }
            p.scope.notify({
                text: 'Using the ' + p.cached.multiplier + 'x ATK multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2401: {
        atk: function(p) { return p.unit.type == "STR" ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            if (p.colorCount.DEX + p.colorCount.QCK >= 2) {
                p.cached.multiplier = 2.25;
            }
            else{
                p.cached.multiplier = 1.75;
            }
            p.scope.notify({
                text: 'Using the ' + p.cached.multiplier + 'x ATK multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2402: {
        atk: function(p) { return p.unit.type == "DEX" ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            if (p.colorCount.STR + p.colorCount.QCK >= 2) {
                p.cached.multiplier = 2.25;
            }
            else{
                p.cached.multiplier = 1.75;
            }
            p.scope.notify({
                text: 'Using the ' + p.cached.multiplier + 'x ATK multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2403: {
        atk: function(p) { return p.unit.type == "DEX" ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            if (p.colorCount.STR + p.colorCount.QCK >= 2) {
                p.cached.multiplier = 2.25;
            }
            else{
                p.cached.multiplier = 1.75;
            }
            p.scope.notify({
                text: 'Using the ' + p.cached.multiplier + 'x ATK multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2404: {
        atk: function(p) { return p.unit.type == "QCK" ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            if (p.colorCount.STR + p.colorCount.DEX >= 2) {
                p.cached.multiplier = 2.25;
            }
            else{
                p.cached.multiplier = 1.75;
            }
            p.scope.notify({
                text: 'Using the ' + p.cached.multiplier + 'x ATK multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2405: {
        atk: function(p) { return p.unit.type == "QCK" ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            if (p.colorCount.STR + p.colorCount.DEX >= 2) {
                p.cached.multiplier = 2.25;
            }
            else{
                p.cached.multiplier = 1.75;
            }
            p.scope.notify({
                text: 'Using the ' + p.cached.multiplier + 'x ATK multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2406: {
        atk: function(p) { return 1.75; },
        type: "class",
        orb: function(p) { return 1.75; },
        chainAddition: function(p) { return p.cached.multiplier ? 0.7 : 0; },
        onActivation: function(p) {
            if (p.cached.multiplier == null) {
                p.cached.multiplier = true;
            }
            else{
                p.cached.multiplier = !p.cached.multiplier;
            }
            p.scope.notify({
                text: (p.cached.multiplier ? 'En' : 'Dis') + 'abling the chain boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2407: {
        atk: function(p) { return 1.75; },
        type: "class",
        orb: function(p) { return 1.75; },
        chainAddition: function(p) { return p.cached.multiplier ? 0.7 : 0; },
        onActivation: function(p) {
            if (p.cached.multiplier == null) {
                p.cached.multiplier = true;
            }
            else{
                p.cached.multiplier = !p.cached.multiplier;
            }
            p.scope.notify({
                text: (p.cached.multiplier ? 'En' : 'Dis') + 'abling the chain boost.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2419: {
        turnedOn: false,
        delay: function(p) { return 2; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier != 1) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            var n = window.specials[2419].turnedOn; var m = n ? 1 : 0;
            p.cached.multiplier = !n ? (p.captain.type == "DEX" || p.captain.type == "INT") ? 2.75 : (p.captain.type == "QCK" || p.captain.type == "PSY") ? 3 : 1 : 1;
            p.scope.notify({
                text: ['Enabling', 'Disabling'][m] + ' the chain lock. To switch to the chain buff ' + ['off', 'on'][m] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2419].turnedOn = !window.specials[2419].turnedOn;
        }
    },
    2420: {
        turnedOn: false,
        delay: function(p) { return 2; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier != 1) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            var n = window.specials[2420].turnedOn; var m = n ? 1 : 0;
            p.cached.multiplier = !n ? (p.captain.type == "DEX" || p.captain.type == "INT") ? 2.75 : (p.captain.type == "QCK" || p.captain.type == "PSY") ? 3 : 1 : 1;
            p.scope.notify({
                text: ['Enabling', 'Disabling'][m] + ' the chain lock. To switch to the chain buff ' + ['off', 'on'][m] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2420].turnedOn = !window.specials[2420].turnedOn;
        }
    },
    2421: {
        atk: function(p) { return (p.delayed > 0 && (p.cached.captain.class.has("Driven") || p.cached.captain.class.has("Powerhouse"))) ? 1.75 : 1; },
        type: "condition",
    },
    2422: {
        atk: function(p) { return (p.delayed > 0 && (p.cached.captain.class.has("Driven") || p.cached.captain.class.has("Powerhouse"))) ? 1.75 : 1; },
        type: "condition",
    },
    2423: {
        orb: function(p) { return p.cached.multiplier == 2 ? p.cached.multiplier : (p.unit.class.has("Driven") || p.unit.class.has("Fighter")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Orb boost. To switch to the ' + [2, 1.75][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2424: {
        orb: function(p) { return p.cached.multiplier == 2 ? p.cached.multiplier : (p.unit.class.has("Driven") || p.unit.class.has("Fighter")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Orb boost. To switch to the ' + [2, 1.75][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2425: {
        def: function(p) { return 0.2; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2425].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2425].turnedOn = false;
        }
    },
    2426: {
        def: function(p) { return 0.2; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2426].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2426].turnedOn = false;
        }
    },
    2427: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.5 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Slasher") ? 1.5 : 1; }
    },
    2428: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.5 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Slasher") ? 1.5 : 1; }
    },
    2429: {
        def: function(p) { return p.cached.captain.class.has("Slasher") ? 0.5 : 1; },
        turnedOn: false,
    },
    2434: {
        delay: function(p) { return 1; },
        affinity: function(p) { return p.unit.class.has("Free Spirit") ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1},
        status: function(p) { return p.delayed > 0 ? [1, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")] : 1},
        onActivation: function(p) {
            var levels = [1, 1.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Status Boost Disabled", "Status Boost Enabled"][n] + '. To use' + ["Status Boost Disabled", "Status Boost Enabled"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2435: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Driven") ? 1.5 : 1},
        type: "class"
    },
    2437: {
        staticMult: function(p) { return 40; },
        def: function(p) { return 0.2; }
    },
    2438:{
        affinity: function(p) { return 1.5; },
        atk: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        type: "condition",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1 ? 1 : p.cached.multiplier == 1.75 ? 2 : p.cached.multiplier == 2 ? 3 : 0);
            p.cached.multiplier = [1, 1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1, 1.75, 2, 2.25][n] + 'x Conditional boost. To switch to the ' + [1.75, 2, 2.25, 1][n] + 'x Conditional boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2439: {
        delay: function(p) { return 1; },
    },
    2440: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 3) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 3 ? 1 : 0);
            p.cached.multiplier = [3, 1][n];
            p.scope.notify({
                text: ['Enabling', 'Disabling'][n] + ' the 3x chain lock. To switch to the buff ' + ['off', 'on'][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        orb: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit")) ? 2.25 : 1; },
    },
    2441: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 3) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 3 ? 1 : 0);
            p.cached.multiplier = [3, 1][n];
            p.scope.notify({
                text: ['Enabling', 'Disabling'][n] + ' the 3x chain lock. To switch to the buff ' + ['off', 'on'][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        orb: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit")) ? 2.25 : 1; },
    },
    2442: {
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[2442].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Only affects damage if Doflamingo is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2442].turnedOn[p.slot] = false;
        }
    },
    2443: {
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[2443].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Only affects damage if Doflamingo is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2443].turnedOn[p.slot] = false;
        }
    },
    2444: {
        orb: function(p) { return (p.unit.class.has("Driven")) ? 2.25 : 1; },
        affinity: function(p) { return (p.unit.class.has("Driven")) ? [1, 1.75][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
    },
    2447: {
        delay: function(p) { return 1; },
        def: function(p) { return 0; },
        warning: "Selected special (%name%) assumes that the Captain or Friend Captain have a TND orb."
    },
    2448: {
        delay: function(p) { return 2; },
        def: function(p) { return 0; },
        warning: "Selected special (%name%) assumes that the Captain or Friend Captain have a TND orb."
    },
    2449: {
        atk: function(p) { return (window.specials[2449].turnedOn && p.defenseDown) ? 1.75 : 1; },
        type: "condition",
        onActivation: function(p) {
            window.specials[2449].turnedOn = p.classCount.Powerhouse == 6 ? true : false;
        },
        onDeactivation: function(p) {
            window.specials[2449].turnedOn = false;
        }
    },
    2450: {
        atk: function(p) { return (window.specials[2450].turnedOn && p.defenseDown) ? 2 : 1; },
        type: "condition",
        onActivation: function(p) {
            window.specials[2450].turnedOn = p.classCount.Powerhouse == 6 ? true : false;
        },
        onDeactivation: function(p) {
            window.specials[2450].turnedOn = false;
        }
    },
    2451: {
        affinity: function(p) { return 1.75; },
        warning: "Selected special (%name%) assumes that the Captain or Friend Captain have a TND orb."
    },
    2452: {
        affinity: function(p) { return 2; },
        warning: "Selected special (%name%) assumes that the Captain or Friend Captain have a TND orb."
    },
    2453: {
        poison: function(p) { return (window.specials[2453].turnedOn) ? 99 : 1; },
        onActivation: function(p) {
            window.specials[2453].turnedOn = p.classCount.Powerhouse == 6 ? true : false;
        },
        onDeactivation: function(p) {
            window.specials[2453].turnedOn = false;
        }
    },
    2454: {
        poison: function(p) { return (window.specials[2454].turnedOn) ? 99 : 0; },
        onActivation: function(p) {
            window.specials[2454].turnedOn = p.classCount.Powerhouse == 6 ? true : false;
        },
        onDeactivation: function(p) {
            window.specials[2454].turnedOn = false;
        }
    },
    2456: {
        chainAddition: function(p) { return 0.3; }
    },
    2457: {
        chainAddition: function(p) { return 0.3; }
    },
    2459: {
        delay: function(p) { return window.specials[2459].turnedOn ? 1 : 0; },
        onActivation: function(p) {
            window.specials[2459].turnedOn = p.classCount.Fighter == 6 ? true : false;
        },
        onDeactivation: function(p) {
            window.specials[2459].turnedOn = false;
        },
    },
    2460: {
        atk: function(p) { return p.unit.type == "STR" ? 1.75 : 1; },
        type: "type",
    },
    2461: {
        chainAddition: function(p) { return 0.5; }
    },
    2462:{
        atk: function(p) { return (p.unit.class.has("Powerhouse")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2.25][n] + 'x ATK boost. To switch to the ' + [2.25, 1.75][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2463:{
        atk: function(p) { return (p.unit.class.has("Powerhouse")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2.25][n] + 'x ATK boost. To switch to the ' + [2.25, 1.75][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2464: {
        affinity: function(p) { return (p.cached.affmultiplier && (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven"))) ? 1.75 : 1; },
        chainAddition: function(p) { return p.cached.chainmultiplier ? 1.1 : 0; },
        onActivation: function(p) {
            if (p.captain) if (p.captain.class.has("Free Spirit") || p.captain.class.has("Cerebral") || p.captain.class.has("Powerhouse") || p.captain.class.has("Driven")) p.cached.affmultiplier = true;
            if (p.captain) if (p.captain.class.has("Fighter") || p.captain.class.has("Striker") || p.captain.class.has("Slasher") || p.captain.class.has("Shooter")) p.cached.chainmultiplier = true;
        },
        onDeactivation: function(p) {
            p.cached.affmultiplier = false;
            p.cached.chainmultiplier = false;
        },
    },
    2465: {
        affinity: function(p) { return (p.cached.affmultiplier && (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven"))) ? 1.75 : 1; },
        chainAddition: function(p) { return p.cached.chainmultiplier ? 1.1 : 0; },
        onActivation: function(p) {
            if (p.captain) if (p.captain.class.has("Free Spirit") || p.captain.class.has("Cerebral") || p.captain.class.has("Powerhouse") || p.captain.class.has("Driven")) p.cached.affmultiplier = true;
            if (p.captain) if (p.captain.class.has("Fighter") || p.captain.class.has("Striker") || p.captain.class.has("Slasher") || p.captain.class.has("Shooter")) p.cached.chainmultiplier = true;
        },
        onDeactivation: function(p) {
            p.cached.affmultiplier = false;
            p.cached.chainmultiplier = false;
        },
    },
    2466:{
        orb: function(p) { return (p.unit.class.has("Powerhouse")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x Orb boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2470: {
        delay: function(p) { return 2; },
        ignoresImmunities: function(p) { return ['delay']; },
        warning: "Selected special (%name%) assumes that there are 4 or more enemies.",
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2470].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2470].turnedOn = false;
        }
    },
    2471: {
        delay: function(p) { return 2; },
        ignoresImmunities: function(p) { return ['delay']; },
        warning: "Selected special (%name%) assumes that there are 4 or more enemies.",
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2471].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2471].turnedOn = false;
        }
    },
    2474: {
        orb: function(p) { return p.unit.class.has("Slasher") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : 0);
            p.cached.multiplier = [2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.25][n] + 'x Orb boost. To switch to the ' + [2.25, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2475: {
        orb: function(p) { return p.unit.class.has("Slasher") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : 0);
            p.cached.multiplier = [2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.25][n] + 'x Orb boost. To switch to the ' + [2.25, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2476: {
        atk: function(p) { return p.unit.class.has("Slasher") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : 0);
            p.cached.multiplier = [2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.25][n] + 'x ATK multiplier. To switch to the ' + [2.25, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2477: {
        atk: function(p) { return p.unit.class.has("Slasher") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : 0);
            p.cached.multiplier = [2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.25][n] + 'x ATK multiplier. To switch to the ' + [2.25, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2478: {
        onActivation: function(p) {
            window.specials[2478].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2478].turnedOn = false;
        }
    },
    2479: {
        onActivation: function(p) {
            window.specials[2479].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2479].turnedOn = false;
        }
    },
    2480: {
        poison: function(p) { return 99; },
    },
    2481: {
        poison: function(p) { return 99; },
    },
    2484: {
        atk: function(p) { return p.unit.class.has("Slasher") && p.cached.captain.class.has("Slasher") ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Slasher") && p.cached.captain.class.has("Slasher") ? 1.75 : 1; },
    },
    2485: {
        atk: function(p) { return p.unit.class.has("Slasher") && p.cached.captain.class.has("Slasher") ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Slasher") && p.cached.captain.class.has("Slasher") ? 1.75 : 1; },
    },
    2486: {
        affinity: function(p) { return p.unit.class.has("Slasher") && p.cached.captain.class.has("Slasher") ? 2 : 1; },
    },
    2487: {
        affinity: function(p) { return p.unit.class.has("Slasher") && p.cached.captain.class.has("Slasher") ? 2 : 1; },
    },
    2488: {
        affinity: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven")) ? 1.75 : 1; },
        orb: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven")) ? 2 : 1; },
    },
    2492: {
        chainAddition: function(p) { return 0.3; }
    },
    2494: {
        orb: function(p) { return 1.75; }
    },
    2497: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? 1.75 : 1; },
        type: "class"
    },
    2498: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? 1.75 : 1; },
        type: "class"
    },
    2500: {
        atk: function(p) { return p.cached.multiplier ? p.slot < 2 ? [2, 3.5][CrunchUtils.llimitUnlock(p, "captains")] : 1 : p.slot == p.sourceSlot ? [2, 4][CrunchUtils.llimitUnlock(p, "captains")] : 1; },
        type: "class",
        orb: function(p) { return p.cached.multiplier ? (p.slot < 2) ? [2, 3.5][CrunchUtils.llimitUnlock(p, "captains")] : 1 : p.slot == p.sourceSlot ? [2, 4][CrunchUtils.llimitUnlock(p, "captains")] : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.slot < 2 ? true : false);
        }
    },
    2503: {
        atk: function(p) { return (p.unit.class.has("Shooter") && window.specials[2503].turnedOn) ? 2 : 1; },
        type: "class",
        onActivation: function(p) {
            window.specials[2503].turnedOn = p.classCount.Shooter == 6 ? true : false;
        },
    },
    2504: {
        atk: function(p) { return (p.unit.class.has("Shooter") && window.specials[2504].turnedOn) ? 2 : 1; },
        type: "class",
        onActivation: function(p) {
            window.specials[2504].turnedOn = p.classCount.Shooter == 6 ? true : false;
        },
    },
    2505: {
        delay: function(p) { return [1, 2][CrunchUtils.llimitUnlock(p, "specials")]; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier != 1 ? p.cached.multiplier : Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = [(p.slot < 2) ? 2.75 : 1, 3.25][CrunchUtils.llimitUnlock(p, "specials")];
        },
    },
    2506: {
        chainAddition: function(p) { return 0.5; }
    },
    2507:{
        orb: function(p) { return (p.unit.type == "PSY" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : p.cached.multiplier == 1.75 ? 2 : 0);
            p.cached.multiplier = [1.5, 1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75, 2][n] + 'x Orb boost. To switch to the ' + [1.75, 2, 1.5][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2508:{
        atk: function(p) { return (p.unit.type == "PSY" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x ATK boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2509:{
        atk: function(p) { return p.cached.enemyImmunities.delay ? 2 : 1; },
        type: "class",
        staticMult: function(p) { return p.slot == p.sourceSlot ? 300 : 0; },
    },
    2510:{
        atk: function(p) { return [p.cached.enemyImmunities.delay ? 2 : 1,2.25][CrunchUtils.llimitUnlock(p, "specials")]; },
        type: "class",
        staticMult: function(p) { return [p.slot == p.sourceSlot ? 300 : 0,300][CrunchUtils.llimitUnlock(p, "specials")]; },
    },
    2514: {
        orb: function(p) { return p.unit.class.has("Fighter") ? 2.25 : 1; }
    },
    2515: {
        orb: function(p) { return p.unit.class.has("Fighter") ? 2.25 : 1; }
    },
    2519: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.5 : 1; },
        type: "class"
    },
    2520: {
        atk: function(p) { return (p.delayed > 0) ? 1.5 : 1; },
        type: "condition",
    },
    2521:{
        affinity: function(p) { return p.cached.captain.type == "DEX" ? 1.5 : 1; },
    },
    2522: {
        delay: function(p) { return 1; },
        orb: function(p) { return 1.5; }
    },
    2525: {
        atk: function(p) { return (p.unit.type == "QCK" || p.unit.type == "PSY" || p.unit.type == "INT") ? 1.5 : 1; },
        type: "class",
        chainAddition: function(p) { return 0.3; }
    },
    2526: {
        def: function(p) { return 0.5; },
        rcv: function(p) { return 1.5; },
    },
    2527: {
        atk: function(p) { return p.defenseDown ? 1.5 : 1; },
        type: "condition",
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2527].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2527].turnedOn = false;
        }
    },
    2528: {
        def: function(p) { return 0.2; },
        orb: function(p) { return (p.unit.class.has("Powerhouse") || p.unit.class.has("Striker")) ? 1.75 : 1; }
    },
    2529: {
        def: function(p) { return 0.2; },
        orb: function(p) { return (p.unit.class.has("Powerhouse") || p.unit.class.has("Striker")) ? 1.75 : 1; }
    },
    2545: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    2546: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    2553: {
        delay: function(p) { return 1; },
        orb: function(p) { return 1.5; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2553].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2553].turnedOn = false;
        }
    },
    2554:{
        atk: function(p) { return p.delayed > 0 ? p.cached.multiplier : 1; },
        type: "condition",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : p.cached.multiplier == 1.75 ? 2 : 0);
            p.cached.multiplier = [1.5, 1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75, 2][n] + 'x Conditional boost. To switch to the ' + [1.75, 2, 1.5][n] + 'x Conditional boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2555:{
        atk: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Shooter") || p.unit.class.has("Slasher")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x ATK boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2562: {
        orb: function(p) { return (p.unit.class.has("Free Spirit")) ? 2 : 1; },
    },
    2563: {
        orb: function(p) { return (p.unit.class.has("Free Spirit")) ? 2 : 1; },
    },
    2564:{
        chainAddition: function(p) { return p.cached.multiplier ? 0.3 : 0.7; },
        rcv: function(p) { return !p.cached.multiplier ? 1.5 : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == true ? 1 : 0);
            p.cached.multiplier = [true, false][n];
            p.scope.notify({
                text: 'Using the ' + ['0.3x Chain Boost', '0.7x Chain Boost and 1.5x RCV boost'][n] + '. To switch to the ' + ['0.7x Chain Boost and 1.5x RCV boost', '0.3x Chain Boost'][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2565:{
        chainAddition: function(p) { return p.cached.multiplier ? 0.3 : 0.7; },
        rcv: function(p) { return !p.cached.multiplier ? 1.5 : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == true ? 1 : 0);
            p.cached.multiplier = [true, false][n];
            p.scope.notify({
                text: 'Using the ' + ['0.3x Chain Boost', '0.7x Chain Boost and 1.5x RCV boost'][n] + '. To switch to the ' + ['0.7x Chain Boost and 1.5x RCV boost', '0.3x Chain Boost'][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2568: {
        atk: function(p) { return (p.defenseDown && window.specials[2568].turnedOn) ? 1.75 : 1; },
        type: "condition",
        def: function(p) { return window.specials[2568].turnedOn ? p.cached.multiplier : 1 },
        turnedOn: false,
        onActivation: function(p) {
            if (p.captain.class.has("Free Spirit")) {
                window.specials[2568].turnedOn = true;
                var n = (p.cached.multiplier == 0.5 ? 1 : 0);
                p.cached.multiplier = [0.5, 0][n];
                p.scope.notify({
                    text: 'Using the ' + ['50%', '100%'][n] + ' Defense down. To switch to the ' + ['100%', '50%'][n] + ' Defense down, disable and re-enable this special',
                    name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
                });
            }
        },
        onDeactivation: function(p) {
            window.specials[2568].turnedOn = false;
        },
    },
    2569: {
        atk: function(p) { return (p.defenseDown && window.specials[2569].turnedOn) ? 1.75 : 1; },
        type: "condition",
        def: function(p) { return window.specials[2569].turnedOn ? p.cached.multiplier : 1 },
        turnedOn: false,
        onActivation: function(p) {
            if (p.captain.class.has("Free Spirit")) {
                window.specials[2569].turnedOn = true;
                var n = (p.cached.multiplier == 0.5 ? 1 : 0);
                p.cached.multiplier = [0.5, 0][n];
                p.scope.notify({
                    text: 'Using the ' + ['50%', '100%'][n] + ' Defense down. To switch to the ' + ['100%', '50%'][n] + ' Defense down, disable and re-enable this special',
                    name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
                });
            }
        },
        onDeactivation: function(p) {
            window.specials[2569].turnedOn = false;
        },
    },
    2570: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.5 : 1; },
        type: "type",
        orb: function(p) { return p.slot == p.sourceSlot ? 1.5 : 1}
    },
    2571: {
        atk: function(p) { return p.slot == p.sourceSlot ? 1.5 : 1; },
        type: "type",
        orb: function(p) { return p.slot == p.sourceSlot ? 1.5 : 1}
    },
    2574: {
        atk: function(p) { return p.delayed > 0 && p.cached.captain.class.has("Free Spirit") ? 2 : 1; },
        type: "condition",
    },
    2575: {
        atk: function(p) { return p.delayed > 0 && p.cached.captain.class.has("Free Spirit") ? 2 : 1; },
        type: "condition",
    },
    2578: {
        atk: function(p) { return p.unit.type == "STR" ? [2, [2.5, 1, 2.5][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
        atkPlus: function(p) { return [0, [0, 0.3, 0.3][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: '' + ["ATK Boost", "ATK Buff", "ATK Boost and Buff"][n] + '. To ' + ["ATK Boost", "ATK Buff", "ATK Boost and Buff"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2579:{
        atk: function(p) { return p.unit.class.has("Cerebral") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x ATK boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2580: {
        chain: function(p) { return 2.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.75 : 1;
        }
    },
    2582: {
        orb: function(p) { return p.unit.class.has("Cerebral") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2 : 1);
            p.cached.multiplier = n;
            if (n == 2) p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2583: {
        orb: function(p) { return p.unit.class.has("Cerebral") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2 : 1);
            p.cached.multiplier = n;
            if (n == 2) p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2584: {
        orb: function(p) { return ((p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse")) && p.cached.multiplier == 1.75) ? p.cached.multiplier : p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.percHP <= 30 ? 2 : 1.75);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'below' : 'above') + ' 30%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2585: {
        orb: function(p) { return ((p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse")) && p.cached.multiplier == 1.75) ? p.cached.multiplier : p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.percHP <= 30 ? 2 : 1.75);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'below' : 'above') + ' 30%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2586: {
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse") && p.cached.multiplier == 1.75) ? p.cached.multiplier : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2587: {
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse") && p.cached.multiplier == 1.75) ? p.cached.multiplier : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2588: {
        affinity: function(p) { return [(p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven")) ? 1.75 : 1, 2][CrunchUtils.llimitUnlock(p, "specials")]; },
        orb: function(p) { return [(p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven")) ? 2 : 1, 2.25][CrunchUtils.llimitUnlock(p, "specials")]; },
    },
    2589: {
        def: function(p) { return 0.5; }
    },
    2590: {
        atk: function(p) { return p.defenseDown ? 1.5 : 1; },
        type: "condition"
    },
    2591: {
        orb: function(p) { return 1.5; },
    },
    2593: {
        chainAddition: function(p) { return 0.3; }
    },
    2594: {
        affinity: function(p) { return 1.3; },
    },
    2597: {
        atk: function(p) { return p.defenseDown ? 1.5 : 1; },
        type: "condition",
        affinity: function(p) { return p.unit.class.has("Driven") ? 1.75 : 1; },
    },
    2599: {
        def: function(p) { return 0.2; },
        delay: function(p) { return 1; }
    },
    2606: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP >= 50 ? 2 : 1.75);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 50%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2607: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP >= 50 ? 2 : 1.75);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 50%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2608: {
        orb: function(p) { return p.slot > 3 ? 2.25 : 1; },
    },
    2609: {
        orb: function(p) { return p.slot > 3 ? 2.25 : 1; },
    },
    2610: {
        chainAddition: function(p) { return 0.5; }
    },
    2611: {
        chainAddition: function(p) { return 0.5; }
    },
    2612:{
        atk: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Cerebral")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : p.cached.multiplier == 1.75 ? 2 : 0);
            p.cached.multiplier = [1.5, 1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75, 2][n] + 'x ATK boost. To switch to the ' + [1.75, 2, 1.5][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2613:{
        orb: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Driven")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x ATK boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2614: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "INT") ? 1.75 : 1; },
        type: "type"
    },
    2619: {
        atk: function(p) { return (p.unit.type == "INT" && window.specials[2619].turnedOn) ? 2.25 : 1; },
        type: "type",
        turnedOn: false,
        onActivation: function(p) {
            if (p.slot < 2) window.specials[2619].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2619].turnedOn = false;
        }
    },
    2620: {
        atk: function(p) { return (p.unit.type == "INT" && window.specials[2620].turnedOn) ? 2.25 : 1; },
        type: "type",
        turnedOn: false,
        onActivation: function(p) {
            if (p.slot < 2) window.specials[2620].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2620].turnedOn = false;
        }
    },
    2621: {
        atk: function(p) { return (p.unit.type == "PSY" && window.specials[2621].turnedOn) ? 2.25 : 1; },
        type: "type",
        turnedOn: false,
        onActivation: function(p) {
            if (p.slot < 2) window.specials[2621].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2621].turnedOn = false;
        }
    },
    2622: {
        atk: function(p) { return (p.unit.type == "PSY" && window.specials[2622].turnedOn) ? 2.25 : 1; },
        type: "type",
        turnedOn: false,
        onActivation: function(p) {
            if (p.slot < 2) window.specials[2622].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2622].turnedOn = false;
        }
    },
    2623: {
        atk: function(p) { return (p.unit.type == "DEX" && window.specials[2623].turnedOn) ? 2.25 : 1; },
        type: "type",
        turnedOn: false,
        onActivation: function(p) {
            if (p.slot < 2) window.specials[2623].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2623].turnedOn = false;
        }
    },
    2624: {
        atk: function(p) { return (p.unit.type == "DEX" && window.specials[2624].turnedOn) ? 2.25 : 1; },
        type: "type",
        turnedOn: false,
        onActivation: function(p) {
            if (p.slot < 2) window.specials[2624].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2624].turnedOn = false;
        }
    },
    2625: {
        orb: function(p) { return window.specials[2625].turnedOn ? 2 : 1; },
        onActivation: function(p) {
            window.specials[2625].turnedOn = (p.colorCount.STR>=3 || p.colorCount.DEX>=3 || p.colorCount.QCK>=3 || p.colorCount.PSY>=3 || p.colorCount.INT>=3) ? true : false;
        },
        onDeactivation: function(p) {
            window.specials[2625].turnedOn = false;
        }
    },
    2626: {
        orb: function(p) { return window.specials[2626].turnedOn ? 2 : 1; },
        onActivation: function(p) {
            window.specials[2626].turnedOn = (p.colorCount.STR>=3 || p.colorCount.DEX>=3 || p.colorCount.QCK>=3 || p.colorCount.PSY>=3 || p.colorCount.INT>=3) ? true : false;
        },
        onDeactivation: function(p) {
            window.specials[2626].turnedOn = false;
        }
    },
    2627: {
        chainAddition: function(p) { return 0.4; }
    },
    2628: {
        chainAddition: function(p) { return 0.4; }
    },
    2629: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "INT") ? 1.75 : 1; },
        type: "type"
    },
    2630: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "INT") ? 1.75 : 1; },
        type: "type"
    },
    2631: {
        delay: function(p) { return [0, 1][CrunchUtils.llimitUnlock(p, "specials")]; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = [false, true][CrunchUtils.llimitUnlock(p, "specials")];
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        }
    },
    2633: {
        atk: function(p) { return p.unit.class.has("Free Spirit") ? 1.75 : 1; },
        type: "class",
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[2633].turnedOn[p.slot] = true;
            /*p.scope.notify({
                text: 'Only affects damage if Luffy is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });*/
        },
        onDeactivation: function(p) {
            window.specials[2633].turnedOn[p.slot] = false;
        }
    },
    2634: {
        affinity: function(p) { return (p.unit.class.has("Free Spirit")) ? 1.75 : 1; },
    },
    2637: {
        orb: function(p) { return p.unit.class.has("Free Spirit") ? 1.75 : 1; }
    },
    2640: {
        delay: function(p) { return 2; },
    },
    2641: {
        def: function(p) { return .2; },
        chainAddition: function(p) { return 0.4; }
    },
    2642: {
        atk: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Striker")) ? 1.75 : 1; },
        type: "class"
    },
    2643: {
        orb: function(p) { return (p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit")) ? 1.75 : 1; }
    },
    2644: {
        affinity: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse")) ? 1.75 : 1; },
    },
    2646: {
        delay: function(p) { return 1; },
        def: function(p) { return .2; },
    },
    2647: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type"
    },
    2648: {
        atk: function(p) { return (p.unit.class.has("Cerebral") || p.unit.class.has("Slasher")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP >= 50 ? 2 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 50%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2649: {
        atk: function(p) { return (p.unit.class.has("Cerebral") || p.unit.class.has("Slasher")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP >= 50 ? 2 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 50%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2654: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "INT") ? 1.75 : 1; },
    },
    2655: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "INT") ? 1.75 : 1; },
    },
    2656: {
        atk: function(p) { return !(p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "INT") ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2657: {
        atk: function(p) { return !(p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "INT") ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2658: {
        orb: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Driven")) ? 2 : 1; },
        chainAddition: function(p) { return (p.cached.captain.class.has("Fighter") || p.cached.captain.class.has("Driven")) ? 0.7 : 0; },
    },
    2659: {
        orb: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Driven")) ? 2 : 1; },
        chainAddition: function(p) { return (p.cached.captain.class.has("Fighter") || p.cached.captain.class.has("Driven")) ? 0.7 : 0; },
    },
    2660: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        type: "class",
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.type == "STR" || p.captain.type == "QCK" || p.captain.type == "INT") ? 1.75 : 1;
        },
    },
    2661: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        type: "class",
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.type == "STR" || p.captain.type == "QCK" || p.captain.type == "INT") ? 1.75 : 1;
        },
    },
    2663: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "QCK") ? (p.cached.enemyImmunities.delay ? 2 : 1.75) : 1; },
        type: "type",
    },
    2664: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "QCK") ? (p.cached.enemyImmunities.delay ? 2 : 1.75) : 1; },
    },
    2666: {
        atk: function(p) { return 1.5; },
        type: "type",
    },
    2667: {
        chain: function(p) { return 2.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.75 : 1;
        }
    },
    2668: {
        chain: function(p) { return 2.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.75 : 1;
        }
    },
    2669: {
        affinity: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = p.colorCount.STR >= 4 ? 2 : 1;
        },
    },
    2670: {
        affinity: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = p.colorCount.STR >= 4 ? 2 : 1;
        },
    },
    2671: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2.5 : 1; },
        type: "type",
        orb: function(p) { return p.slot == p.sourceSlot ? 2.5 : 1},
        atkbase: function(p) { return p.slot == p.sourceSlot ? Math.min(1000,window.specials[2671].momBoost) : 0; },
        onActivation: function(p) {
            window.specials[2671].momBoost = Math.floor(p.percHP*p.maxHP/2000);
        },
    },
    2672: {
        atk: function(p) { return p.slot == p.sourceSlot ? [2.5, 3.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "type",
        orb: function(p) { return p.slot == p.sourceSlot ? [2.5, 3.25][CrunchUtils.llimitUnlock(p, "specials")] : 1},
        atkbase: function(p) { return p.slot == p.sourceSlot ? [Math.min(1000,window.specials[2672].momBoost), 1000][CrunchUtils.llimitUnlock(p, "specials")] : 0; },
        affinityPlus: function(p) { return [[0, 0.25][CrunchUtils.llimitUnlock(p, "specials")], 0][p.cached.multiplier]; },
        onActivation: function(p) {
            window.specials[2672].momBoost = Math.floor(p.percHP*p.maxHP/2000);
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: 'Using the ' + ["Affinity Buff Enabled", "Affinity Buff Disabled"][levels[n]] + ' boost. To switch to the ' + ["Affinity Buff Enabled", "Affinity Buff Disabled"][levels[(n + 1) % levels.length]] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2673: {
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.colorCount.DEX + p.colorCount.PSY >= 5) ? 2 : 1;
        },
    },
    2674: {
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.colorCount.DEX + p.colorCount.PSY >= 5) ? 2 : 1;
        },
    },
    2677: {
        atk: function(p) { return (p.unit.type == "DEX" || p.unit.type == "PSY") ? 2 : 1; },
        type: "class",
    },
    2678: {
        atk: function(p) { return (p.unit.type == "DEX" || p.unit.type == "PSY") ? 2 : 1; },
        type: "class",
    },
    2679: {
        delay: function(p) { return 1; },
    },
    2680: {
        delay: function(p) { return 1; },
    },
    2681: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "INT") ? [1, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
        atkbase: function(p) { return (p.slot == p.sourceSlot) ? [0, 1000][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
    },
    2682: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    2683: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "PSY") ? 1.75 : 1; },
    },
    2684: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "PSY") ? 1.75 : 1; },
    },
    2685: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "class",
        chainAddition: function(p) { return 0.7; }
    },
    2686: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "class",
        chainAddition: function(p) { return 0.7; }
    },
    2687: {
        affinity: function(p) { return !(p.unit.type == "DEX" || p.unit.type == "QCK" || p.unit.type == "PSY") ? 1 : p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : p.cached.multiplier == 1.75 ? 2 : 0);
            p.cached.multiplier = [1.5, 1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75, 2][n] + 'x Affinity multiplier. To switch to the ' + [1.75, 2, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2689: {
        atk: function(p) { return p.unit.type == "INT" ? 2 : 1; },
        orb: function(p) { return p.unit.type == "INT" ? 2 : 1; },
        type: "type",
    },
    2690: {
        atk: function(p) { return p.unit.type == "INT" ? 2 : 1; },
        orb: function(p) { return p.unit.type == "INT" ? 2 : 1; },
        type: "type",
    },
    2691: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 1.75 : 1; },
        type: "type"
    },
    2692: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 1.75 : 1; },
        type: "type"
    },
    2695: {
        affinity: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; },
    },
    2696: {
        affinity: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; },
    },
    2697: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 35 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.captain.class.has("Striker") || p.captain.class.has("Cerebral")) {
                p.cached.multiplier = 2;
            }
        },
    },
    2698: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 35 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.captain.class.has("Striker") || p.captain.class.has("Cerebral")) {
                p.cached.multiplier = 2;
            }
        },
    },
    2701:{
        orb: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Powerhouse")) ? (p.cached.enemyImmunities.delay ? 2 : 1.75) : 1; },
    },
    2702:{
        orb: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Powerhouse")) ? (p.cached.enemyImmunities.delay ? 2 : 1.75) : 1; },
    },
    2703: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    2704: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    2705:{
        def: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == .5 ? 1 : 0);
            p.cached.multiplier = [.5, 0][n];
            p.scope.notify({
                text: 'Using the ' + [50, 100][n] + '% Defense Reduction. To switch to the ' + [100, 50][n] + '% Defense Reduction, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2706:{
        def: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == .5 ? 1 : 0);
            p.cached.multiplier = [.5, 0][n];
            p.scope.notify({
                text: 'Using the ' + [50, 100][n] + '% Defense Reduction. To switch to the ' + [100, 50][n] + '% Defense Reduction, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2707:{
        def: function(p) { return 0; },
    },
    2708: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.type == "DEX" || p.captain.type == "PSY") ? 0.8 : 0;
        },
    },
    2709: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.type == "DEX" || p.captain.type == "PSY") ? 0.8 : 0;
        },
    },
    2710: {
        chainAddition: function(p) { return 0.3; },
    },
    2711: {
        chainAddition: function(p) { return 0.3; },
    },
    2713:{
        def: function(p) { return 0; },
    },
    2714:{
        def: function(p) { return 0; },
    },
    2715: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.25 : 1; },
        type: "type"
    },
    2716: {
        chainAddition: function(p) { return 0.25; },
    },
    2717: {
        orb: function(p) { return (p.unit.class.has("Slasher")) ? 1.25 : 1; },
    },
    2718: {
        staticMult: function(p) { return 2.5; },
    },
    2719: {
        affinity: function(p) { return p.unit.class.has("Slasher") ? 1.25 : 1; },
    },
    2724: {
        chainAddition: function(p) { return 0.5; },
    },
    2725:{
        affinity: function(p) { return (p.unit.class.has("Powerhouse")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x Affinity boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x Affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2727:{
        atk: function(p) { return (p.unit.class.has("Powerhouse")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x ATK boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2728:{
        delay: function(p) { return 1; },
    },
    2729:{
        delay: function(p) { return 1; },
    },
    2730: {
        chainAddition: function(p) {return p.cached.multiplier;},
        onActivation: function(p) {
            var n = (p.cached.multiplier == 0.5 ? 1 : 0);
            p.cached.multiplier = [0.5, 1.1][n];
            p.scope.notify({
                text: 'Using the ' + [0.5, 1.1][n] + 'x chain addition. To switch to the ' + [1.1, 0.5][n] + 'x chain addition, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2731: {
        chainAddition: function(p) {return p.cached.multiplier;},
        onActivation: function(p) {
            var n = (p.cached.multiplier == 0.5 ? 1 : 0);
            p.cached.multiplier = [0.5, 1.1][n];
            p.scope.notify({
                text: 'Using the ' + [0.5, 1.1][n] + 'x chain addition. To switch to the ' + [1.1, 0.5][n] + 'x chain addition, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2732: {
        poison: function(p) { return 99; },
        atk: function(p) { return p.poisoned ? 1.3 : 1; },
        type: "condition",
    },
    2733: {
        poison: function(p) { return 99; },
        atk: function(p) { return p.poisoned ? 1.3 : 1; },
        type: "condition",
    },
    2734: {
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            if (p.colorCount.STR >= 3 || p.colorCount.DEX >= 3 || p.colorCount.QCK >= 3 || p.colorCount.PSY >= 3 || p.colorCount.INT >= 3) p.cached.multiplier = 2;
            else p.cached.multiplier = 1;
        },
    },
    2735: {
        atk: function(p) { return window.specials[2735].turnedOn ? 2.25 : 1; },
        type: "type",
        turnedOn: false,
        onActivation: function(p) {
            if (p.slot < 2) window.specials[2735].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2735].turnedOn = false;
        }
    },
    2736: {
        atk: function(p) { return window.specials[2736].turnedOn ? 2.25 : 1; },
        type: "type",
        turnedOn: false,
        onActivation: function(p) {
            if (p.slot < 2) window.specials[2736].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2736].turnedOn = false;
        }
    },
    2739: {
        staticMult: function(p) { return [[ 100, 0, 100 ][p.cached.multiplier], 100][CrunchUtils.llimitUnlock(p, "specials")]; },
        atk: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Driven") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) ? [ [1, 2.25][CrunchUtils.llimitUnlock(p, "specials")], 1, [1, 2.25][CrunchUtils.llimitUnlock(p, "specials")] ][p.cached.multiplier] : 1; },
        type: "type",
        status: function(p) { return p.delayed > 0 ? [ 1, [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")], [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] ][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            var effecttext = [["Additional Damage", "Status ATK", "Both Boosts"]["ATK Boost & Additional Damage", "Status ATK & Additional Damage", "All Boosts"]][CrunchUtils.llimitUnlock(p, "specials")];
            p.scope.notify({
                text: 'Using the ' + effecttext[n] + 'x Defense Reduction. To switch to the ' + effecttext[(n + 1) % levels.length] + 'x chain lock and the ' + (1-[0.2, 0.2, 0, 0][(n + 1) % levels.length])*100 + '% Defense Reduction, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2740: {
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Shooter")) ? 2.5 : 1; },
        type: "class"
    },
    2741: {
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Shooter")) ? 2.5 : 1; },
        type: "class"
    },
    2746: {
        atk: function(p) { return (p.unit.class.has("Shooter") || p.unit.class.has("Fighter")) && p.cached.enemyImmunities.delay ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return (p.unit.class.has("Shooter") || p.unit.class.has("Fighter")) && p.cached.enemyImmunities.delay ? 1.75 : 1; },
    },
    2747: {
        atk: function(p) { return (p.unit.class.has("Shooter") || p.unit.class.has("Fighter")) && p.cached.enemyImmunities.delay ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return (p.unit.class.has("Shooter") || p.unit.class.has("Fighter")) && p.cached.enemyImmunities.delay ? 1.75 : 1; },
    },
    2748: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2.75 ? 1 : 0);
            p.cached.multiplier = [2.75, 3][n];
            p.scope.notify({
                text: 'Using the ' + [2.75, 3][n] + 'x chain lock. To switch to the ' + [3, 2.75][n] + 'x chain lock, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2749: {
        atkbase: function(p) { return p.unit.class.has("Fighter") ? p.cached.multiplier2 : 0; },
        chain: function(p) { return p.cached.multiplier1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier1 : 1;
        },
        onActivation: function(p) {[CrunchUtils.llimitUnlock(p, "specials")]
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier1 = [[2.75, 3], [3.25, 3]][CrunchUtils.llimitUnlock(p, "specials")][n];
            p.cached.multiplier2 = [[0, 0], [1000, 700]][CrunchUtils.llimitUnlock(p, "specials")][n];
            p.scope.notify({
                text: 'Using the ' + [[2.75, 3], [3.25, 3]][CrunchUtils.llimitUnlock(p, "specials")][n] + 'x Chain Lock. To switch to the ' + [[2.75, 3], [3.25, 3]][CrunchUtils.llimitUnlock(p, "specials")][(n + 1) % levels.length] + 'x Chain Lock, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2750: {
        affinity: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Driven") ? 1.5 : 1; }
    },
    2751: {
        affinity: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Driven") ? 1.5 : 1; }
    },
    2752: {
        atk: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Shooter")) ? 1.3 : 1; },
        type: "class",
        chainAddition: function(p) { return 0.3; },
    },
    2757: {
        orb: function(p) { return (p.unit.class.has("Shooter") || p.unit.class.has("Striker") || p.unit.class.has("Fighter")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2.25][n] + 'x orb boost. To switch to the ' + [2.25, 1.75][n] + 'x orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2758: {
        orb: function(p) { return (p.unit.class.has("Shooter") || p.unit.class.has("Striker") || p.unit.class.has("Fighter")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [[1.75, 2.25],[2, 2.25]][CrunchUtils.llimitUnlock(p, "specials")];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Orb boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2759:{
        affinity: function(p) { return (p.unit.type == "PSY" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x Affinity boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x Affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2760: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2.5) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.captain.class.has("Fighter") || p.captain.class.has("Cerebral")) {
                p.cached.multiplier = 2.5;
            }
        },
    },
    2761: {
        orb: function(p) { return (p.unit.type == "PSY" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : p.cached.multiplier == 1.75 ? 2 : 0);
            p.cached.multiplier = [1.5, 1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75, 2][n] + 'x orb boost. To switch to the ' + [1.75, 2, 1.5][n] + 'x orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2762:{
        affinity: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            if (p.captain.class.has("Shooter")) {
                var n = (p.cached.multiplier == 1.75 ? 1 : 0);
                p.cached.multiplier = [1.75, 2][n];
                p.scope.notify({
                    text: 'Using the ' + [1.75, 2][n] + 'x Affinity boost. To switch to the ' + [2, 1.75][n] + 'x Affinity boost, disable and re-enable this special',
                    name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
                });
            }
            else p.cached.multiplier = 1;
        },
    },
    2763:{
        affinity: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            if (p.captain.class.has("Shooter")) {
                var levels = [[1.75, 2],[2.25, 2.5]][CrunchUtils.llimitUnlock(p, "specials")];
                var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
                p.cached.multiplier = levels[n];
                p.scope.notify({
                    text: 'Using the ' + levels[n] + 'x Affinity boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x Affinity boost, disable and re-enable this special',
                    name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
                });
            }
            else p.cached.multiplier = 1;
        },
    },
    2765: {
        affinity: function(p) { return p.unit.class.has("Cerebral") ? 1.75 : 1; }
    },
    2766: {
        //TODO
        hit: function(n,p) { return n > 12 ? 2 : 1; },
        onActivation: function(p) {
            p.scope.notify({
                text: 'This ability currently stacks with regular attack boosts when it does not in-game, so please keep that in mind.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2767: {
        //TODO
        hit: function(n,p) { return n > 12 ? 2 : 1; },
        onActivation: function(p) {
            p.scope.notify({
                text: 'This ability currently stacks with regular attack boosts when it does not in-game, so please keep that in mind.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2768: {
        def: function(p) { return 0; },
        atk: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        type: "condition",
        onActivation: function(p) {
            p.cached.multiplier = (p.colorCount.PSY + p.colorCount.QCK) >= 4 ? 1.75 : 1;
        },
    },
    2769: {
        def: function(p) { return 0; },
        atk: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        type: "condition",
        onActivation: function(p) {
            p.cached.multiplier = (p.colorCount.PSY + p.colorCount.QCK) >= 4 ? 1.75 : 1;
        },
    },
    2770: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "INT" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.colorCount.STR + p.colorCount.INT) >= 4 ? 1.75 : 1;
        },
    },
    2771: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "INT" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.colorCount.STR + p.colorCount.INT) >= 4 ? 1.75 : 1;
        },
    },
    2773: {
        def: function(p) { return 0; },
        ignoresImmunities: function(p) { return p.cached.percHP > 99 ? ['def'] : []; },
        atk: function(p) { return p.defenseDown ? 2 : 1; },
        type: "condition",
    },
    2774: {
        def: function(p) { return 0; },
        ignoresImmunities: function(p) { return p.cached.percHP > 99 ? ['def'] : []; },
        atk: function(p) { return p.defenseDown ? 2 : 1; },
        type: "condition",
    },
    2775: {
        atk: function(p) { return (p.unit.type == "QCK" || p.unit.type == "INT") ? 2 : 1; },
        orb: function(p) { return (p.unit.type == "QCK" || p.unit.type == "INT") ? 2 : 1; },
        type: "type",
    },
    2776: {
        atk: function(p) { return (p.unit.type == "QCK" || p.unit.type == "INT") ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        orb: function(p) { return (p.unit.type == "QCK" || p.unit.type == "INT") ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "type",
    },
    2777:{
        affinity: function(p) { return (p.unit.type == "QCK" || p.unit.type == "INT") ? 1.75 : 1; },
    },
    2778:{
        affinity: function(p) { return (p.unit.type == "QCK" || p.unit.type == "INT") ? 1.75 : 1; },
    },
    2781: {
        atk: function(p) { return (p.unit.type == "QCK" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2.25][n] + 'x ATK multiplier. To switch to the ' + [2.25, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2784: {
        def: function(p) { return .2; },
        affinity: function(p) { return p.unit.class.has("Shooter") ? [2, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        status: function(p) { return p.defenseDown ? [1, 1.75][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
    },
    2785: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 0.9 : 0.7);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 0.9 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2786: {
        delay: function(p) { return 2; },
    },
    2787: {
        delay: function(p) { return 2; },
    },
    2788: {
        chainAddition: function(p) { return 0.7; }
    },
    2789: {
        chainAddition: function(p) { return 0.7; }
    },
    2790: {
        affinity: function(p) { return (p.unit.type == "QCK" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x affinity boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2793: {
        delay: function(p) { return 1; },
        chainAddition: function(p) { return 0.7; },
        atk: function(p) { return p.delayed > 0 ? p.cached.multiplier : 1; },
        type: "condition",
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 1.75 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.75 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2794: {
        orb: function(p) { return (p.unit.type == "PSY" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Orb multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2798: {
        atk: function(p) { return 1.75; },
        type: "type",
        affinity: function(p) { return (p.unit.type == "PSY" || p.unit.type == "INT") ? 1.75 : 1; },
    },
    2799: {
        atk: function(p) { return (p.defenseDown && p.cached.multiplier != 0) ? 1.75 : 1; },
        type: "condition",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1 ? 2 : (p.cached.multiplier == 2 | p.cached.multiplier == undefined) ? 0 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['Chain Lock', 'Conditional boost', 'Conditional boost and Chain Lock'][n] + '. To switch to the ' + ['Conditional boost', 'Conditional boost and Chain Lock', 'Chain Lock'][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        chain: function(p) { return p.cached.multiplier != 1 ? 2.75 : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier != 1) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.75 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
    },
    2803: {
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2.5][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2.5][n] + 'x ATK multiplier. To switch to the ' + [2.5, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2804: {
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2.5][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2.5][n] + 'x ATK multiplier. To switch to the ' + [2.5, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2805: {
        delay: function(p) { return 2; },
    },
    2806: {
        delay: function(p) { return 2; },
    },
    2809: {
        affinity: function(p) { return p.unit.class.has("Free Spirit") ? 1.75 : 1; }
    },
    2810: {
        affinity: function(p) { return p.unit.class.has("Free Spirit") ? 1.75 : 1; }
    },
    2813: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse") ? 1.75 : 1; },
        type: "class"
    },
    2814: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var levels = [[1.75, 2],[2.25, 2.5]][CrunchUtils.llimitUnlock(p, "specials")];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ATK boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2816: {
        orb: function(p) { return 2.25; },
        onActivation: function(p) {
            p.scope.notify({
                text: 'This ability assumes the enemy has a Barrier or Percent Damage Reduction.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2817: {
        chainAddition: function(p) { return 1.1; },
        onActivation: function(p) {
            p.scope.notify({
                text: 'This ability assumes the enemy has a Barrier or Percent Damage Reduction.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2820: {
        affinity: function(p) { return (p.unit.type == "DEX" || p.unit.type == "QCK") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : p.cached.multiplier == 1.75 ? 2 : 0);
            p.cached.multiplier = [1.5, 1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75, 2][n] + 'x affinity boost. To switch to the ' + [1.75, 2, 1.5][n] + 'x affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2822: {
        staticMult: function(p) { return 35; }
    },
    2830: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class"
    },
    2832: {
        atk: function(p) { return 1.75; },
        type: "type",
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.captain != null ? p.captain.type == "DEX" ? 3 : 2.5 : 2.5;
        },
    },
    2838: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == .5 ? 1 : 0);
            if (p.colorCount.DEX + p.colorCount.INT >= 3) {
                p.cached.multiplier = [.5, .8][n];
            }
            else {
                p.cached.multiplier = 0;
            }
            p.scope.notify({
                text: 'Using the ' + [.5, .8][n] + 'x chain boost multiplier. To switch to the ' + [.8, .5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2839: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == .5 ? 1 : 0);
            if (p.colorCount.DEX + p.colorCount.INT >= 3) {
                p.cached.multiplier = [.5, .8][n];
            }
            else {
                p.cached.multiplier = 0;
            }
            p.scope.notify({
                text: 'Using the ' + [.5, .8][n] + 'x chain boost multiplier. To switch to the ' + [.8, .5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2840: {
        atk: function(p) { return !(p.unit.type == "DEX" || p.unit.type == "INT") ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : 0);
            p.cached.multiplier = [2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.25][n] + 'x ATK multiplier. To switch to the ' + [2, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2841: {
        atk: function(p) { return !(p.unit.type == "DEX" || p.unit.type == "INT") ? 1 : p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : 0);
            p.cached.multiplier = [2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.25][n] + 'x ATK multiplier. To switch to the ' + [2, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2844: {
        affinity: function(p) { return (p.unit.type == "DEX" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2845: {
        affinity: function(p) { return (p.unit.type == "DEX" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = 1.75;
            if (p.captain.class.has("Free Spirit") || p.captain.class.has("Cerebral") || p.captain.class.has("Powerhouse")) {
                p.cached.multiplier = 2;
            }
        },
    },
    2846: {
        rcv: function(p) { return 1.5; },
    },
    2848: {
        atk: function(p) { return (p.unit.type == "DEX" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x attack boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x attack boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2849: {
        affinity: function(p) { return (p.unit.type == "DEX" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : p.cached.multiplier == 1.75 ? 2 : 0);
            p.cached.multiplier = [1.5, 1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75, 2][n] + 'x affinity boost. To switch to the ' + [1.75, 2, 1.5][n] + 'x affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2853: {
        def: function(p) { return 0; },
        orb: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral")) ? 2 : 1; }
    },
    2854: {
        atk: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        type: "condition",
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.captain.class.has("Fighter") || p.captain.class.has("Free Spirit")) {
                p.cached.multiplier = 2;
            }
        },
    },
    2856: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2857: {
        affinity: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2858: {
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2863: {
        orb: function(p) { return p.cached.enemyImmunities.delay ? 2 : 1; },
    },
    2864: {
        orb: function(p) { return p.cached.enemyImmunities.delay ? 2 : 1; },
    },
    2868: {
        orb: function(p) { return [2, [2, 1, 2][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")]; },
        orbPlus: function(p) { return [0, [0, 0.3, 0.3][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: '' + ["Orb Boost", "Orb Buff", "Orb Boost and Buff"][n] + '. To ' + ["Orb Boost", "Orb Buff", "Orb Boost and Buff"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2870: {
        atk: function(p) { return 1.75; },
        type: "class",
        orb: function(p) { return 1.75; },
    },
    2871: {
        def: function(p) { return 0.2; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2.75) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        turnedOn: false,
        onActivation: function(p) {
            p.cached.multiplier = p.captain != null && (p.captain.type == "DEX" || p.captain.type == "STR") ? 2.75 : 1;
        },
    },
    2872: {
        delay: function(p) { return 1; },
        chainAddition: function(p) { return p.cached.multiplier; },
        turnedOn: false,
        onActivation: function(p) {
            p.cached.multiplier = p.captain != null && (p.captain.type == "INT" || p.captain.type == "STR") ? 0.5 : 0;
        },
    },
    2873: {
        atk: function(p) { return p.delayed > 0 ? 1.75 : 1; },
        type: "condition",
    },
    2874: {
        atk: function(p) { return p.defenseDown ? 1.75 : 1; },
        type: "condition"
    },
    2876:{
        def: function(p) { return 0.2; },
        atk: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        type: "condition",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : p.cached.multiplier == 1.75 ? 2 : 0);
            p.cached.multiplier = [1.5, 1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75, 2][n] + 'x Conditional boost. To switch to the ' + [1.75, 2, 1.5][n] + 'x Conditional boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2878:{
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x Orb boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2879: {
        turnedOn: false,
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            window.specials[2879].turnedOn = true;
            var levels = [[1.75, 2],[2, 2.25]][CrunchUtils.llimitUnlock(p, "specials")];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2879].turnedOn = false;
        }
    },
    2880: {
        atk: function(p) { return 2.25; },
        type: "type",
        warning: "Selected special (%name%) assumes that the enemy has ATK UP."
    },
    2881: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            if (p.colorCount.STR + p.colorCount.QCK + p.colorCount.PSY >= 3) {
                p.cached.multiplier = 2;
            }
            else {
                p.cached.multiplier = 1;
            }
        },
    },
    2883: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            if (p.colorCount.STR + p.colorCount.QCK + p.colorCount.PSY >= 6) {
                p.cached.multiplier = 2;
            }
            else {
                p.cached.multiplier = 1.75;
            }
        },
    },
    2885: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2885].turnedOn = true;
            p.scope.notify({
                text: 'Only affects captain damage if CP9 is your captain, use Friend Captain if you don\'t want the additional ATK boost due to Captain Swap',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2885].turnedOn = false;
        }
    },
    2886: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2886].turnedOn = true;
            p.scope.notify({
                text: 'Only affects captain damage if CP9 is your captain, use Friend Captain if you don\'t want the additional ATK boost due to Captain Swap',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2886].turnedOn = false;
        }
    },
    2887:{
        atk: function(p) { return ((p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK")) ? window.specials[2887].boostATK[p.sourceSlot] : 1; },
        type: "type",
        orb: function(p) { return ((p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK")) ? window.specials[2887].boostOrb[p.sourceSlot] : 1; },
        onActivation: function(p) {
            window.specials[2887].turnedOn = (p.slot < 2) ? true : false;
            window.specials[2887].switch = window.specials[2887].switch ? window.specials[2887].switch : [undefined, undefined, undefined, undefined, undefined, undefined];
            window.specials[2887].switch[p.slot] = window.specials[2887].switch[p.slot] != undefined ? (window.specials[2887].switch[p.slot] + 1) % 4 : 0;
            
            window.specials[2887].boostATK = window.specials[2887].boostATK ? window.specials[2887].boostATK : [undefined, undefined, undefined, undefined, undefined, undefined];
            window.specials[2887].boostOrb = window.specials[2887].boostOrb ? window.specials[2887].boostOrb : [undefined, undefined, undefined, undefined, undefined, undefined];
            window.specials[2887].boostATK[p.slot] = window.specials[2887].turnedOn ? [2, 1, 1, 1][window.specials[2887].switch[p.slot]] : 1;
            window.specials[2887].boostOrb[p.slot] = [1, 1.75, 2, 2.25][window.specials[2887].switch[p.slot]];
            
            //console.log(window.specials[2887].boostOrb);
            //console.log(window.specials[2887].boostATK);
            p.scope.notify({
                text: 'Using the ' + ['2x ATK Boost', '1.75x Orb Boost', '2x Orb Boost', '2.25x Orb Boost'][window.specials[2887].switch[p.slot]] + '. To switch to the ' + ['1.75x Orb Boost', '2x Orb Boost', '2.25x Orb Boost', '2x ATK Boost'][window.specials[2887].switch[p.slot]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2888:{
        affinity: function(p) { return ((p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK")) ? 1.75 : 1; },
    },
    2889: {
        chainAddition: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            if (p.colorCount.STR + p.colorCount.DEX + p.colorCount.QCK >= 3) {
                p.cached.multiplier = 0.8;
            }
            else {
                p.cached.multiplier = 0;
            }
        },
    },
    2890:{
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "PSY") ? 1.75 : 1; },
    },
    2892: {
        orb: function(p) { return (p.unit.type == "QCK" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2.25][n] + 'x orb boost. To switch to the ' + [2.25, 1.75][n] + 'x orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2893: {
        affinity: function(p) { return p.unit.type == "STR" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            if (p.captain.type == "STR") {
                p.cached.multiplier = 2;
            }
            else {
                p.cached.multiplier = 1;
            }
        },
    },
    2896: {
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Cerebral")) ? 2 : 1; },
        type: "class",
        orb: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Cerebral")) ? 2 : 1; },
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[2896].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Additionally affects damage if Rayleigh is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2896].turnedOn[p.slot] = false;
        }
    },
    2897: {
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Cerebral")) ? 2 : 1; },
        type: "class",
        orb: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Cerebral")) ? 2 : 1; },
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[2897].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Additionally affects damage if Rayleigh is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[2897].turnedOn[p.slot] = false;
        }
    },
    2900: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            if (p.colorCount.STR + p.colorCount.PSY >= 5) {
                p.cached.multiplier = 2;
            }
            else {
                p.cached.multiplier = 1;
            }
        },
    },
    2901: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            if (p.colorCount.STR + p.colorCount.PSY >= 5) {
                p.cached.multiplier = 2;
            }
            else {
                p.cached.multiplier = 1;
            }
        },
    },
    2902: {
        chainAddition: function(p) { return 0.6; }
    },
    2903: {
        chainAddition: function(p) { return 0.6; }
    },
    2904: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.75 : 1; }
    },
    2905: {
        delay: function(p) { return 1; },	
    },
    2908:{
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "PSY") ? 2 : 1; },
        type: "type",
    },
    2909: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
        chainAddition: function(p) { return [0.7, 1.1][CrunchUtils.llimitUnlock(p, "specials")]; },
        chainAdditionPlus: function(p) { return [0, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            p.cached.multiplier = p.percHP <= 50 ? 0.3 : 0;
        }
    },
    2910: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : p.cached.multiplier == 1.75 ? 2 : 0);
            p.cached.multiplier = [1.5, 1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75, 2][n] + 'x affinity boost. To switch to the ' + [1.75, 2, 1.5][n] + 'x affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2911: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2.75) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.captain != null && (p.captain.type == "STR" || p.captain.type == "PSY")) {
                p.cached.multiplier = 2.75;
            }
        },
    },
    2912:{
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x ATK boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2914: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            if (p.colorCount.STR + p.colorCount.PSY >= 4) {
                p.cached.multiplier = 2.25;
            }
            else {
                p.cached.multiplier = 1;
            }
        },
    },
    2915: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : p.cached.multiplier == 1.75 ? 2 : 0);
            p.cached.multiplier = [1.5, 1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75, 2][n] + 'x affinity boost. To switch to the ' + [1.75, 2, 1.5][n] + 'x affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2917: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    2918: {
        atk: function(p) { return p.unit.type == "STR" ? 1.75 : 1; },
        type: "type",
    },
    2920: {
        atk: function(p) { return p.cached.enemyImmunities.delay ? 2 : 1; },
        type: "type",
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "INT") && p.cached.enemyImmunities.delay ? 1.75 : 1; },
    },
    2922: {
        //TODO
        hit: function(n,p) { return (n > 12 && (p.unit.type == "INT")) ? 2.25 : 1; },
        onActivation: function(p) {
            p.scope.notify({
                text: 'This ability currently stacks with regular attack boosts when it does not in-game, so please keep that in mind.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2923: {
        //TODO
        hit: function(n,p) { return (n > 12 && (p.unit.type == "STR")) ? 2.25 : 1; },
        onActivation: function(p) {
            p.scope.notify({
                text: 'This ability currently stacks with regular attack boosts when it does not in-game, so please keep that in mind.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2924: {
        atk: function(p) { return 1.3; },
        type: "type"
    },
    2925: {
        affinity: function(p) { return 1.3; },
    },
    2926: {
        orb: function(p) { return 1.3; },
    },
    2929: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.75 : 1; },
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 2.25 : 1; },
    },
    2930: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.75 : 1; },
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 2.25 : 1; },
    },
    2931: {
        rcv: function(p) { return 1.5; },
    },
    2932: {
        orb: function(p) { return p.unit.type == "INT" ? 1.75 : 1; }
    },
    2933: {
        atk: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? 1.75 : 1; },
        type: "class"
    },
    2934: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "INT") ? 1.75 : 1; },
        type: "class"
    },
    2935: {
        atk: function(p) { return p.unit.type == "PSY" ? 1.75 : 1; },
        type: "class"
    },
    2936: {
        atk: function(p) { return p.unit.type == "PSY" ? 1.75 : 1; },
        type: "class"
    },
    2937: {
        orb: function(p) { return p.unit.type == "PSY" ? 1.75 : 1; }
    },
    2938: {
        orb: function(p) { return p.unit.type == "PSY" ? [1.75, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; }
    },
    2940: {
        paralysis: function(p) { return [0, 1][CrunchUtils.llimitUnlock(p, "specials")]; },
        status: function(p) { return p.paralysis ? [1, 2][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        warning: "Selected special (%name%) assumes that Monkey D. Luffy is on your crew."
    },
    2941: {
        delay: function(p) { return 2; },
    },
    2942: {
        delay: function(p) { return 2; },
        chainAddition: function(p) { return [0, 0.9][CrunchUtils.llimitUnlock(p, "specials")]; },
        warning: "Selected special (%name%) assumes that Monkey D. Luffy is on your crew."
    },
    2943: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.5 : 1;
        }
    },
    2944: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [2.5, 30][CrunchUtils.llimitUnlock(p, "specials")] : 1;
        }
    },
    2948: {
        defense: function(p) { return [1, 0.2][CrunchUtils.llimitUnlock(p, "specials")]; },
        status: function(p) { return p.defenseDown ? [1, 1.75][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        warning: "Selected special (%name%) assumes that Monkey D. Luffy is on your crew."
    },
    2949: {
        affinity: function(p) { return p.unit.type == "PSY" ? 1.75 : 1; },
    },
    2950: {
        affinity: function(p) { return p.unit.type == "PSY" ? [1.75, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        onActivation: function(p) {
            var levels = [1.75, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Affinity boost. To switch to the ' + levels[(n + 1) % levels.length] + ' Affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2952: {
        increaseDamageTaken: function(p) { return [1, 1.5][CrunchUtils.llimitUnlock(p, "specials")]; }
    },
    2953: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "INT") ? 2 : 1; }
    },
    2954: {
        orb: function(p) { return p.unit.class.has("Driven") ? [1, 2][CrunchUtils.llimitUnlock(p, "specials")] : 1; }
    },
    2955:{
        atk: function(p) { return window.specials[2955].turnedOn ? 1.75 : 1; },
        type: "type",
        chainAddition: function(p) { return window.specials[2955].turnedOn ? 0.65 : 0; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2955].turnedOn = p.captain != null && (p.captain.type == "STR" || p.captain.type == "INT");
        },
    },
    2956:{
        chainAddition: function(p) { return window.specials[2956].turnedOn ? 0.8 : 0; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2956].turnedOn = p.captain != null && (p.captain.type == "STR" || p.captain.type == "INT");
        },
    },
    2957: {
        orb: function(p) { return 2.5; }
    },
    2958: {
        orb: function(p) { return 2.5; }
    },
    2959:{
        affinity: function(p) { return (p.cached.multiplier != 1 && p.unit.type == "STR") ? 2 : 1; },
        type: "type",
        chainAddition: function(p) { return p.cached.multiplier != 0 ? 1.0 : 0; },
        turnedOn: false,
        onActivation: function(p) {
            var n = (p.cached.multiplier == 0 ? 1 : p.cached.multiplier == 1 ? 2 : 0);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['Affinity', 'Chain Boost', 'Affinity and Chain'][n] + ' boost. To switch to the ' + ['Chain Boost', 'Affinity and Chain', 'Affinity'][n] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2960:{
        affinity: function(p) { return p.unit.type == "STR" ? [[2, 1, 2, 2, 2], [2, 2.25, 1, 2, 2.25]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        type: "type",
        chainAddition: function(p) { return [[0, 1, 1, 1, 1], [0, 0, 1.3, 1.3, 1.3]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier]; },
        turnedOn: false,
        onActivation: function(p) {
            var levels = [[0, 1, 2],[0, 1, 2, 3, 4]][CrunchUtils.llimitUnlock(p, "specials")];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            var effecttext = [['Affinity', 'Chain Boost', 'Affinity and Chain']['Affinity', '2.25x Affinity', 'Chain Boost', 'Affinity and Chain', '2.25x Affinity and Chain']][CrunchUtils.llimitUnlock(p, "specials")];
            p.scope.notify({
                text: '' + effecttext[n] + ' boost. To ' + effecttext[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2961: {
        atk: function(p) { return 2; },
        type: "type",
        status: function(p) { return p.delayed > 0 ? 2 : 1; },
    },
    2962: {
        atk: function(p) { return 2; },
        type: "type",
        status: function(p) { return p.delayed > 0 ? 2 : 1; },
    },
    2963:{
        orb: function(p) { return (p.slot == p.sourceSlot) ? p.cached.multiplier : 1; },
        atk: function(p) { return (p.slot == p.sourceSlot) ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : p.cached.multiplier == 3 ? 2 : 0);
            p.cached.multiplier = [2, 3, 4][n];
            p.scope.notify({
                text: 'Using the ' + [2, 3, 4][n] + 'x Orb boost. To switch to the ' + [3, 4, 2][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2964:{
        orb: function(p) { return (p.slot == p.sourceSlot) ? p.cached.multiplier : 1; },
        atk: function(p) { return (p.slot == p.sourceSlot) ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : p.cached.multiplier == 3 ? 2 : 0);
            p.cached.multiplier = [2, 3, 4][n];
            p.scope.notify({
                text: 'Using the ' + [2, 3, 4][n] + 'x Orb boost. To switch to the ' + [3, 4, 2][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2971:{
        affinity: function(p) { return window.specials[2971].turnedOn ? (p.unit.type == "STR" || p.unit.type == "INT") ? 1.75 : 1 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2971].turnedOn = p.captain != null && (p.captain.type == "STR" || p.captain.type == "INT");
        },
    },
    2972:{
        affinity: function(p) { return window.specials[2972].turnedOn ? (p.unit.type == "STR" || p.unit.type == "INT") ? 1.75 : 1 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2972].turnedOn = p.captain != null && (p.captain.type == "STR" || p.captain.type == "INT");
        },
    },
    2973: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            if (p.colorCount.INT >= 5) {
                p.cached.multiplier = 3;
            }
            else {
                p.cached.multiplier = 2.5;
            }
        },
    },
    2974: {
        staticMult: function(p) { return 55; }
    },
    2975: {
        def: function(p) { return 0; }
    },
    2976: {
        chain: function(p) { return 2.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.75 : 1;
        },
    },
    2977: {
        orb: function(p) { return 2; }
    },
    2979: {
        atk: function(p) { return p.unit.type == "DEX" ? 2.5 : 1; },
        type: "class",
    },
    2980: {
        atk: function(p) { return p.unit.type == "DEX" ? 2.5 : 1; },
        type: "class",
    },
    2981: {
        staticMult: function(p) { return Math.min(p.damageCounter,50000) * 20; }
    },
    2982: {
        staticMult: function(p) { return Math.min(p.damageCounter,50000) * 20; }
    },
    2985: {
        orb: function(p) { return p.unit.type == "DEX" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain != null && p.captain.type == "DEX") ? 2.25 : 1;
        },
    },
    2986: {
        orb: function(p) { return p.unit.type == "DEX" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain != null && p.captain.type == "DEX") ? 2.25 : 1;
        },
    },
    2987: {
        chainAddition: function(p) {return p.cached.multiplier;},
        onActivation: function(p) {
            var n = ((p.cached.multiplier == 0.5 && p.colorCount.DEX >= 3) ? 1 : 0);
            p.cached.multiplier = [0.5, 1.1][n];
            p.scope.notify({
                text: 'Using the ' + [0.5, 1.1][n] + 'x chain addition. To switch to the ' + [1.1, 0.5][n] + 'x chain addition, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    2989: {
        affinity: function(p) { return p.unit.type == "DEX" ? 1.75 : 1; },
    },
    2990: {
        atk: function(p) { return p.delayed > 0 ? p.cached.multiplier : 1; },
        type: "condition",
        delay: function(p) { return p.cached.multiplier == 1.75 ? 2 : 0; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain != null && p.captain.type == "DEX") ? 1.75 : 1;
        },
    },
    2991: {
        chain: function(p) { return 3.25; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [3.25, [4, 6][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")] : 1;
        },
        tapTiming: function(p) { return [{ Good: 0, Great: 0, Perfect: 0 }, [{ Good: 0, Great: 0, Perfect: 0 },{ Good: 0.3, Great: 0.2, Perfect: 0 }][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: 'Using ' + ["Stage 1", "Stage 2"][levels[n]] + '. To switch to ' + ["Stage 1", "Stage 2"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2992:{
        affinity: function(p) { return p.unit.type == "DEX" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x Affinity boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x Affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2993:{
        orb: function(p) { return p.unit.type == "DEX" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x Orb boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2995: {
        turnedOn: false,
        onActivation: function(p) {
            window.specials[2995].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[2995].turnedOn = false;
        }
    },
    2996:{
        affinity: function(p) { return ((p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "INT")) ? window.specials[2996].boostAffinity[p.sourceSlot] : 1; },
        atk: function(p) { return ((p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "INT")) ? window.specials[2996].boostATK[p.sourceSlot] : 1; },
        type: "type",
        onActivation: function(p) {
            window.specials[2996].turnedOn = (p.slot < 2) ? true : false;
            window.specials[2996].switch = window.specials[2996].switch ? window.specials[2996].switch : [undefined, undefined, undefined, undefined, undefined, undefined];
            window.specials[2996].switch[p.slot] = window.specials[2996].switch[p.slot] != undefined ? (window.specials[2996].switch[p.slot] + 1) % 4 : 0;
            
            window.specials[2996].boostAffinity = window.specials[2996].boostAffinity ? window.specials[2996].boostAffinity : [undefined, undefined, undefined, undefined, undefined, undefined];
            window.specials[2996].boostATK = window.specials[2996].boostATK ? window.specials[2996].boostATK : [undefined, undefined, undefined, undefined, undefined, undefined];
            window.specials[2996].boostAffinity[p.slot] = window.specials[2996].turnedOn ? [2.25, 1, 1, 1][window.specials[2996].switch[p.slot]] : 1;
            window.specials[2996].boostATK[p.slot] = [1, 1.75, 2, 2.25][window.specials[2996].switch[p.slot]];
            
            //console.log(window.specials[2996].boostATK);
            //console.log(window.specials[2996].boostAffinity);
            p.scope.notify({
                text: 'Using the ' + ['2.25x Affinity Boost', '1.75x ATK Boost', '2x ATK Boost', '2.25x ATK Boost'][window.specials[2996].switch[p.slot]] + '. To switch to the ' + ['1.75x ATK Boost', '2x ATK Boost', '2.25x ATK Boost', '2.25x Affinity Boost'][window.specials[2996].switch[p.slot]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    2997: {
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = (p.colorCount.STR + p.colorCount.DEX + p.colorCount.INT >= 3) ? 2 : 1;
        },
    },
    2998: {
        chain: function(p) { return 2.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.75 : 1;
        }
    },
    3001: {
        atk: function(p) { return (p.unit.class.has("Powerhouse")) ? 1.75 : 1; },
        type: "class"
    },
    3002:{
        orb: function(p) { return p.unit.class.has("Powerhouse") ? 1.75 : 1; },
    },
    3004: {
        affinity: function(p) { return p.unit.cost <= 40 ? 2 : 1; },
    },
    3006: {
        atk: function(p) { return (p.unit.type == "QCK" && p.cached.multiplier != 1) ? 2.5 : 1; },
        type: "class",
        orb: function(p) { return (p.unit.type == "QCK" && p.cached.multiplier != 0) ? 2.5 : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 0 ? 1 : p.cached.multiplier == 1 ? 2 : 0);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['ATK', 'Change Action Orb', 'ATK and Change Action Orb'][n] + ' boost. To switch to the ' + ['Orb', 'ATK and Orb', 'ATK'][n] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3007: {
        atk: function(p) { return (p.unit.type == "QCK" && p.cached.multiplier != 1) ? 2.5 : 1; },
        type: "class",
        orb: function(p) { return (p.unit.type == "QCK" && p.cached.multiplier != 0) ? 2.5 : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 0 ? 1 : p.cached.multiplier == 1 ? 2 : 0);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['ATK', 'Change Action Orb', 'ATK and Change Action Orb'][n] + ' boost. To switch to the ' + ['Orb', 'ATK and Orb', 'ATK'][n] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3008: {
        onActivation: function(p) {
            ++p.scope.tdata.sugarToysSpecialEnabled;
        },
        onDeactivation: function(p) {
            --p.scope.tdata.sugarToysSpecialEnabled;
        },
    },
    3009: {
        onActivation: function(p) {
            ++p.scope.tdata.sugarToysSpecialEnabled;
        },
        onDeactivation: function(p) {
            --p.scope.tdata.sugarToysSpecialEnabled;
        },
    },
    3010: {
        chainAddition: function(p) { return 0.7; }
    },
    3011: {
        chainAddition: function(p) { return 0.7; }
    },
    3012: {
        atk: function(p) { return p.unit.type == "QCK" ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3013: {
        atk: function(p) { return p.unit.type == "QCK" ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x ATK multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3014: {
        affinity: function(p) { return (p.unit.type == "QCK" || p.unit.type == "INT") ? 1.75 : 1; },
        atk: function(p) { return (p.unit.type == "QCK" || p.unit.type == "INT") ? 1.75 : 1; },
        type: "type",
    },
    3015: {
        affinity: function(p) { return (p.unit.type == "QCK" || p.unit.type == "INT") ? 1.75 : 1; },
        atk: function(p) { return (p.unit.type == "QCK" || p.unit.type == "INT") ? 1.75 : 1; },
        type: "type",
    },
    3016: {
        orb: function(p) { return 1.75; },
    },
    3018: {
        orb: function(p) { return [2, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")]; },
        chain: function(p) { return [3, 3.5][CrunchUtils.llimitUnlock(p, "specials")]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [3, 3.5][CrunchUtils.llimitUnlock(p, "specials")] : 1;
        },
        onActivation: function(p) {
            var levels = [2, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3019: {
        affinity: function(p) { return (p.unit.type == "QCK") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : p.cached.multiplier == 1.75 ? 2 : 0);
            p.cached.multiplier = [1.5, 1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75, 2][n] + 'x affinity boost. To switch to the ' + [1.75, 2, 1.5][n] + 'x affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3020:{
        orb: function(p) { return (p.unit.type == "QCK") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x Orb boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3022: {
        poison: function(p) { return 99; },
        status: function(p) { return window.specials[3022].turnedOn && p.poisoned ? 1.75 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[3022].turnedOn = p.captain != null && (p.captain.type == "QCK" || p.captain.type == "INT");
        },
    },
    3026: {
        orb: function(p) { return (p.cached.orbmultiplier) ? 2.25 : 1; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2.5) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 35 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.captain) if (p.captain.class.has("Fighter") || p.captain.class.has("Striker") || p.captain.class.has("Slasher") || p.captain.class.has("Shooter")) p.cached.orbmultiplier = true;
            if (p.captain) if (p.captain.class.has("Free Spirit") || p.captain.class.has("Cerebral") || p.captain.class.has("Powerhouse") || p.captain.class.has("Driven")) p.cached.multiplier = 2.5;
        },
        onDeactivation: function(p) {
            p.cached.orbmultiplier = false;
            p.cached.multiplier = 1;
        },
    },
    3027: {
        orb: function(p) { return (p.cached.orbmultiplier) ? 2.25 : 1; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2.5) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 35 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.captain) if (p.captain.class.has("Fighter") || p.captain.class.has("Striker") || p.captain.class.has("Slasher") || p.captain.class.has("Shooter")) p.cached.orbmultiplier = true;
            if (p.captain) if (p.captain.class.has("Free Spirit") || p.captain.class.has("Cerebral") || p.captain.class.has("Powerhouse") || p.captain.class.has("Driven")) p.cached.multiplier = 2.5;
        },
        onDeactivation: function(p) {
            p.cached.orbmultiplier = false;
            p.cached.multiplier = 1;
        },
    },
    3028: {
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.captain) if (p.captain.class.has("Fighter") || p.captain.class.has("Free Spirit")) p.cached.multiplier = 2;
        },
        onDeactivation: function(p) {
            p.cached.multiplier = 1;
        },
    },
    3029: {
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.captain) if (p.captain.class.has("Fighter") || p.captain.class.has("Free Spirit")) p.cached.multiplier = 2;
        },
        onDeactivation: function(p) {
            p.cached.multiplier = 1;
        },
    },
    3030: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = 0;
            if (p.captain) if (p.captain.class.has("Free Spirit") || p.captain.class.has("Striker")) p.cached.multiplier = 1;
        },
        onDeactivation: function(p) {
            p.cached.multiplier = 0;
        },
    },
    3031: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = 0;
            if (p.captain) if (p.captain.class.has("Free Spirit") || p.captain.class.has("Striker")) p.cached.multiplier = 1;
        },
        onDeactivation: function(p) {
            p.cached.multiplier = 0;
        },
    },
    3033: {
        orb: function(p) { return p.unit.type == "STR" ? 1.75 : 1; }
    },
    3034: {
        atk: function(p) { return p.unit.type == "DEX" ? 1.75 : 1; },
        type: "class"
    },
    3039: {
        affinity: function(p) { return 1.75; },
    },
    3040: {
        affinity: function(p) { return 1.75; },
    },
    3043:{
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Orb boost. To switch to the ' + [2, 1.75][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3044:{
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Orb boost. To switch to the ' + [2, 1.75][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3045: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2.75) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : Infinity;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.colorCount.PSY >= 3) {
                p.cached.multiplier = 2.75;
            }
        },
    },
    3047: {
        chainAddition: function(p) { return 0.8; }
    },
    3048: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "PSY") ? [p.cached.multiplier, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "type",
        chain: function(p) { return [1, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [1, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")] != 1 ? p.cached.multiplier : Infinity : Infinity;
        },
        turnedOn: false,
        onActivation: function(p) {
            var levels = [[2, 2.25], [3.75, 1]][CrunchUtils.llimitUnlock(p, "specials")];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            effecttext = [["2x ATK Boost", "2.25x ATK Boost"],["Chain Lock", "Chain Lock Disabled"]][CrunchUtils.llimitUnlock(p, "specials")];
            p.scope.notify({
                text: 'Using the ' + effecttext[n] + '. To switch to the ' + effecttext[[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
            window.specials[3048].turnedOn = p.cached.multiplier == 2.25 || CrunchUtils.llimitUnlock(p, "specials") > 0 ? true : false;
        },
        onDeactivation: function(p) {
            window.specials[3048].turnedOn = false;
        },
    },
    3050: {
        orb: function(p) { return 1.75; },
    },
    3049: {
        atk: function(p) { return (p.unit.class.has("Driven") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) ? 2 : 1; },
        type: "class"
    },
    3051: {
        affinity: function(p) { return p.cached.enemyImmunities.delay && p.unit.class.has("Free Spirit") ? 2.25 : 1; },
    },
    3056: {
        affinity: function(p) { return !(p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral")) ? 1 : p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Affinity multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3057: {
        affinity: function(p) { return !(p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral")) ? 1 : p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Affinity multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3058: {
        def: function(p) { return 0.2; },
        atk: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        type: "condition",
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.FreeSpirit >= 5 ? 1.75 : 1;
        }
    },
    3059: {
        def: function(p) { return 0.2; },
        atk: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        type: "condition",
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.FreeSpirit >= 5 ? 1.75 : 1;
        }
    },
    3061: {
        chainAddition: function(p) { return 0.7; }
    },
    3063: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.75 : 1; },
        type: "class"
    },
    3066: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "PSY") ? 1.75 : 1; },
    },
    3067: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "PSY") ? 1.75 : 1; },
    },
    3070: {
        orb: function(p) { return p.unit.type == "PSY" ? p.cached.multiplier : 1; },
        turnedOn: [false,false,false,false,false,false],
        onActivation: function(p) {
            window.specials[3070].turnedOn[p.slot] = true;
            var n = (p.cached.multiplier == 2 ? 1 : 0);
            p.cached.multiplier = [2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.25][n] + 'x Orb Boost. To switch to the ' + [2, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[3070].turnedOn[p.slot] = false;
        }
    },
    3071: {
        orb: function(p) { return p.unit.type == "PSY" ? p.cached.multiplier : 1; },
        turnedOn: [false,false,false,false,false,false],
        onActivation: function(p) {
            window.specials[3071].turnedOn[p.slot] = true;
            var n = (p.cached.multiplier == 2 ? 1 : 0);
            p.cached.multiplier = [2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.25][n] + 'x Orb Boost. To switch to the ' + [2, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[3071].turnedOn[p.slot] = false;
        }
    },
    3072: {
        affinity: function(p) { return p.unit.type == "STR" ? 2 : 1; },
        atk: function(p) { return p.unit.type == "STR" ? 2 : 1; },
        type: "type",
        chainAddition: function(p) { return 1.1; }
    },
    3073: {
        affinity: function(p) { return p.unit.type == "STR" ? 2 : 1; },
        atk: function(p) { return p.unit.type == "STR" ? 2 : 1; },
        type: "type",
        chainAddition: function(p) { return 1.1; }
    },
    3074: {
        affinity: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Affinity multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3075: {
        affinity: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Affinity multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3076: {
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Affinity multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3077: {
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Affinity multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3078: {
        atk: function(p) { return (p.delayed > 0 && p.cached.multiplier != 0) ? 1.75 : 1; },
        type: "condition",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1 ? 2 : (p.cached.multiplier == 2 | p.cached.multiplier == undefined) ? 0 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['Delay', 'Conditional boost', 'Conditional boost and Delay'][n] + '. To switch to the ' + ['Conditional boost', 'Conditional boost and Delay', 'Delay'][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        delay: function(p) { return p.cached.multiplier != 1 ? 1 : 0; },
    },
    3079: {
        atk: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Driven") ? [2, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class"
    },
    3080:{
        orb: function(p) { return window.specials[3080].turnedOn ? 1.75 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[3080].turnedOn = p.captain != null && (p.captain.type == "STR" || p.captain.type == "PSY");
        },
    },
    3081:{
        atk: function(p) { return window.specials[3081].turnedOn ? 1.75 : 1; },
        type: "class",
        turnedOn: false,
        onActivation: function(p) {
            window.specials[3081].turnedOn = p.captain != null && (p.captain.type == "STR" || p.captain.type == "PSY");
        },
    },
    3082: {
        atk: function(p) { return p.delayed > 0 ? 1.75 : 1; },
        type: "condition",
    },
    3083: {
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2 : 1.75);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.75 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3085:{
        orb: function(p) { return window.specials[3085].turnedOn ? 2 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[3085].turnedOn = p.captain != null && (p.captain.type == "STR");
        },
    },
    3088: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : p.cached.multiplier == 1.75 ? 2 : 0);
            p.cached.multiplier = [1.5, 1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 1.75, 2][n] + 'x orb boost. To switch to the ' + [1.75, 2, 1.5][n] + 'x orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3089:{
        def: function(p) { return 0; },
        atk: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        type: "condition",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x Conditional boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x Conditional boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3090: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 1.75 : 1; },
        type: "class"
    },
    3091: {
        atk: function(p) { return p.unit.type == "STR" ? 1.75 : 1; },
        type: "class"
    },
    3092: {
        def: function(p) { return 0; },
    },
    3094: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "PSY" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2 : 1.75);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3095: {
        orb: function(p) { return p.unit.type == "DEX" ? 1.75 : 1; },
    },
    3097: {
        orb: function(p) { return (p.captain.class.has("Fighter") || p.captain.class.has("Cerebral")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Fighter") || p.captain.class.has("Cerebral")) ? 2.25 : 1;
        }
    },
    3099: {
        atk: function(p) { return p.unit.type == "INT" ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2.25 ? 1 : 0);
            p.cached.multiplier = [2.25, 2.5][n];
            p.scope.notify({
                text: 'Using the ' + [2.25, 2.5][n] + 'x ATK multiplier. To switch to the ' + [2.5, 2.25][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3100: {
        atk: function(p) { return p.unit.type == "INT" ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2.25 ? 1 : 0);
            p.cached.multiplier = [2.25, 2.5][n];
            p.scope.notify({
                text: 'Using the ' + [2.25, 2.5][n] + 'x ATK multiplier. To switch to the ' + [2.5, 2.25][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3101: {
        orb: function(p) { return p.unit.type == "INT" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2.25 ? 1 : 0);
            p.cached.multiplier = [2.25, 2.5][n];
            p.scope.notify({
                text: 'Using the ' + [2.25, 2.5][n] + 'x Orb multiplier. To switch to the ' + [2.5, 2.25][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3102: {
        orb: function(p) { return p.unit.type == "INT" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2.25 ? 1 : 0);
            p.cached.multiplier = [2.25, 2.5][n];
            p.scope.notify({
                text: 'Using the ' + [2.25, 2.5][n] + 'x Orb multiplier. To switch to the ' + [2.5, 2.25][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3107: {
        def: function(p) { return 0.2; },
        atk: function(p) { return p.defenseDown ? 1.75 : 1; },
        type: "condition",
    },
    3108: {
        affinity: function(p) { return p.unit.type == "INT" ? 2 : 1; },
    },
    3110: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 3 ? 1 : p.cached.multiplier == 3.25 ? 2 : 0);
            p.cached.multiplier = [3, 3.25, 3.5][n];
            p.scope.notify({
                text: 'Using the ' + [3, 3.25, 3.5][n] + 'x Chain Lock. To switch to the ' + [3.25, 3.5, 3][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3112:{
        affinity: function(p) { return p.unit.type == "INT" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : p.cached.multiplier == 2 ? 2 : 0);
            p.cached.multiplier = [1.75, 2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2, 2.25][n] + 'x ATK boost. To switch to the ' + [2, 2.25, 1.75][n] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3114: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2.5 ? 1 : p.cached.multiplier == 2.75 ? 2 : 0);
            p.cached.multiplier = [2.5, 2.75, 3][n];
            p.scope.notify({
                text: 'Using the ' + ['2.5x', '2.75x', '3x'][n] + ' chain lock. To switch to the ' + ['2.5x', '2.75x', '3x'][n] + ' chain lock, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3117: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Cerebral") ? 2 : 1; },
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = 0;
            if (p.colorCount.INT >= 4) {
                p.cached.multiplier = 1;
            }
        },
    },
    3118: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Cerebral") ? 2 : 1; },
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = 0;
            if (p.colorCount.INT >= 4) {
                p.cached.multiplier = 1;
            }
        },
    },
    3120: {
        orb: function(p) { return 2; },
    },
    3122: {
        atk: function(p) { return 2; },
        type: "type",
    },
    3125: {
        affinity: function(p) { return 1.75; }
    },
    3126: {
        atk: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Powerhouse")) ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Orb multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3127: {
        atk: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Powerhouse")) ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Orb multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3128: {
        orb: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Powerhouse")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Orb multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3129: {
        orb: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Powerhouse")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Orb multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3130: {
        orb: function(p) { return p.unit.class.has("Free Spirit") ? 1.75 : 1; },
    },
    3138: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        },
    },
    3139: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        },
    },
    3140: {
        orb: function(p) { return 2; },
    },
    3141: {
        orb: function(p) { return 2; },
    },
    3142: {
        staticMult: function(p) { return 70; }
    },
    3143: {
        affinity: function(p) { return 1.75; }
    },
    3144: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "INT" ? 1.75 : 1; }
    },
    3145: {
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : 0);
            p.cached.multiplier = [2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.25][n] + 'x Orb boost. To switch to the ' + [2.25, 2][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3146: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Affinity multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3147: {
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2.25][n] + 'x Orb multiplier. To switch to the ' + [2.25, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3148: {
        chain: function(p) { return 2.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.75 : 1;
        },
    },
    3150: {
        atk: function(p) { return [ 2, 1, 1, 2, 1, 2, 2 ][p.cached.multiplier]; },
        type: "class",
        affinity: function(p) { return [ 1, 1.75, 1, 1.75, 1.75, 1, 1.75 ][p.cached.multiplier]; },
        orb: function(p) { return [ 1, 1, 1.75, 1, 1.75, 1.75, 1.75 ][p.cached.multiplier]; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == undefined ? 0 : (p.cached.multiplier + 1) % 7);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + [ 2, 1, 1, 2, 1, 2, 2 ][n] + 'x ATK boost, the ' + [ 1, 1.75, 1, 1.75, 1.75, 1, 1.75 ][n] + 'x Affinity boost and the ' + [ 1, 1, 1.75, 1, 1.75, 1.75, 1.75 ][n] + 'x Orb boost. To switch disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3151: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = 0;
            if (p.captain.class.has("Fighter") || p.captain.class.has("Slasher") || p.captain.class.has("Free Spirit")) {
                p.cached.multiplier = 1;
            }
        },
    },
    3152: {
        orb: function(p) { return p.cached.enemyImmunities.delay && (p.unit.class.has("Powerhouse") || p.unit.class.has("Slasher")) ? 2.25 : 1; },
    },
    3156: {
        atk: function(p) { return [1, 2.25][CrunchUtils.llimitUnlock(p, "specials")]; },
        type: "type",
    },
    3156: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? p.cached.multiplier != 1 ? 2.25 : 1 : 1; },
        type: "type",
        def: function(p) { return 0; },
        status: function(p) { return p.defenseDown > 0 ? p.cached.multiplier != 0 ? 1.75 : 1 : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Status", "ATK and Status"][n] + ' boost. To ' + ["ATK", "Status", "ATK and Status"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3157: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? p.cached.multiplier != 1 ? 2.25 : 1 : 1; },
        type: "type",
        def: function(p) { return 0; },
        status: function(p) { return p.defenseDown > 0 ? p.cached.multiplier != 0 ? 1.75 : 1 : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Status", "ATK and Status"][n] + ' boost. To ' + ["ATK", "Status", "ATK and Status"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3160: {
        poison: function(p) { return 99; },
        atk: function(p) { return p.poisoned ? 1.5 : 1; },
        type: "condition",
    },
    3161: {
        orb: function(p) { return 1.5; },
    },
    3162: {
        atk: function(p) { return 1.5; },
        type: "type",
    },
    3167: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") ? 1.75 : 1; }
    },
    3168: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") ? 1.75 : 1; }
    },
    3171: {
        atk: function(p) { return 1.75; },
        type: "type",
    },
    3172: {
        orb: function(p) { return 1.75; },
    },
    3173: {
        chain: function(p) { return 2.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.75 : 1;
        },
    },
    3174: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.class.has("Free Spirit") || p.unit.class.has("Slasher")) ? 2.5 : 1; },
    },
    3175: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.class.has("Free Spirit") || p.unit.class.has("Slasher")) ? 2.5 : 1; },
    },
    3176: {
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            var levels = [2, 2.5, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ATK boost. To switch to the ' + levels[(n + 1) % levels.length] + ' ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3177: {
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            var levels = [2, 2.5, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ATK boost. To switch to the ' + levels[(n + 1) % levels.length] + ' ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3178: {
        atk: function(p) { return p.delayed > 0 ? 2 : 1; },
        type: "condition",
    },
    3179: {
        atk: function(p) { return p.delayed > 0 ? 2 : 1; },
        type: "condition",
    },
    3180: {
        delay: function(p) { return 1; },
        chainAddition: function(p) { return 0.8; }
    },
    3181: {
        delay: function(p) { return 1; },
        chainAddition: function(p) { return 0.8; }
    },
    3184: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "PSY" ? 2 : 1; }
    },
    3185: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "PSY" ? 2 : 1; }
    },
    3186: {
        chain: function(p) { return 1.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 30 : 1;
        },
    },
    3187: {
        chainAddition: function(p) { return 0.7; }
    },
    3188: {
        atk: function(p) { return p.cached.multiplier1; },
        type: "type",
        orb: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            p.cached.multiplier1 = p.colorCount.STR >= 4 ? 1.75 : 1;
            p.cached.multiplier2 = p.colorCount.PSY >= 4 ? 1.75 : 1;
        },
    },
    3189: {
        atk: function(p) { return (p.defenseDown && p.cached.multiplier != 0) ? 2 : 1; },
        type: "condition",
        def: function(p) { return p.cached.multiplier != 1 ? 0 : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1 ? 2 : (p.cached.multiplier == 2 | p.cached.multiplier == undefined) ? 0 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['Defense Reduction', 'Conditional boost', 'Conditional boost and Defense Reduction'][n] + '. To switch to the ' + ['Conditional boost', 'Conditional boost and Defense Reduction', 'Defense Reduction'][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3190: {
        atk: function(p) { return 1.75; },
        type: "type",
    },
    3191: {
        def: function(p) { return 0; },
        atk: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        type: "condition",
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.5 ? 1 : 0);
            p.cached.multiplier = [1.5, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.5, 2][n] + 'x Conditional multiplier. To switch to the ' + [2, 1.5][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3192: {
        affinity: function(p) { return 1.75; }
    },
    3194: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.5 : 1; },
        type: "class"
    },
    3195: {
        delay: function(p) { return 1; },
    },
    3196: {
        atk: function(p) { return p.slot == p.sourceSlot ? 2 : 1; },
        type: "type"
    },
    3197: {
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.captain) if (p.captain.class.has("Fighter") || p.captain.class.has("Striker") || p.captain.class.has("Slasher") || p.captain.class.has("Shooter")) p.cached.multiplier = 1.75;
        },
        onDeactivation: function(p) {
            p.cached.multiplier = 1;
        },
    },
    3198:{
        affinity: function(p) { return window.specials[3198].turnedOn ? 1.75 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[3198].turnedOn = p.captain != null && (p.captain.type == "STR" || p.captain.type == "QCK");
        },
    },
    3199:{
        orb: function(p) { return window.specials[3199].turnedOn ? 2 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[3199].turnedOn = p.captain != null && (p.captain.type == "STR" || p.captain.type == "INT");
        },
    },
    3201:{
        affinity: function(p) { return 1.5; },
    },
    3202: {
        atk: function(p) { return p.unit.class.has("Slasher") ? [2.25, [2.25, 2.5, 1, 2.25, 2.5][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        affinity: function(p) { return p.unit.class.has("Slasher") ? [1, [1, 1, 2, 2, 2][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: 'Using the ' + ["ATK", "Strong ATK", "Affinity", "ATK & Affinity", "Strong ATK & Affinity"][levels[n]] + ' boost. To switch to the ' + ["ATK", "Strong ATK", "Affinity", "ATK & Affinity", "Strong ATK & Affinity"][levels[(n + 1) % levels.length]] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3206: {
        atk: function(p) { return p.unit.class.has("Driven") ? 1.75 : 1; },
        type: "class"
    },
    3207: {
        atk: function(p) { return 2; },
        type: "type",
    },
    3209: {
        atk: function(p) { return p.cached.multiplier == 0 ? 1.75 : 1; },
        orb: function(p) { return p.cached.multiplier == 1 ? 2 : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK", "ORB"][levels[n]] + ' boost. To switch to the ' + ["ATK", "ORB"][levels[(n + 1) % levels.length]] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3210: {
        affinity: function(p) { return 1.75; },
        chainAddition: function(p) { return p.cached.multiplier1; },
        chain: function(p) { return p.cached.multiplier2; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier2 != 1) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier2 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier1 = p.colorCount.PSY >= 3 ? 0.75 : 0;
            p.cached.multiplier2 = (p.colorCount.QCK + p.colorCount.DEX + p.colorCount.INT) >= 3 ? 3 : 1;
        },
    },
    3211: {
        atk: function(p) { return p.unit.class.has("Fighter") ? [2.25, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
        chainMultiplication: function(p) { return [1, [1.2, 1][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: 'Using the ' + ["Chain Multiplier", "No Chain Multiplier"][levels[n]] + ' boost. To switch to the ' + ["Chain Multiplier", "No Chain Multiplier"][levels[(n + 1) % levels.length]] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3212: {
        atk: function(p) { return p.cached.enemyImmunities.delay && (p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit")) ? 2.25 : 1; },
        type: "class",
    },
    3213: {
        orb: function(p) { return 2; },
    },
    3214: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var levels = [2.75, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + ' chain lock. To switch to the ' + levels[(n + 1) % levels.length] + ' chain lock, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3215: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "PSY" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [1.75, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + ' chain lock. To switch to the ' + levels[(n + 1) % levels.length] + ' chain lock, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3218: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = 0;
            if (p.captain.class.has("Slasher") || p.captain.class.has("Cerebral")) {
                p.cached.multiplier = 1;
            }
        },
    },
    3219: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = 0;
            if (p.captain.class.has("Slasher") || p.captain.class.has("Cerebral")) {
                p.cached.multiplier = 1;
            }
        },
    },
    3220: {
        affinity: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2 : 1.75);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3221: {
        affinity: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2 : 1.75);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3222: {
        atk: function(p) { return p.unit.type == "QCK" || p.unit.type == "DEX" ? 1.75 : 1; },
        type: "type",
    },
    3223: {
        affinity: function(p) { return p.unit.type == "QCK" || p.unit.type == "DEX" ? 1.75 : 1; },
    },
    3224: {
        orb: function(p) { return p.unit.type == "DEX" ? p.cached.multiplier : 1; },
        onActivation: function(p) { p.cached.multiplier = p.damageCounter >= 20000 ? 2.75 : 2.5; }
    },
    3225: {
        orb: function(p) { return p.unit.type == "DEX" ? p.cached.multiplier : 1; },
        onActivation: function(p) { p.cached.multiplier = p.damageCounter >= 20000 ? 2.75 : 2.5; }
    },
    3226: {
        increaseDamageTaken: function(p) { return 2; },
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[3226].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Only affects damage if Kaido is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[3226].turnedOn[p.slot] = false;
        }
    },
    3227: {
        increaseDamageTaken: function(p) { return 2; },
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[3227].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Only affects damage if Kaido is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[3227].turnedOn[p.slot] = false;
        }
    },
    3228: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    3229: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    3233: {
        atk: function(p) { return p.cached.multiplier == 1 ? 1.75 : 1; },
        type: "type",
        orb: function(p) { return p.cached.multiplier == 0 ? 1.75 : 1; },
        onActivation: function(p) {
            var levels = ['Orb Boost', 'ATK Boost'];
            var n = (p.cached.multiplier == undefined ? 0 : (p.cached.multiplier + 1) % 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + levels[n] + '. To switch to the ' + levels[(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3235: {
        delay: function(p) { return 2; },
        def: function(p) { return 0; },
        atk: function(p) { return [p.defenseDown ? 2 : 1, p.delayed > 0 ? 2 : 1][p.cached.multiplier]; },
        type: "condition",
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["DEF Down", "Delay"][levels[n]] + ' boost. To switch to the ' + ["DEF Down", "Delay"][levels[(n + 1) % levels.length]] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3236: {
        atk: function(p) { return p.unit.type == "QCK" || p.unit.type == "DEX" ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [1.75, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ATK boost. To switch to the ' + levels[(n + 1) % levels.length] + ' ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3237: {
        affinity: function(p) { return p.unit.type == "QCK" || p.unit.type == "DEX" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [1.75, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Affinity boost. To switch to the ' + levels[(n + 1) % levels.length] + ' Affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3238: {
        orb: function(p) { return 1.75; },
    },
    3240: {
        orb: function(p) { return p.unit.class.has("Slasher") ? [2.25, [2.25, 2.5, 1, 2.25, 2.5][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        atkbase: function(p) { return p.unit.class.has("Slasher") ? [0, [0, 0, 1000, 1000, 1000][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: 'Using the ' + ["Orb", "Strong Orb", "Base ATK", "Orb & Base ATK", "Strong Orb & Base ATK"][levels[n]] + ' boost. To switch to the ' + ["Orb", "Strong Orb", "Base ATK", "Orb & Base ATK", "Strong Orb & Base ATK"][levels[(n + 1) % levels.length]] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3241: {
        //TODO
        hit: function(n,p) { return (n > 12 && (p.unit.type == "QCK")) ? 2.25 : 1; },
        onActivation: function(p) {
            p.scope.notify({
                text: 'This ability currently stacks with regular attack boosts when it does not in-game, so please keep that in mind.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3242: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.25 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.25 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3244: {
        affinity: function(p) { return p.unit.type == "PSY" ? 2.25 : 1; },
    },
    3245: {
        affinity: function(p) { return p.unit.type == "PSY" ? 2.25 : 1; },
    },
    3246:{
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? p.cached.multiplier : 1; },
        type: "type",
        turnedOn: false,
        onActivation: function(p) {
            p.cached.multiplier = p.captain != null && (p.captain.type == "STR" || p.captain.type == "DEX" || p.captain.type == "QCK") ? 2 : 1.75;
        },
    },
    3247: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 2 : 1; },
    },
    3248: {
        atk: function(p) { return p.delayed > 0 ? p.cached.multiplier : 1; },
        type: "condition",
        delay: function(p) { return 1; },
        onActivation: function(p) {
            var levels = [1.75, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Activating Conditional", "Not Activating Conditional"][n] + ' boost. To ' + ["Enable the Conditional", "Disable the Conditional"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3249: {
        atk: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        type: "condition",
        def: function(p) { return 0; },
        onActivation: function(p) {
            var levels = [1.75, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Activating Conditional", "Not Activating Conditional"][n] + ' boost. To ' + ["Enable the Conditional", "Disable the Conditional"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3251: {
        atk: function(p) { return p.poisoned ? 1.75 : 1; },
        type: "condition",
    },
    3256: {
        chainAddition: function(p) { return 0.8; }
    },
    3257: {
        chainAddition: function(p) { return 0.8; }
    },
    3258: {
        atk: function(p) { return !(p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit")) ? 1 : p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Shooter") || p.captain.class.has("Free Spirit")) ? 2 : 1;
        }
    },
    3259: {
        atk: function(p) { return !(p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit")) ? 1 : p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Shooter") || p.captain.class.has("Free Spirit")) ? 2 : 1;
        }
    },
    3260: {
        staticMult: function(p) { return 80; }
    },
    3261: {
        staticMult: function(p) { return 80; }
    },
    3262: {
        affinity: function(p) { return p.unit.class.has("Powerhouse") || p.unit.class.has("Free Spirit") ? 1.75 : 1; }
    },
    3263: {
        orb: function(p) { return 1.75; },
    },
    3265: {
        chainAddition: function(p) { return 0.7; }
    },
    3267: {
        affinity: function(p) { return p.unit.type == "QCK" ? 1.5 : 1; }
    },
    3268: {
        atk: function(p) { return !(p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit")) ? 1 : 1.5; },
        type: "type",
    },
    3269: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? p.cached.multiplier != 1 ? 1.75 : 1 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? p.cached.multiplier != 0 ? 2 : 1 : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3270: {
        atk: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1 },
        type: "type",
        onActivation: function(p) {
            var levels = [1.75, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + ' boost. To ' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3271: {
        affinity: function(p) { return p.unit.class.has("Free Spirit") || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1 },
        onActivation: function(p) {
            var levels = [1.75, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + ' boost. To ' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3273: {
        atk: function(p) { return 2; },
        type: "type",
        affinity: function(p) { return p.unit.class.has("Free Spirit") || p.unit.class.has("Shooter") ? 1.75 : 1 },
    },
    3274: {
        affinity: function(p) { return (p.unit.class.has("Driven") || p.unit.class.has("Cerebral")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Driven") || p.captain.class.has("Cerebral")) ? 2 : 1;
        }
    },
    3275: {
        affinity: function(p) { return p.unit.type == window.specials[3275].boostedType ? [1.75, 2][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        def: function(p) { return 0; },
        ignoresImmunities: function(p) { return p.cached.percHP > 99 ? ['def'] : []; },
        status: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.cached.percHP > 99 ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 2;
            window.specials[3275].boostedType = p.colorCount.STR >= 4 ? "STR" : p.colorCount.DEX >= 4 ? "DEX" :  p.colorCount.QCK >= 4 ? "QCK" : p.colorCount.PSY >= 4 ? "PSY" : p.colorCount.INT >= 4 ? "INT" : "null";
        },
    },
    3277: {
        poison: function(p) { return 99; },
        atk: function(p) { return p.cached.multiplier; },
        affinity: function(p) { return 2; },
        type: "type",
        def: function(p) { return 0; },
        onActivation: function(p) {
            var levels = [2.5, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + [ '2.5x ATK boost and 2x Affinity', '2x Affinity' ][n] + ' boost. To ' + [ '2.5x ATK boost and 2x Affinity', '2x Affinity' ][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3278: {
        poison: function(p) { return 99; },
        atk: function(p) { return p.cached.multiplier; },
        affinity: function(p) { return 2; },
        type: "type",
        def: function(p) { return 0; },
        onActivation: function(p) {
            var levels = [2.5, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + [ '2.5x ATK boost and 2x Affinity', '2x Affinity' ][n] + ' boost. To ' + [ '2.5x ATK boost and 2x Affinity', '2x Affinity' ][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3281:{
        affinity: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? p.cached.multiplier != 0 ? 2.25 : 1 : 1; },
        orb: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? p.cached.multiplier != 1 ? 2.5 : 1 : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Orb", "Affinity", "Orb and Affinity"][n] + ' boost. To ' + ["Orb", "Affinity", "Orb and Affinity"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3282:{
        affinity: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? p.cached.multiplier != 0 ? 2.25 : 1 : 1; },
        orb: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? p.cached.multiplier != 1 ? 2.5 : 1 : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Orb", "Affinity", "Orb and Affinity"][n] + ' boost. To ' + ["Orb", "Affinity", "Orb and Affinity"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3283:{
        orb: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? 2 : 1; },
    },
    3284:{
        orb: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? 2 : 1; },
    },
    3285: {
        def: function(p) { return 0; }
    },
    3286: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Driven") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Fighter") || p.captain.class.has("Driven")) ? 1.75 : 1;
        }
    },
    3288: {
        delay: function(p) { return 1; },
        atk: function(p) { return p.defenseDown ? 1.5 : 1; },
        type: "condition"
    },
    3289: {
        chainAddition: function(p) { return 0.7; }
    },
    3290: {
        def: function(p) { return 0.5; },
        atk: function(p) { return p.delayed > 0 ? 1.5 : 1; },
        type: "condition",
    },
    3291:{
        orb: function(p) { return 1.5; },
    },
    3293: {
        affinity: function(p) { return p.cached.multiplier != 1 ? p.unit.class.has("Powerhouse") || p.captain.class.has("Driven") ? 1.75 : 1 : 1; },
        type: "type",
        orb: function(p) { return p.cached.multiplier != 0 ? p.unit.class.has("Powerhouse") || p.captain.class.has("Driven") ? 2 : 1 : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Affinity", "Orb", "Affinity and Orb"][n] + ' boost. To ' + ["Affinity", "Orb", "Affinity and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3294: {
        atk: function(p) { return p.defenseDown ? 1.75 : 1; },
        type: "condition",
        def: function(p) { return window.specials[3294].turnedOn ? 0 : 1; },
        onActivation: function(p) {
            window.specials[3294].turnedOn = p.classCount.Driven >= 5 ? true : false;
        },
    },
    3295: {
        atk: function(p) { return 1.75; },
        type: "type",
    },
    3296: {
        affinity: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [1.75, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + ' boost. To ' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3297: {
        affinity: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Slasher") ? 2 : 1; },
    },
    3298: {
        affinity: function(p) { return (p.cached.affmultiplier && (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven"))) ? 2 : 1; },
        chainAddition: function(p) { return p.cached.chainmultiplier ? [1.1, 1.3][CrunchUtils.llimitUnlock(p, "specials")] : 0; },
        onActivation: function(p) {
            if (p.captain) if (p.captain.class.has("Free Spirit") || p.captain.class.has("Cerebral") || p.captain.class.has("Powerhouse") || p.captain.class.has("Driven")) p.cached.affmultiplier = true;
            if (p.captain) if (p.captain.class.has("Fighter") || p.captain.class.has("Striker") || p.captain.class.has("Slasher") || p.captain.class.has("Shooter")) p.cached.chainmultiplier = true;
        },
        onDeactivation: function(p) {
            p.cached.affmultiplier = false;
            p.cached.chainmultiplier = false;
        },
    },
    3301: {
        orb: function(p) { return (p.cached.multiplier) ? 2 : 1; },
        onActivation: function(p) {
            if (p.captain) if (p.captain.class.has("Striker") || p.captain.class.has("Driven")) p.cached.multiplier = true;
        },
        onDeactivation: function(p) {
            p.cached.multiplier = false;
        },
    },
    3302: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    3303: {
        chain: function(p) { return 2.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.75 : 1;
        }
    },
    3304: {
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + ' boost. To ' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3305: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [0.8, 1.0];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + ' boost. To ' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3306: {
        atk: function(p) { return p.unit.type == "INT" ? 2.5 : 1; },
        type: "type",
        def: function(p) { return 0; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var levels = [3, 3.25, 3.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + [3, 3.25, 3.5][n] + 'x Chain Lock. To switch to the ' + [3.25, 3.5, 3][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3307: {
        atk: function(p) { return p.unit.type == "INT" ? 2.5 : 1; },
        type: "type",
        def: function(p) { return 0; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var levels = [3, 3.25, 3.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + [3, 3.25, 3.5][n] + 'x Chain Lock. To switch to the ' + [3.25, 3.5, 3][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3309: {
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + ' boost. To ' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3310: {
        affinity: function(p) { return 1.75; },
    },
    3312: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class"
    },
    3313: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class"
    },
    3314: {
        atk: function(p) { return p.unit.class.has("Free Spirit") ? 1.75 : 1; },
        type: "class"
    },
    3315: {
        atk: function(p) { return p.unit.class.has("Free Spirit") ? 1.75 : 1; },
        type: "class"
    },
    3318: {
        atk: function(p) { return p.unit.class.has("Shooter") ? 1.75 : 1; },
        type: "class"
    },
    3319: {
        atk: function(p) { return p.unit.class.has("Shooter") ? 1.75 : 1; },
        type: "class"
    },
    3320: {
        atk: function(p) { return p.unit.class.has("Shooter") ? 1.75 : 1; },
        type: "class"
    },
    3321: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "class",
    },
    3322: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "class",
    },
    3323: {
        atk: function(p) { return p.unit.class.has("Striker") ? 1.75 : 1; },
        type: "class"
    },
    3324: {
        atk: function(p) { return p.unit.class.has("Striker") ? 1.75 : 1; },
        type: "class"
    },
    3325: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 1.75 : 1; },
        type: "class"
    },
    3326: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 1.75 : 1; },
        type: "class"
    },
    3328: {
        chainAddition: function(p) { return 0.7; }
    },
    3329: {
        atk: function(p) { return 1.75; },
        type: "type",
    },
    3332: {
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'x boost. To ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3333: {
        atk: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? 2.75 : 1; },
        type: "class",
        atkbase: function(p) { return p.slot == p.sourceSlot ? Math.min(p.rcvCounter*100,1000) : 0; }
    },
    3334: {
        atk: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? 2.75 : 1; },
        type: "class",
        atkbase: function(p) { return p.slot == p.sourceSlot ? Math.min(p.rcvCounter*100,1000) : 0; }
    },
    3335: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Slasher") || p.unit.class.has("Cerebral") ? 2.75 : 1; },
        type: "class",
        increaseDamageTaken: function(p) { return 1.5; },
        ignoresImmunities: function(p) { return ['increaseDamageTaken']; },
    },
    3336: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Slasher") || p.unit.class.has("Cerebral") ? 2.75 : 1; },
        type: "class",
        increaseDamageTaken: function(p) { return 1.5; },
        ignoresImmunities: function(p) { return ['increaseDamageTaken']; },
    },
    3337: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.class.has("Striker") || p.unit.class.has("Driven") ? p.cached.multiplier[0] == "1" ? 2 : 1 : 1; },
        atk: function(p) { return p.unit.type == "STR" || p.unit.class.has("Striker") || p.unit.class.has("Driven") ? p.cached.multiplier[2] == "1" ? 2.5 : 1 : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "STR" || p.unit.class.has("Striker") || p.unit.class.has("Driven") ? p.cached.multiplier[1] == "1" ? 2.5 : 1 : 1; },
        onActivation: function(p) {
            var levels = [1, 2, 3, 4, 5, 6, 7];
            var n = (levels.indexOf(parseInt(p.cached.multiplier,2)) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier = "0".repeat(3-p.cached.multiplier.toString(2).length) + p.cached.multiplier.toString(2);
            p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb", "Affinity", "ATK and Affinity", "Orb and Affinity", "ATK, Orb and Affinity"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb", "Affinity", "ATK and Affinity", "Orb and Affinity", "ATK, Orb and Affinity"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3338: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.class.has("Striker") || p.unit.class.has("Driven") ? p.cached.multiplier[0] == "1" ? 2 : 1 : 1; },
        atk: function(p) { return p.unit.type == "STR" || p.unit.class.has("Striker") || p.unit.class.has("Driven") ? p.cached.multiplier[2] == "1" ? 2.5 : 1 : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "STR" || p.unit.class.has("Striker") || p.unit.class.has("Driven") ? p.cached.multiplier[1] == "1" ? 2.5 : 1 : 1; },
        onActivation: function(p) {
            var levels = [1, 2, 3, 4, 5, 6, 7];
            var n = (levels.indexOf(parseInt(p.cached.multiplier,2)) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier = "0".repeat(3-p.cached.multiplier.toString(2).length) + p.cached.multiplier.toString(2);
            p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb", "Affinity", "ATK and Affinity", "Orb and Affinity", "ATK, Orb and Affinity"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb", "Affinity", "ATK and Affinity", "Orb and Affinity", "ATK, Orb and Affinity"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3339: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Free Spirit") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + ' boost. To ' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3344: {
        orb: function(p) { return 2; },
    },
    3345: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP <= 51 ? 2 : 1.75);
            p.cached.multiplier = n;
        }
    },
    3347: {
        orb: function(p) { return 1.75; },
    },
    3350: {
        atk: function(p) { return p.unit.type == "QCK" || p.unit.type == "INT" ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
        orb: function(p) { return p.unit.type == "QCK" || p.unit.type == "INT" ? [2, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; }
    },
    3351: {
        atk: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2 : 1; },
        type: "type",
        status: function(p) { return p.delayed > 0 ? 1.5 : 1; },
        delay: function(p) { return p.cached.currentHP >= 25000 ? 1 : 0; },
    },
    3352: {
        atk: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2 : 1; },
        type: "type",
        status: function(p) { return p.delayed > 0 ? 1.5 : 1; },
        delay: function(p) { return p.cached.currentHP >= 25000 ? 1 : 0; },
        ignoresImmunities: function(p) { return p.cached.currentHP >= 50000 ? ['delay'] : []; },
    },
    3356: {
        affinity: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" || p.unit.class.has("Powerhouse") ? p.cached.multiplier1 : 1; },
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier1 = (p.percHP <= 50 ? 2.5 : 2);
            var levels = [0, 1.2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Affinity", "Affinity and Chain"][n] + ' boost. To switch to ' + ["Affinity", "Affinity and Chain"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3357: {
        affinity: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" || p.unit.class.has("Powerhouse") ? p.cached.multiplier1 : 1; },
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier1 = (p.percHP <= 50 ? 2.5 : 2);
            var levels = [0, 1.2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + ' chain boost. To ' + levels[(n + 1) % levels.length] + ' chain boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3358: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    3359: {
        affinity: function(p) { return p.cached.multiplier != 1 ? 1.75 : 1; },
        type: "type",
        orb: function(p) { return p.cached.multiplier != 0 ? 1.75 : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Affinity", "Orb", "Affinity and Orb"][n] + ' boost. To ' + ["Affinity", "Orb", "Affinity and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3361: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    3362: {
        affinity: function(p) { return p.unit.class.has("Slasher") ? 1.75 : 1; },
    },
    3363: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? p.cached.multiplier != 1 ? 2 : 1 : 1; },
        orb: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? p.cached.multiplier != 0 ? 2 : 1 : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "ORB boost", "Both Boosts"][levels[n]] + '. To switch to ' + ["ATK boost", "ORB boost", "Both Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3364: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? p.cached.multiplier != 1 ? 2 : 1 : 1; },
        orb: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? p.cached.multiplier != 0 ? 2 : 1 : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "ORB boost", "Both Boosts"][levels[n]] + '. To switch to ' + ["ATK boost", "ORB boost", "Both Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3365: {
        chainPlus: function(p) { 
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1];
            if (p.cached.multiplier == 0.2) return p.chainPosition === 0 ? 0 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 0;
            else return 0;
        }, 
        chain: function(p) { return p.cached.multiplier == 2.75 ? p.cached.multiplier : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2.75) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            var levels = [0.2, 2.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Lock Buff", "Chain Lock"][n] + '. To switch to ' + ["Chain Lock Buff", "Chain Lock"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3366: {
        affinity: function(p) { return p.unit.type == "PSY" ? 1.75 : 1; },
    },
    3367: {
        delay: function(p) { return 1; },
        chain: function(p) { return 2.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.75 : 1;
        }
    },
    3368: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Free Spirit") ? p.cached.multiplier != 1 ? 1.5 : 1 : 1; },
        orb: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Free Spirit") ? p.cached.multiplier != 0 ? 2.25 : 1 : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "ORB boost", "Both Boosts"][levels[n]] + '. To switch to ' + ["ATK boost", "ORB boost", "Both Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3369: {
        orb: function(p) { return p.unit.type == "PSY" ? p.cached.multiplier : 1; },
        turnedOn: [false,false,false,false,false,false],
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = true;
            var n = (p.cached.multiplier == 2 ? 1 : 0);
            p.cached.multiplier = [2, 2.25][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.25][n] + 'x Orb Boost. To switch to the ' + [2, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = false;
        }
    },
    3370: {
        def: function(p) { return p.cached.multiplier != 0 ? 0.2 : 1; },
        status: function(p) { return p.defenseDown > 0 ? p.cached.multiplier != 1 ? 1.75 : 1 : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Conditional Boost", "DEF Reduction", "Both Effects"][levels[n]] + '. To switch to ' + ["Conditional Boost", "DEF Reduction", "Both Effects"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3371: {
        chainAdditionPlus: function(p) { return p.cached.multiplier == 0.2 ? 0.2 : 0; },
        chainAddition: function(p) { return p.cached.multiplier == 1.0 ? p.cached.multiplier : 0; },
        onActivation: function(p) {
            var levels = [0.2, 1.0];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Addition Buff", "Chain Addition"][n] + '. To switch to ' + ["Chain Addition Buff", "Chain Addition"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3372: {
        def: function(p) { return p.cached.multiplier; },
        chainAddition: function(p) { return 1.0; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["DEF Reduction and Chain Boost", "Chain Boost Only"][levels[n]] + '. To switch to ' + ["DEF Reduction and Chain Boost", "Chain Boost Only"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3373: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Free Spirit") ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        orb: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Free Spirit") ? [1, 1.5, 1.5][p.cached.multiplier] : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "ORB boost", "Both Boosts"][levels[n]] + '. To switch to ' + ["ATK boost", "ORB boost", "Both Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3374: {
        chainAddition: function(p) { return 1.0; }
    },
    3375: {
        orb: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? p.cached.multiplier != 0 ? 2.5 : 1 : 1; },
        chainAddition: function(p) { return p.cached.multiplier != 1 ? 1.1 : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Orb", "Chain", "Orb and Chain"][n] + ' boost. To ' + ["Orb", "Chain", "Orb and Chain"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3376: {
        orb: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? p.cached.multiplier != 1 ? 2.5 : 1 : 1; },
        chainAddition: function(p) { return p.cached.multiplier != 0 ? 1.1 : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Orb", "Chain", "Orb and Chain"][n] + ' boost. To ' + ["Orb", "Chain", "Orb and Chain"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3377: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? p.cached.multiplier != 1 ? 2.5 : 1 : 1; },
        type: "type",
        chain: function(p) { return p.cached.multiplier != 0 ? 2.5 : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier != 0) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 35 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Chain Boundary", "ATK and Chain Boundary"][n] + ' boost. To ' + ["ATK", "Chain Boundary", "ATK and Chain Boundary"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3378: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? p.cached.multiplier != 1 ? 2.5 : 1 : 1; },
        type: "type",
        chain: function(p) { return p.cached.multiplier != 0 ? 2.5 : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier != 0) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 35 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Chain Boundary", "ATK and Chain Boundary"][n] + ' boost. To ' + ["ATK", "Chain Boundary", "ATK and Chain Boundary"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3380: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [0.8, 1.1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3381: {
        affinity: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Shooter") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3382: {
        orb: function(p) { return p.unit.type == "QCK" || p.unit.type == "DEX" ? p.cached.multiplier != 0 ? 1.75 : 1 : 1; },
        atk: function(p) { return p.unit.type == "QCK" || p.unit.type == "DEX" ? p.cached.multiplier != 1 ? 1.75 : 1 : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3383: {
        orb: function(p) { return (p.unit.type == "QCK" || p.unit.type == "PSY") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 1.75 ? 1 : 0);
            p.cached.multiplier = [1.75, 2][n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2][n] + 'x Orb multiplier. To switch to the ' + [2, 1.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3384: {
        orb: function(p) { return 1.5; },
    },
    3385: {
        atkbase: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 0; },
        def: function(p) { return p.cached.multiplier == 500 ? 0 : 1; },
        status: function(p) { return p.defenseDown > 0 ? 2 : 1; },
        onActivation: function(p) {
            var levels = [300, 500];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + ' base ATK boost and corresponding defense reduction. To switch to the ' + levels[(n + 1) % levels.length] + ' base ATK boost and corresponding defense reduction, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3386: {
        atk: function(p) { return p.unit.type == "QCK" || p.unit.type == "DEX" ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [1.75, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + ' boost. To ' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3387: {
        affinity: function(p) { return p.unit.type == "QCK" || p.unit.type == "DEX" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [1.75, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + ' boost. To ' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3388: {
        atk: function(p) { return (p.unit.type == "PSY" || p.unit.type == "INT") ? p.cached.multiplier1 : 1; },
        type: "type",
        affinity: function(p) { return p.unit.type == "QCK" || p.unit.type == "DEX" ? p.cached.multiplier2 : 1; },
        onActivation: function(p) {
            p.cached.multiplier1 = p.colorCount.QCK >= 4 ? 1.75 : 1;
            p.cached.multiplier2 = p.colorCount.DEX >= 4 ? 1.75 : 1;
        },
    },
    3389: {
        atk: function(p) { return p.slot == p.sourceSlot ? 3 : 1; },
        type: "type",
        orb: function(p) { return p.slot == p.sourceSlot ? 3 : 1}
    },
    3390: {
        atk: function(p) { return p.tokiState ? 3.5 : 1; },
        type: "type",
        orb: function(p) { return p.tokiState ? 3.5 : 1; },
    },
    3391: {
        atk: function(p) { return p.tokiState ? 3.5 : 1; },
        type: "type",
        orb: function(p) { return p.tokiState ? 3.5 : 1; },
    },
    3392: {
        chainAddition: function(p) { return 0.9; }
    },
    3393: {
        burn: function(p) { return 2; },
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit")) ? 2.25 : 1; },
        type: "type",
        chainAddition: function(p) { return [1, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            var levels = [1, 1.3, 1.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if(CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: 'Using the ' + levels[n] + 'x chain boost. To ' + levels[(n + 1) % levels.length] + 'x chain boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3394: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven") ? 2 : 1; },
    },
    3395: {
        atk: function(p) { return p.unit.class.has("Slasher") ? 1.75 : 1; },
        type: "type",
    },
    3396: {
        affinity: function(p) { return 1.75; },
    },
    3397: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven") ? 2 : 1; },
    },
    3398: {
        delay: function(p) { return 1; },
        atk: function(p) { return p.cached.multiplier != 1 ? 2.25 : 1; },
        type: "type",
        affinity: function(p) { return p.cached.multiplier != 0 ? 1.75 : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Affinity", "ATK and Affinity"][n] + ' boost. To ' + ["ATK", "Affinity", "ATK and Affinity"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3399: {
        orb: function(p) { return 2; }
    },
    3400: {
        status: function(p) { return p.delayed > 0 ? 1.75 : 1; },
        delay: function(p) { return 1; },
    },
    3401: {
        orb: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Shooter") ? 1.75 : 1; },
    },
    3402: {
        atk: function(p) { return p.unit.type == "INT" || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") ? 2.25 : 1; },
        type: "type",
    },
    3403: {
        atk: function(p) { return p.unit.type == "INT" || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") ? 2.25 : 1; },
        type: "type",
    },
    3404: {
        orbPlus: function(p) { return p.cached.multiplier != 1 ? 0.25 : 0; },
        orb: function(p) { return p.unit.type == "STR" || p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") ? p.cached.multiplier != 0 ? 2.25 : 1 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb Buff", "Orb boost", "Orb boost and Orb buff"][n] + '. To switch to ' + ["Orb Buff", "Orb boost", "Orb boost and Orb buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        },
    },
    3405: {
        orbPlus: function(p) { return p.cached.multiplier != 1 ? 0.25 : 0; },
        orb: function(p) { return p.unit.type == "STR" || p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") ? p.cached.multiplier != 0 ? 2.25 : 1 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb Buff", "Orb boost", "Orb boost and Orb buff"][n] + '. To switch to ' + ["Orb Buff", "Orb boost", "Orb boost and Orb buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        },
    },
    3406: {
        chainAddition: function(p) { return 0.8; }
    },
    3407: {
        affinity: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Cerebral") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + ' boost. To ' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3408: {
        poison: function(p) { return 99; },
        status: function(p) { return p.poisoned ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [1.5, 1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + ' boost. To ' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3409: {
        atk: function(p) { return p.unit.type == "DEX" ? 1.75 : 1; },
        type: "type",
    },
    3410: {
        chainAddition: function(p) { return p.cached.multiplier == 2 ? 1.4 : 0.7; },
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? p.cached.multiplier : 1; },
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = true;
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["1.75x Affinity and 0.7x Chain", "2x Affinity and 1.4x Chain"][n] + ' boost. To ' + ["1.75x Affinity and 0.7x Chain", "2x Affinity and 1.4x Chain"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = false;
        }
    },
    3411: {
        chainAddition: function(p) { return p.cached.multiplier == 2 ? 1.4 : 0.7; },
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? p.cached.multiplier : 1; },
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = true;
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["1.75x Affinity and 0.7x Chain", "2x Affinity and 1.4x Chain"][n] + ' boost. To ' + ["1.75x Affinity and 0.7x Chain", "2x Affinity and 1.4x Chain"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = false;
        }
    },
    3412: {
        atkbase: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Cerebral") ? 300 : 0; },
    },
    3413: {
        rcv: function(p) { return 1.5; },
    },
    3414: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 0; },
    },
    3415: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "INT" ? 2 : 0; },
    },
    3416: {
        affinityPlus: function(p) { return [0, 0.25, 0.25][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.type == "STR" || p.unit.class.has("Cerebral") || p.unit.class.has("Shooter") ? [[1.75, 1, 1.75],[2, 1, 2]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity Boost", "Affinity Buff", "Affinity Boost and Affinity Buff"][n] + '. To switch to ' + ["Affinity Boost", "Affinity Buff", "Affinity Boost and Affinity Buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3417: {
        orb: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Cerebral")) ? [2.25, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
    },
    3418: {
        affinity: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? (p.cached.enemyImmunities.delay ? 2 : 1.75) : 1; },
    },
    3419: {
        atk: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") ? 2 : 1; },
        type: "type",
    },
    3421: {
        atkbase: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? 1000 : 0; },
        orb: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? 2.5 : 1; },
    },
    3422: {
        atkbase: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? 1000 : 0; },
        orb: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? 2.5 : 1; },
    },
    3423: {
        atkPlus: function(p) { return p.cached.multiplier != 1 ? 0.25 : 0; },
        atk: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse") ? p.cached.multiplier != 0 ? 1.75 : 1 : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK Buff", "ATK boost", "ATK boost and ATK buff"][n] + '. To switch to ' + ["ATK Buff", "ATK boost", "ATK boost and ATK buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3424: {
        chainAdditionPlus: function(p) { return p.cached.multiplier == 0.2 ? 0.2 : 0; },
        chainAddition: function(p) { return p.cached.multiplier == 1.0 ? p.cached.multiplier : 0; },
        onActivation: function(p) {
            var levels = [0.2, 1.0];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Addition Buff", "Chain Addition"][n] + '. To switch to ' + ["Chain Addition Buff", "Chain Addition"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3426: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.class.has("Shooter") || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 0; },
        onActivation: function(p) {
            p.cached.multiplier = p.maxHP >= 60000 ? 2.5 : 2.25;
        },
    },
    3427: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.class.has("Shooter") || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 0; },
        onActivation: function(p) {
            p.cached.multiplier = p.maxHP >= 60000 ? 2.5 : 2.25;
        },
    },
    3428: {
        orb: function(p) { return p.unit.class.has("Powerhouse") ? 1.75 : 1; },
    },
    3429: {
        chainAddition: function(p) { return 1.1; },
        increaseDamageTaken: function(p) { return 1.75; },
    },
    3430: {
        chainAddition: function(p) { return 1.3; },
        increaseDamageTaken: function(p) { return 1.75; },
    },
    3431: {
        orb: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? 2 : 1; },
    },
    3434: {
        affinity: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Driven") ? 1.75 : 0; },
    },
    3435: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "type",
    },
    3436: {
        staticMult: function(p) { return 80; }
    },
    3438: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    3439: {
        orb: function(p) { return 2; },
    },
    3440: {
        atk: function(p) { return 1.75; },
        type: "type",
    },
    3442: {
        affinity: function(p) { return 1.75; },
    },
    3443: {
        atk: function(p) { return 2; },
        type: "type",
    },
    3444: {
        status: function(p) { return p.defenseDown ? 1.75 : 1; },
        def: function(p) { return 0.8; },
    },
    3445: {
        orb: function(p) { return 2; },
    },
    3446: {
        chainAddition: function(p) { return 1; }
    },
    3447: {
        atk: function(p) { return 2; },
        type: "type",
    },
    3448: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [3, 10][CrunchUtils.llimitUnlock(p, "specials")] : 1;
        }
    },
    3449: {
        orb: function(p) { return p.unit.type == "INT" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? 2 : 1; },
    },
    3450: {
        orb: function(p) { return p.unit.type == "INT" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? 2 : 1; },
    },
    3451: {
        atkbase: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 1000 : 0; },
        chain: function(p) { return 3.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.5 : 1;
        }
    },
    3452: {
        atkbase: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 1000 : 0; },
        chain: function(p) { return 3.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.5 : 1;
        }
    },
    3453: {
        status: function(p) { return p.defenseDown || p.poisoned || p.delayed || p.negative ? 2 : 1; },
        negative: function(p) { return p.cached.percHP <= 80 ? 1 : 0; },
        ignoresImmunities: function(p) { return ['negative']; },
        chainPlus: function(p) { 
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1];
            if (p.cached.multiplier == 0.5) return p.chainPosition === 0 ? 0 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 0;
            else return 0;
        }, 
        chain: function(p) { return p.cached.multiplier == 3.25 ? p.cached.multiplier : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 3.25) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            var levels = [0.5, 3.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Lock Buff", "Chain Lock"][n] + '. To switch to ' + ["Chain Lock Buff", "Chain Lock"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3454: {
        status: function(p) { return p.defenseDown || p.poisoned || p.delayed || p.negative ? 2 : 1; },
        negative: function(p) { return p.cached.percHP <= 80 ? 1 : 0; },
        ignoresImmunities: function(p) { return ['negative']; },
        chainPlus: function(p) { 
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1];
            if (p.cached.multiplier == 0.5) return p.chainPosition === 0 ? 0 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 0;
            else return 0;
        }, 
        chain: function(p) { return p.cached.multiplier == 3.25 ? p.cached.multiplier : 1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 3.25) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            var levels = [0.5, 3.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Lock Buff", "Chain Lock"][n] + '. To switch to ' + ["Chain Lock Buff", "Chain Lock"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3455: {
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Free Spirit") ? 2 : 1; },
    },
    3456: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [1.75, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ATK boost. To switch to the ' + levels[(n + 1) % levels.length] + ' ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3457: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? p.cached.multiplier != 1 ? 1.75 : 1 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? p.cached.multiplier != 0 ? 1.75 : 1 : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3459: {
        rcv: function(p) { return 1.5; }
    },
    3460: {
        poison: function(p) { return 99; },
        affinity: function(p) { return p.unit.type == "INT" ? 2 : 1; }
    },
    3461: {
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.5 : 2.25);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.5 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3462: {
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.5 : 2.25);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.5 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3466: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 1.75 : 1; }
    },
    3467: {
        atk: function(p) { return p.unit.type == "INT" || p.unit.class.has("Fighter") || p.unit.class.has("Cerebral") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'x boost. To use the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3468: {
        orb: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") ? (p.cached.enemyImmunities.delay ? 2.25 : 2) : 1; },
        delay: function(p) { return 1; },
    },
    3470: {
        status: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        def: function(p) { return 0; },
        chainAddition: function(p) { return 1; },
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 1.75 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 1.75 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3471: {
        chainAddition: function(p) { return [1, 1.4, 1.4][p.cached.multiplier]; },
        atk: function(p) { return p.unit.class.has("Driven") ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        orb: function(p) { return p.unit.class.has("Driven") ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        atkbase: function(p) { return p.unit.class.has("Driven") ? [0, 1000, 1000][p.cached.multiplier] : 0; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK and Orb boost", "Chain and Base ATK boost", "All Boosts"][levels[n]] + '. To switch to ' + ["ATK and Orb boost", "Base ATK boost", "All Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3472: {
        chainAddition: function(p) { return [1, 1.4, 1.4][p.cached.multiplier]; },
        atk: function(p) { return p.unit.class.has("Driven") ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        orb: function(p) { return p.unit.class.has("Driven") ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        atkbase: function(p) { return p.unit.class.has("Driven") ? [0, 1000, 1000][p.cached.multiplier] : 0; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK and Orb boost", "Chain and Base ATK boost", "All Boosts"][levels[n]] + '. To switch to ' + ["ATK and Orb boost", "Base ATK boost", "All Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3473: {
        orb: function(p) { return p.unit.class.has("Powerhouse") ? p.cached.multiplier != 0 ? p.cached.multiplier2 : 1 : 1; },
        atkbase: function(p) { return p.unit.class.has("Powerhouse") ? p.cached.multiplier != 0 ? 1000 : 0 : 0; },
        atk: function(p) { return p.unit.class.has("Powerhouse") ? p.cached.multiplier != 1 ? 2.5 : 1 : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.damageCounter >= 50000 ? 2.75 : p.damageCounter >= 25000 ? 2.5 : 2.25;
            p.scope.notify({
                text: 'Using the ' + ["Base ATK and Orb boost", "ATK boost", "All Boosts"][levels[n]] + '. To switch to ' + ["Base ATK and Orb boost", "ATK boost", "All Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3474: {
        orb: function(p) { return p.unit.class.has("Powerhouse") ? p.cached.multiplier != 0 ? p.cached.multiplier2 : 1 : 1; },
        atkbase: function(p) { return p.unit.class.has("Powerhouse") ? p.cached.multiplier != 0 ? 1000 : 0 : 0; },
        atk: function(p) { return p.unit.class.has("Powerhouse") ? p.cached.multiplier != 1 ? 2.5 : 1 : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.damageCounter >= 50000 ? 2.75 : p.damageCounter >= 25000 ? 2.5 : 2.25;
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "Base ATK and Orb boost", "All Boosts"][levels[n]] + '. To switch to ' + ["ATK boost", "Base ATK and Orb boost", "All Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3475:{
        poison: function(p) { return 99; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2.0) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 35 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.captain) if (p.captain.class.has("Driven")) p.cached.multiplier = 2.0;
        },
    },
    3476: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "type",
    },
    3477: {
        affinity: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? 1.75 : 1; },
    },
    3481: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [0.7, 0.9];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'x boost. To ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3482: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 2.5 : 1; },
        type: "type",
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier2 : 1;
        },
        onActivation: function(p) {
            var levels = [2.5, 3];
            var levels2 = [35, 40];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = levels2[n];
            p.scope.notify({
                text: '' + levels[n] + 'x Base Chain boost. To ' + levels[(n + 1) % levels.length] + 'x Base Chain boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3483: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 2.5 : 1; },
        type: "type",
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier2 : 1;
        },
        onActivation: function(p) {
            var levels = [2.5, 3];
            var levels2 = [35, 40];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = levels2[n];
            p.scope.notify({
                text: '' + levels[n] + 'x Base Chain boost. To ' + levels[(n + 1) % levels.length] + 'x Base Chain boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3484: {
        orb: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") ? 2.25 : 1; },
    },
    3485: {
        affinity: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Striker") ? 2 : 1; },
    },
    3486: {
        status: function(p) { return p.defenseDown ? 2 : 1; },
        def: function(p) { return 0; },
    },
    3487: {
        orb: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Driven") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + ' boost. To use the ' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3488: {
        affinityPlus: function(p) { return p.cached.multiplier == 0.25 ? p.cached.multiplier : 0; },
        affinity: function(p) { return p.cached.multiplier == 2 ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [0.25, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity Buff", "Affinity"][n] + '. To switch to ' + ["Affinity Buff", "Affinity"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3489: {
        poison: function(p) { return 99; },
        status: function(p) { return p.poisoned ? 1.75 : 1; },
    },
    3490: {
        poison: function(p) { return 99; },
        status: function(p) { return p.poisoned ? 2 : 1; },
    },
    3491: {
        orb: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? 2 : 1; },
        status: function(p) { return p.poisoned ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Driven") || p.captain.class.has("Powerhouse")) ? 2 : 1;
        }
    },
    3496: {
        orb: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + ' boost. To use the ' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3497: {
        atk: function(p) { return 2; },
        type: "type",
        chainAddition: function(p) { return 0.5; },
    },
    3498: {
        orb: function(p) { return 1.75; },
    },
    3499:{
        chain: function(p) { return [2.75, 3, 3.5][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [2.75, 3, 3.5][p.cached.multiplier] : 1;
        },
        def: function(p) { return [0.5, 0.2, 0][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + [2.75, 3, 3.5][n] + 'x chain boost. To ' + [2.75, 3, 3.5][(n + 1) % levels.length] + 'x chain boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3502: {
        atk: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Slasher") ? 2.25 : 1; },
        type: "type",
    },
    3503: {
        chainAddition: function(p) { return p.cached.multiplier1 ? 0.7 : p.cached.multiplier2 ? 0.5 : 0; },
        affinity: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Slasher") ? p.cached.multiplier2 ? 1.75 : 1 : 1; },
        orb: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Slasher") ? p.cached.multiplier1 ? 2 : 1 : 1; },
        onActivation: function(p) {
            p.cached.multiplier1 = p.colorCount.STR >= 4;
            p.cached.multiplier2 = p.colorCount.DEX + p.colorCount.QCK >= 4;
        },
    },
    3505: {
        atk: function(p) { return 2; },
        type: "type",
        warning: "Selected special (%name%) assumes that the enemy has been Delayed."
    },
    3506: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.type == "PSY" ? p.cached.multiplier1 ? 2 : 1 : 1; },
        atkbase: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" ? p.cached.multiplier2 ? 800 : 0 : 0; },
        onActivation: function(p) {
            p.cached.multiplier1 = p.captain != null && (p.captain.type == "STR" || p.captain.type == "QCK" || p.captain.type == "PSY");
            p.cached.multiplier2 = p.captain != null && (p.captain.type == "DEX" || p.captain.type == "INT");
        },
    },
    3509: {
        orb: function(p) { return (p.unit.class.has('Shooter') || p.unit.class.has('Powerhouse')) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2, 2.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + ' boost. To use the ' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3510: {
        chainAddition: function(p) { return [0.8, 1.2][CrunchUtils.llimitUnlock(p, "specials")]; },
        status: function(p) { return p.delayed > 0 ? [1, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; }
    },
    3511: {
        increaseDamageTaken: function(p) { return 1.3; },
        chain: function(p) { return 2.25; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 35 : 1;
        },
    },
    3516: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Slasher") ? 2  : 1; },
        type: "type",
    },
    3517: {
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Slasher") ? 2 : 1; },
    },
    3518: {
        chainPlus: function(p) { 
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1];
            return p.chainPosition === 0 ? 0 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 0.3 : 0;
        }, 
    },
    3519: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.class.has("Free Spirit") || p.unit.class.has("Slasher")) ? 2.75 : 1; },
    },
    3520: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 25 : 1;
        }
    },
    3522: {
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        },
        atkbase: function(p) { return 1500; },
    },
    3523: {
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        },
        atkbase: function(p) { return 1500; },
    },
    3524: {
        status: function(p) { return p.poisoned ? [1, 2, 2][p.cached.multiplier] : 1; },
        orb: function(p) { return 1.75; },
        poison: function(p) { return [99, 0, 99][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the' + ["Poison and Orb", "Status ATK and Orb", "Poison, Orb and Status ATK"][n] + ' special. To ' + ["Poison and Orb", "Status ATK and Orb", "Poison, Orb and Status ATK"][(n + 1) % levels.length] + ' special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3525:{
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1.75, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + [1.75, 2.25][n] + 'x Orb boost. To switch to the ' + [2.25, 1.75][n] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3526: {
        orb: function(p) { return (p.unit.class.has("Driven") || p.unit.class.has("Shooter")) ? 1.75 : 1; },
    },
    3527: {
        affinityPlus: function(p) { return [0, 0.25, 0.25][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Slasher") ? [2, 1, 2][p.cached.multiplier] : 1; },
        turnedOn: false,
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
            p.scope.notify({
                text: 'Using the ' + ["Affinity Boost", "Affinity Buff", "Affinity Boost and Affinity Buff"][n] + '. To switch to ' + ["Affinity Boost", "Affinity Buff", "Affinity Boost and Affinity Buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        },
    },
    3528: {
        atk: function(p) { return (p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.maxHP > 50000  ? 2.25 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'MAX HP ' + (n == 2.25 ? 'above' : 'below') + ' 50,000, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3529: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    3530: {
        atk: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Free Spirit")) ? 1.5 : 1; },
        type: "class",
    },
    3531: {
        def: function(p) { return 0; },
        status: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        atkbase: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Driven") ? p.cached.multiplier2 : 0; },
        onActivation: function(p) {
            var levels = [1.75, 2];
            var levels2 = [0, 250];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = levels2[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost and ' + levels2[n] + ' base ATK boost. To switch to ' + levels[(n + 1) % levels.length] + 'x boost and ' + levels2[(n + 1) % levels.length] + ' base ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3532: {
        def: function(p) { return 0; },
        status: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        atkbase: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Driven") ? p.cached.multiplier2 : 0; },
        onActivation: function(p) {
            var levels = [2, 2.25, 2.25];
            var levels2 = [0, 250, 500];
            var n = (levels2.indexOf(p.cached.multiplier2) + 1) % levels2.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = levels2[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost and ' + levels2[n] + ' base ATK boost. To switch to ' + levels[(n + 1) % levels.length] + 'x boost and ' + levels2[(n + 1) % levels.length] + ' base ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3533: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Shooter") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "Orb boost", "Both Boosts"][levels[n]] + '. To switch to ' + ["ATK boost", "Orb boost", "Both Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3534: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Shooter") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "Orb boost", "Both Boosts"][levels[n]] + '. To switch to ' + ["ATK boost", "Orb boost", "Both Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3535: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Shooter") ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "ATK boost", "Both Boosts"][levels[n]] + '. To switch to ' + ["Orb boost", "ATK boost", "Both Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3536: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Shooter") ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "ATK boost", "Both Boosts"][levels[n]] + '. To switch to ' + ["Orb boost", "ATK boost", "Both Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3537:{
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [0.6, 1.0];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Chain boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x Chain boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3538: {
        affinity: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Slasher")) ? 2 : 1; },
    },
    3539: {
        def: function(p) { return [0.2, 0.2, 0, 0][p.cached.multiplier]; },
        chain: function(p) { return [2.75, 3.25, 2.75, 3.25][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [2.75, 3.25, 2.75, 3.25][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + [2.75, 3.25, 2.75, 3.25][n] + 'x chain lock and the ' + (1-[0.2, 0.2, 0, 0][n])*100 + '% Defense Reduction. To switch to the ' + [2.75, 3.25, 2.75, 3.25][(n + 1) % levels.length] + 'x chain lock and the ' + (1-[0.2, 0.2, 0, 0][(n + 1) % levels.length])*100 + '% Defense Reduction, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3540: {
        status: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP > 50  ? 2.25 : 1);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.25 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3541: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse") ? 1.5 : 1; },
        type: "type",
        def: function(p) { return 0; },
    },
    3544: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Cerebral") ? [2, 1, 2][p.cached.multiplier] : 1; },
        atk: function(p) { return [1, 1.75, 1.75][p.cached.multiplier]; },
        type: "type",
        orb: function(p) { return [1, 1.75, 1.75][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Affinity", "ATK and Orb", "Affinity, ATK and Orb"][n] + ' boost. To ' + ["Affinity", "ATK and Orb", "Affinity, ATK and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3545: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    3546: {
        delay: function(p) { return 1; },
        status: function(p) { return p.delayed > 0 ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Free Spirit") || p.captain.class.has("Powerhouse")) ? 1.75 : 1;
        }
    },
    3547: {
        chain: function(p) { return 2.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.75 : 1;
        }
    },
    3549: {
        orb: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.25 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.25 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3550: {
        atk: function(p) { return p.unit.class.has("Driven") ? 2.5 : 1; },
        type: "type",
    },
    3551: {
        affinity: function(p) { return p.unit.class.has("Cerebral") || p.unit.type == "DEX" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [1.5, 1.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'x boost. To ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3552: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? [p.cached.multiplier1, 1, p.cached.multiplier1][p.cached.multiplier] : 1; },
        atk: function(p) { return [1, 2.25, 2.25][p.cached.multiplier]; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = p.percHP >= 80 ? 2.5 : 2.25;
            p.scope.notify({
                text: '' + ["Affinity", "ATK", "Affinity and ATK"][n] + ' boost. To ' + ["Affinity", "ATK", "Affinity and ATK"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3553: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? [p.cached.multiplier1, 1, p.cached.multiplier1][p.cached.multiplier] : 1; },
        atk: function(p) { return [1, 2.25, 2.25][p.cached.multiplier]; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = p.percHP >= 80 ? 2.5 : 2.25;
            p.scope.notify({
                text: '' + ["Affinity", "ATK", "Affinity and ATK"][n] + ' boost. To ' + ["Affinity", "ATK", "Affinity and ATK"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3556: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.FreeSpirit >= 6 ? 2.25 : 2;
        }
    },
    3557: {
        chainAddition: function(p) { return 0.9; }
    },
    3558: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 1.75 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 1.75 : 1; },
    },
    3560: {
        atk: function(p) { return p.unit.class.has("Driven") ? 2.25 : 1; },
        type: "type",
    },
    3561: {
        atk: function(p) { return p.unit.class.has("Powerhouse") || p.unit.class.has("Free Spirit") ? 1.75 : 1; },
        type: "type",
    },
    3562: {
        chain: function(p) { return 3.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.5 : 1;
        }
    },
    3563: {
        chain: function(p) { return 3.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.5 : 1;
        }
    },
    3564: {
        orb: function(p) { return p.unit.class.has("Slasher") || p.unit.type == "QCK" ? 2 : 1; },
    },
    3565: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.type == "QCK" ? 2 : 1; },
        type: "type",
    },
    3566:{
        affinity: function(p) { return p.unit.type == "INT" ? 1.75 : 1; },
    },
    3567: {
        def: function(p) { return 0; },
        status: function(p) { return p.cached.multiplier; },
        affinity: function(p) { return p.unit.type == "STR" ? p.cached.multiplier2 : 1; },
        onActivation: function(p) {
            var levels = [1, 1.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = (p.captain.class.has("Driven")) ? 2 : 1;
            p.scope.notify({
                text: '' + levels[n] + 'x Status boost. To ' + levels[(n + 1) % levels.length] + 'x Status boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3568: {
        affinity: function(p) { return p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Free Spirit") || p.captain.class.has("Cerebral")) ? 2.25 : 2;
        },
    },
    3570: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Free Spirit") ? 1.5 : 1; },
        type: "type",
    },
    3571: {
        orb: function(p) { return p.unit.class.has("Driven") ? [2, 1, 2][p.cached.multiplier] : 1; },
        chain: function(p) { return [1, 2.75, 2.75][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if ([1, 2.75, 2.75][p.cached.multiplier] == 2.75) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [1, 2.75, 2.75][p.cached.multiplier] : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Orb", "Chain", "Orb and Chain"][n] + ' boost. To ' + ["Orb", "Chain", "Orb and Chain"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3572: {
        orb: function(p) { return p.unit.class.has("Driven") ? [2, 1, 2][p.cached.multiplier] : 1; },
        chain: function(p) { return [1, 3.25, 3.25][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if ([1, 3.25, 3.25][p.cached.multiplier] == 3.25) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [1, 3.25, 3.25][p.cached.multiplier] : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Orb", "Chain", "Orb and Chain"][n] + ' boost. To ' + ["Orb", "Chain", "Orb and Chain"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3575: {
        chainAddition: function(p) { return 1.6; },
        atkbase: function(p) { return p.unit.class.has("Free Spirit") ? 1000 : 0; },
    },
    3576: {
        chainAddition: function(p) { return 1.6; },
        atkbase: function(p) { return p.unit.class.has("Free Spirit") ? 1000 : 0; },
    },
    3577: {
        affinity: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? 2 : 1; },
    },
    3578: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2.25) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 35 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.captain) if (p.captain.class.has("Free Spirit")) p.cached.multiplier = 2.25;
        },
    },
    3579: {
        orb: function(p) { return p.unit.class.has("Free Spirit") || p.unit.class.has("Powerhouse") ? 2 : 1; },
    },
    3580: {
        increaseDamageTaken: function(p) { return 1.5; },
    },
    3581: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 3.75) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.75 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.captain) if (p.captain.class.has("Powerhouse")) p.cached.multiplier = 3.75;
        },
    },
    3582: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 3.75) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.75 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.captain) if (p.captain.class.has("Powerhouse")) p.cached.multiplier = 3.75;
        },
    },
    3583:{
        atk: function(p) { return p.unit.type == "INT" ? 1.75 : 1; },
        type: "type",
    },
    3584: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.type == "QCK" || p.unit.type == "PSY" ? [ 1.75, 2, 1 ][p.cached.multiplier] : 1; },
        type: "type",
        atkPlus: function(p) { return [ 0, 0, .25 ][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["1.75x ATK", "2x ATK", "0.25x ATK Buff"][n] + ' boost. To ' + ["1.75x ATK", "2x ATK", "0.25x ATK Buff"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3585: {
        orb: function(p) { return p.unit.class.has("Free Spirit") || p.unit.class.has("Fighter") ? 2 : 1; },
    },
    3586: {
        status: function(p) { return p.delayed > 0 ? [ 1, 2, 2 ][p.cached.multiplier] : 1; },
        delay: function(p) { return [ 1, 0, 1 ][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Delay", "Status Boost", "Delay and Status Boost"][n] + '. To ' + ["Delay", "Status Boost", "Delay and Status Boost"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3587: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + ' boost. To use the ' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3588: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? 2 : 1; },
    },
    3589:{
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier2 : 1;
        },
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? 2.5 : 1; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = (p.captain != null && (p.captain.class.has("Striker") || p.captain.class.has("Powerhouse"))) ? 3 : 2.5;
            p.cached.multiplier2 = (p.captain != null && (p.captain.class.has("Striker") || p.captain.class.has("Powerhouse"))) ? 40 : 35;
            p.scope.notify({
                text: '' + p.cached.multiplier[n] + 'x Boundary Chain boost. To ' + p.cached.multiplier[(n + 1) % levels.length] + 'x Boundary Chain boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3590:{
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier2 : 1;
        },
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? 2.5 : 1; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = (p.captain != null && (p.captain.class.has("Striker") || p.captain.class.has("Powerhouse"))) ? 3 : 2.5;
            p.cached.multiplier2 = (p.captain != null && (p.captain.class.has("Striker") || p.captain.class.has("Powerhouse"))) ? 40 : 35;
            p.scope.notify({
                text: '' + p.cached.multiplier[n] + 'x Boundary Chain boost. To ' + p.cached.multiplier[(n + 1) % levels.length] + 'x Boundary Chain boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3591: {
        atkPlus: function(p) { return [0.2, 0][p.cached.multiplier]; },
        orbPlus: function(p) { return [0.2, 0][p.cached.multiplier]; },
        def: function(p) { return [1, 0.2][p.cached.multiplier]; },
        status: function(p) { return p.defenseDown ? [1, 2][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Buff", "Defense Reduction & Status"][levels[n]] + ' boost. To switch to the ' + ["Buff", "Defense Reduction & Status"][levels[(n + 1) % levels.length]] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3592: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "QCK" ? [2.25, [2.25, 1, 2.25][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "PSY" || p.unit.type == "QCK" ? [1, [1, 2.25, 2.25][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3594: {
        chainAddition: function(p) { return [0, 1.4, 1.4][p.cached.multiplier]; },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK", "Chain Boost", "ATK & Chain Boost"][levels[n]] + ' boost. To switch to the ' + ["ATK", "Chain Boost", "ATK & Chain Boost"][levels[(n + 1) % levels.length]] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3595: {
        chainAddition: function(p) { return [0, 1.4, 1.4][p.cached.multiplier]; },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK", "Chain Boost", "ATK & Chain Boost"][levels[n]] + ' boost. To switch to the ' + ["ATK", "Chain Boost", "ATK & Chain Boost"][levels[(n + 1) % levels.length]] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3596: {
        orb: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 2.5 : 1; },
    },
    3597: {
        orb: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 2.5 : 1; },
    },
    3598: {
        chainAddition: function(p) { return [1, 0, 1][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? [1, 2, 2][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Boost", "Affinity", "Affinity & Chain Boost"][levels[n]] + ' boost. To switch to the ' + ["Chain Boost", "Affinity", "Affinity & Chain Boost"][levels[(n + 1) % levels.length]] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3599: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'x boost. To use the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3600: {
        staticMult: function(p) { return 80; }
    },
    3606: {
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.slot < 2 ? 3.25 : 3);
        }
    },
    3607: {
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.slot < 2 ? 3.25 : 3);
        }
    },
    3608: {
        status: function(p) { return p.enemyEffects.increaseDamageTaken ? 2 : 1; },
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? 2.75 : 1; },
    },
    3609: {
        status: function(p) { return p.enemyEffects.increaseDamageTaken ? 2 : 1; },
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? 2.75 : 1; },
    },
    3612: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Free Spirit") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.75 : 2.5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.75 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3613: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Free Spirit") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.75 : 2.5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.75 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3614:{
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain != null && (p.captain.class.has("Slasher") || p.captain.class.has("Free Spirit")) ? 2 : 1;
        },
    },
    3615: {
        chainAddition: function(p) { return 1.1; }
    },
    3616: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? 2.25 : 1; },
        type: "type",
    },
    3617:{
        atkbase: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 0; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain != null && (p.captain.class.has("Striker") || p.captain.class.has("Powerhouse")) ? 900 : 0;
        },
    },
    3618: {
        chainAddition: function(p) { return 1.1; }
    },
    3621: {
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 5 : 1;
        }
    },
    3622: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Slasher") ? 1.5 : 1; },
        type: "type",
    },
    3623:{
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 35 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.captain != null && (p.captain.class.has("Striker") || p.captain.class.has("Free Spirit")) ? 2.5 : 2.25;
        },
    },
    3624: {
        atkPlus: function(p) { return [0.25, 0, 0.25][p.cached.multiplier]; },
        atk: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? [1, 2, 2][p.cached.multiplier] : 1; },
        type: "type",
        turnedOn: false,
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
            p.scope.notify({
                text: 'Using the ' + ["ATK Buff", "ATK boost", "ATK boost and ATK buff"][n] + '. To switch to ' + ["ATK Buff", "ATK boost", "ATK boost and ATK buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        },
    },
    3625: {
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "INT" ? [2.25, [2.25, 1, 2.25][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "INT" ? [1, [1, 2.25, 2.25][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: '' + ["Orb", "ATK", "ATK and Orb"][n] + ' boost. To ' + ["Orb", "ATK", "ATK and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3626: {
        atkbase: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 500 : 0; },
    },
    3627: {
        atkbase: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 800 : 0; },
    },
    3628: {
        tapTiming: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") ? { Good: 0.2, Great: 0.3, Perfect: 0.3 } : { Good: 0, Great: 0, Perfect: 0 }; },
        atk: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") ? [2.75, 1, 2.75][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3629: {
        tapTiming: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") ? { Good: 0.2, Great: 0.3, Perfect: 0.3 } : { Good: 0, Great: 0, Perfect: 0 }; },
        atk: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") ? [2.75, 1, 2.75][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3630: {
        tapTiming: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? { Good: 0.2, Great: 0.3, Perfect: 0.3 } : { Good: 0, Great: 0, Perfect: 0 }; },
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? [2.75, 1, 2.75][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3631: {
        tapTiming: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? { Good: 0.2, Great: 0.3, Perfect: 0.3 } : { Good: 0, Great: 0, Perfect: 0 }; },
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? [2.75, 1, 2.75][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3632: {
        status: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = p.captain ? p.captain.class.has("Striker") || p.captain.class.has("Driven") ? levels[n] : 1 : 1;
            if (p.cached.multiplier != 1) p.scope.notify({
                text: '' + levels[n] + 'x boost. To ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3633: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain ? p.captain.class.has("Cerebral") || p.captain.class.has("Free Spirit") ? 1 : 0 : 0;
        },
    },
    3634: {
        affinity: function(p) { return p.unit.class.has("Driven") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.Driven >= 6 ? 2.25 : 1;
        }
    },
    3635: {
        atkPlus: function(p) { return [0.25, 0, 0.25][p.cached.multiplier]; },
        status: function(p) { return p.delayed > 0 ? [ 1, 2, 2 ][p.cached.multiplier] : 1; },
        delay: function(p) { return 1; },
        turnedOn: false,
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
            p.scope.notify({
                text: 'Using the ' + ["ATK Buff", "Status boost", "Status boost and ATK buff"][n] + '. To switch to ' + ["ATK Buff", "Status boost", "Status boost and ATK buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        },
    },
    3636: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2.5) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 35 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.captain ? p.captain.class.has("Powerhouse") ? 2.5 : 1 : 1;
        },
    },
    3637: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2.5) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 35 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.captain ? p.captain.class.has("Powerhouse") ? 2.5 : 1 : 1;
        },
    },
    3638: {
        affinity: function(p) { return p.unit.type == "QCK" ? 1.75 : 1; },
    },
    3640: {
        chain: function(p) { return [3, 2.5, 2.75][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [40, 35, 35][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.cached.multiplier == null || p.cached.multiplier == 2 ? p.captain && (p.captain.class.has("Powerhouse") || p.captain.class.has("Driven")) ? 0 : 1 : 2;
            p.scope.notify({
                text: 'Using the ' + [3, 2.5, 2.75][p.cached.multiplier] + 'x Chain Boundary boost. To switch the boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3641: {
        chain: function(p) { return [3, 2.5, 2.75][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [40, 35, 35][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.cached.multiplier == null || p.cached.multiplier == 2 ? p.captain && (p.captain.class.has("Powerhouse") || p.captain.class.has("Driven")) ? 0 : 1 : 2;
            p.scope.notify({
                text: 'Using the ' + [3, 2.5, 2.75][p.cached.multiplier] + 'x Chain Boundary boost. To switch the boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3642: {
        affinity: function(p) { return p.unit.class.has("Powerhouse") || p.unit.class.has("Driven") ? 2 : 1; },
    },
    3643: {
        orb: function(p) { return p.unit.class.has("Powerhouse") || p.unit.class.has("Driven") ? 2 : 1; },
    },
    3644: {
        atkbase: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 750 : 0; },
    },
    3645: {
        atkbase: function(p) { return p.unit.class.has("Powerhouse") || p.unit.class.has("Driven") ? 900 : 0; },
        chainAddition: function(p) { return 1.1; },
    },
    3646: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? 2 : 1; },
        type: "type",
    },
    3647: {
        chain: function(p) { return 3.25; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.25 : 1;
        }
    },
    3648:{
        poison: function(p) { return 99; },
        status: function(p) { return p.poisoned ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain != null && (p.captain.class.has("Striker") || p.captain.class.has("Driven")) ? 2.25 : 1;
        },
    },
    3649:{
        delay: function(p) { return 3; },
        status: function(p) { return p.delayed ? p.cached.multiplier : 1; },
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? 2.5 : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain != null && (p.captain.type == "STR" || p.captain.type == "DEX")) || p.sourceSlot < 2 ? 2.25 : 2;
        },
    },
    3650:{
        delay: function(p) { return 3; },
        status: function(p) { return p.delayed ? p.cached.multiplier : 1; },
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? 2.5 : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain != null && (p.captain.type == "STR" || p.captain.type == "DEX")) || p.sourceSlot < 2 ? 2.25 : 2;
        },
    },
    3651:{
        chainAddition: function(p) { return p.cached.multiplier; },
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? 2.25 : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain != null && (p.captain.type == "DEX" || p.captain.type == "QCK")) || p.sourceSlot < 2 ? 1.6 : 1.4;
        },
    },
    3652:{
        chainAddition: function(p) { return p.cached.multiplier; },
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? 2.25 : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain != null && (p.captain.type == "DEX" || p.captain.type == "QCK")) || p.sourceSlot < 2 ? 1.6 : 1.4;
        },
    },
    3653:{
        atkbase: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? (p.cached.sourceSlot < 2 || (p.cached.captain.type == "STR" || p.cached.captain.type == "QCK")) ? 1250 : 1000 : 1; },
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? 2.5 : 1; },
        type: "type",
    },
    3654:{
        atkbase: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? (p.cached.sourceSlot < 2 || (p.cached.captain.type == "STR" || p.cached.captain.type == "QCK")) ? 1250 : 1000 : 1; },
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? 2.5 : 1; },
        type: "type",
    },
    3655:{
        def: function(p) { return 0; },
    },
    3656:{
        status: function(p) { return p.defenseDown ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain != null && (p.captain.type == "DEX" || p.captain.type == "QCK") ? 2.25 : 1;
        },
    },
    3657:{
        orb: function(p) { return 1.75; },
    },
    3658: {
        chainAddition: function(p) { return 1.0; },
    },
    3659: {
        orbPlus: function(p) { return [0.2, 0, 0.2][p.cached.multiplier]; },
        orb: function(p) { return p.unit.type == "DEX" || p.unit.type == "PSY" ? [1, 2.25, 2.25][p.cached.multiplier] : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb Buff", "Orb boost", "Orb boost and Orb buff"][n] + '. To switch to ' + ["Orb Buff", "Orb boost", "Orb boost and Orb buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        },
    },
    3660: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.type == "PSY" ? 2.25 : 1; },
        type: "type",
    },
    3661: {
        atkbase: function(p) { return [0, 900, 900][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "PSY" ? [1.75, 1, 1.75][p.cached.multiplier] : 1; },
        turnedOn: false,
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity", "Base ATK", "Base ATK and Affinity"][n] + ' boost. To switch to ' + ["Affinity", "Base ATK", "Base ATK and Affinity"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3663: {
        chainPlus: function(p) { 
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1];
            return p.chainPosition === 0 ? 0 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [0.25, 0, 0.25][p.cached.multiplier] : 0;
        }, 
        chain: function(p) { return [1, 3.5, 3.5][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [Infinity, 3.5, 3.5][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Lock Buff", "Chain Lock", "Chain Lock and Chain Lock Buff"][n] + '. To switch to ' + ["Chain Lock Buff", "Chain Lock", "Chain Lock and Chain Lock Buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3664: {
        status: function(p) { return p.delayed ? 1.5: 1; },
        delay: function(p) { return 1; },
        ignoresImmunities: function(p) { return ['delay']; },
        warning: "Selected special (%name%) assumes that the enemy has 3 enemies."
    },
    3665: {
        chain: function(p) { return 3.0; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 25.0 : 1;
        }
    },
    3666: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Shooter") || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [[1, 2.25, 2.25, 2.25, 2.25][p.cached.multiplier], [1, 2.25, 2.5, 2.25, 2.5][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "type",
        staticMult: function(p) { return [[Math.min(p.damageCounter,120000) * 25, 0, Math.min(p.damageCounter,120000) * 25, Math.min(p.damageCounter,120000) * 25, Math.min(p.damageCounter,120000) * 25][p.cached.multiplier], [Math.min(p.damageCounter,120000) * 25, 0, 0, Math.min(p.damageCounter,120000) * 25, Math.min(p.damageCounter,120000) * 25][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            var levels = [[0, 1, 2], [0, 1, 2, 3, 4]][CrunchUtils.llimitUnlock(p, "specials")];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            var effecttext = [["Additional Damage", "ATK", "Additional Damage and ATK"], ["Additional Damage", "ATK", "Stronger ATK", "Additional Damage and ATK", "Additional Damage and Stronger ATK"]]
            p.scope.notify({
                text: 'Using the ' + effecttext[n] + ' boost. To switch to ' + effecttext[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3667: {
        atk: function(p) { return p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") ? 1.5 : 1; },
        type: "type",
    },
    3670: {
        affinity: function(p) { return (p.unit.type == "DEX" || p.unit.type == "PSY") ? (p.cached.colorCount.DEX + p.cached.colorCount.PSY == 6 ? 2.5 : 2.25) : 1; },
        increaseDamageTaken: function(p) { return 1.75; },
    },
    3671: {
        status: function(p) { return p.defenseDown ? [ 1, 2, 2 ][p.cached.multiplier] : 1; },
        def: function(p) { return [ 0, 1, 0 ][p.cached.multiplier]; },
        turnedOn: false,
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Defense Reduction", "Status boost", "Status boost and Defense Reduction"][n] + '. To switch to ' + ["Defense Reduction", "Status boost", "Status boost and Defense Reduction"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3672: {
        orb: function(p) { return 1.5; },
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'x boost. To use the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3673: {
        tapTiming: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? { Good: 0.2, Great: 0.3, Perfect: 0.3 } : { Good: 0, Great: 0, Perfect: 0 }; },
        atkbase: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? 1250 : 1; },
    },
    3674: {
        tapTiming: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? { Good: 0.2, Great: 0.3, Perfect: 0.3 } : { Good: 0, Great: 0, Perfect: 0 }; },
        atkbase: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? 1250 : 1; },
    },
    3677: {
        chainAddition: function(p) { return 1.1; },
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = p.percHP >= 90 ? 2 : 1.75;
        },
    },
    3678: {
        affinity: function(p) { return 1.75; },
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            var levels = [1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ATK boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3679: {
        delay: function(p) { return 1; },
        status: function(p) { return p.delayed > 0 ? 1.25 : 1; },
    },
    3680: {
        chainAddition: function(p) { return [0, 0, 0, 0, 1.4, 1.4, 1.4, 1.4][p.cached.multiplier]; },
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? [2.5, 2.75, 3, 2.5, 2.5, 2.75, 3, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? [2, 2.25, 2.5, 2.5, 2, 2.25, 2.5, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6, 7];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Stage 1", "Stage 2", "Stage 3", "Buff Clear", "Stage 1 with Chain Addition", "Stage 2 with Chain Addition", "Stage 3 with Chain Addition", "Buff Clear with Chain Addition"][n] + ' boost. To ' + ["Stage 1", "Stage 2", "Stage 3", "Buff Clear", "Stage 1 with Chain Addition", "Stage 2 with Chain Addition", "Stage 3 with Chain Addition", "Buff Clear with Chain Addition"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3681: {
        affinity: function(p) { return p.unit.type == "INT" || p.unit.class.has("Cerebral") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2.25, 2.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3682: {
        affinity: function(p) { return p.unit.type == "INT" || p.unit.class.has("Cerebral") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2.25, 2.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3684: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [0.9, 1.1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = p.captain != null && (p.captain.type == "INT") ? levels[n] : 0;
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3685: {
        def: function(p) { return [1, 0][p.cached.multiplier]; },
        status: function(p) { return p.defenseDown ? [1, 2][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain != null && (p.captain.type == "INT") ? 1 : 0;
        },
    },
    3686: {
        atkPlus: function(p) { return [0.25, 0, 0.25][p.cached.multiplier]; },
        atk: function(p) { return p.unit.type == "INT" ? [1, 2, 2][p.cached.multiplier] : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK Buff", "ATK boost", "ATK boost and ATK buff"][n] + '. To switch to ' + ["ATK Buff", "ATK boost", "ATK boost and ATK buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3687: {
        orbPlus: function(p) { return [0, 0.25, 0.25][p.cached.multiplier]; },
        orb: function(p) { return p.unit.type == "INT" ? [2, 1, 2][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "Orb Buff", "Orb boost and Orb buff"][n] + '. To switch to ' + ["Orb boost", "Orb Buff", "Orb boost and Orb buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3688: {
        chain: function(p) { return 3.25; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.25 : 1;
        }
    },
    3689: {
        atkbase: function(p) { return p.unit.type == "INT" ? 1000 : 1; },
    },
    3690: {
        affinityPlus: function(p) { return [0.25, 0, 0.25][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? [1, 2, 2][p.cached.multiplier] : 1; },
        turnedOn: false,
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
            p.scope.notify({
                text: 'Using the ' + ["Affinity Buff", "Affinity boost", "Affinity boost and Affinity buff"][n] + '. To switch to ' + ["Affinity Buff", "Affinity boost", "Affinity boost and Affinity buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        },
    },
    3691: {
        chainAddition: function(p) { return 1.1; },
    },
    3692: {
        orb: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3693: {
        orb: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.type == "QCK" ? [2.25, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        rcv: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.type == "QCK" ? 1.5 : 1; },
    },
    3694: {
        chainAddition: function(p) { return [1.4, 0, 1.4][p.cached.multiplier]; },
        chainAdditionPlus: function(p) { return [0, 0.5, 0.5][p.cached.multiplier]; },
        affinity: function(p) { return [p.unit.type == "QCK" ? 2.75 : 1, 2.25][p.cached.multiplier2]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.colorCount.QCK >= 5 ? 0 : 1;
            p.scope.notify({
                text: 'Using the ' + ["Chain Boost", "Chain Buff", "Chain Boost & Chain Buff"][levels[n]] + '. To switch to the ' + ["Chain Boost", "Chain Buff", "Chain Boost & Chain Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3695: {
        chainAddition: function(p) { return [1.4, 0, 1.4][p.cached.multiplier]; },
        chainAdditionPlus: function(p) { return [0, 0.5, 0.5][p.cached.multiplier]; },
        affinity: function(p) { return [p.unit.type == "QCK" ? 2.75 : 1, 2.25][p.cached.multiplier2]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.colorCount.QCK >= 5 ? 0 : 1;
            p.scope.notify({
                text: 'Using the ' + ["Chain Boost", "Chain Buff", "Chain Boost & Chain Buff"][levels[n]] + '. To switch to the ' + ["Chain Boost", "Chain Buff", "Chain Boost & Chain Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3696: {
        chainPlus: function(p) { 
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1];
            return p.chainPosition === 0 ? 0 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [0, 0.25, 0.25][p.cached.multiplier] : 0;
        }, 
        chain: function(p) { return [2.75, 1, 2.75][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [35, Infinity, 35][p.cached.multiplier] : 1;
        },
        orbPlus: function(p) { return [0, 0.3, 0.3][p.cached.multiplier]; },
        orb: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Shooter") ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Boundary & Orb Boost", "Chain & Orb Buff", "Chain Boundary & Orb Boost & Buff"][levels[n]] + '. To switch to the ' + ["Chain Boundary & Orb Boost", "Chain & Orb Buff", "Chain Boundary & Orb Boost & Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3697: {
        chainPlus: function(p) { 
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1];
            return p.chainPosition === 0 ? 0 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [0, 0.25, 0.25][p.cached.multiplier] : 0;
        }, 
        chain: function(p) { return [2.75, 1, 2.75][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [35, Infinity, 35][p.cached.multiplier] : 1;
        },
        orbPlus: function(p) { return [0, 0.3, 0.3][p.cached.multiplier]; },
        orb: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Shooter") ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Boundary & Orb Boost", "Chain & Orb Buff", "Chain Boundary & Orb Boost & Buff"][levels[n]] + '. To switch to the ' + ["Chain Boundary & Orb Boost", "Chain & Orb Buff", "Chain Boundary & Orb Boost & Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3698: {
        atkbase: function(p) { return p.unit.type == "QCK" || p.unit.type == "INT" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain != null && (p.captain.type == "QCK" || p.captain.type == "INT") ? 800 : 0;
        },
    },
    3699: {
        atk: function(p) { return p.unit.type == "QCK" ? 2.25 : 1; },
        type: "type",
    },
    3701: {
        chainAddition: function(p) { return 0.7; },
        status: function(p) { return p.defenseDown ? [ 1, 1.75, 1.75 ][p.cached.multiplier] : 1; },
        def: function(p) { return [ 0, 1, 0 ][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Defense Reduction", "Status boost", "Status boost and Defense Reduction"][n] + '. To switch to ' + ["Defense Reduction", "Status boost", "Status boost and Defense Reduction"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3702: {
        chainAddition: function(p) { return 1.0; },
    },
    3703: {
        def: function(p) { return 0.5; }
    },
    3705: {
        atkPlus: function(p) { return [0, 0, 0, 0.25, 0.25, 0.25, 0.25][p.cached.multiplier]; },
        orbPlus: function(p) { return [0, 0, 0, 0.25, 0.25, 0.25, 0.25][p.cached.multiplier]; },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? [3.25, 1, 3.25, 1, 3.25, 1, 3.25][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? [1, 2.75, 2.75, 1, 1, 2.75, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb", "Boost Buffs", "ATK and Boost Buffs", "Orb and Boost Buffs", "ATK, Orb and Boost Buffs"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb", "Boost Buffs", "ATK and Boost Buffs", "Orb and Boost Buffs", "ATK, Orb and Boost Buffs"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3706: {
        atkPlus: function(p) { return [0, 0, 0, 0.25, 0.25, 0.25, 0.25][p.cached.multiplier]; },
        orbPlus: function(p) { return [0, 0, 0, 0.25, 0.25, 0.25, 0.25][p.cached.multiplier]; },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? [3.25, 1, 3.25, 1, 3.25, 1, 3.25][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? [1, 2.75, 2.75, 1, 1, 2.75, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb", "Boost Buffs", "ATK and Boost Buffs", "Orb and Boost Buffs", "ATK, Orb and Boost Buffs"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb", "Boost Buffs", "ATK and Boost Buffs", "Orb and Boost Buffs", "ATK, Orb and Boost Buffs"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3709: {
        affinity: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Slasher") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'x boost. To use the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3710: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [0.75, 1.1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'x boost. To use the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3713: {
        chainAddition: function(p) { return 1.1; },
        status: function(p) { return p.defenseDown ? [ 1, 2, 2 ][p.cached.multiplier] : 1; },
        def: function(p) { return [ 0, 1, 0 ][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Defense Reduction", "Status boost", "Status boost and Defense Reduction"][n] + '. To switch to ' + ["Defense Reduction", "Status boost", "Status boost and Defense Reduction"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3714: {
        orb: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Fighter") || p.unit.class.has("Cerebral") ? 2.25 : 1; },
    },
    3715: {
        status: function(p) { return p.defenseDown ? 2 : 1; },
        def: function(p) { return 0; },
    },
    3717: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 1.5 : 1; },
        type: "type",
    },
    3718:{
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "PSY" ? [[2.25, 1, 2.25, 2.25, 2.25], [2.25, 2.5, 1, 2.25, 2.5]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        type: "type",
        chainAddition: function(p) { return [[0, 1.1, 1.1, 1.1, 1.1], [0, 0, 1.3, 1.3, 1.3]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier]; },
        turnedOn: false,
        onActivation: function(p) {
            var levels = [[0, 1, 2],[0, 1, 2, 3, 4]][CrunchUtils.llimitUnlock(p, "specials")];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            var effecttext = [['Affinity', 'Chain Boost', 'Affinity and Chain']['Affinity', '2.25x Affinity', 'Chain Boost', 'Affinity and Chain', '2.25x Affinity and Chain']][CrunchUtils.llimitUnlock(p, "specials")];
            p.scope.notify({
                text: '' + effecttext[n] + ' boost. To ' + effecttext[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3719: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 6 : 1;
        }
    },
    3720: {
        chain: function(p) { return 2.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 8 : 1;
        }
    },
    3721: {
        chainAddition: function(p) { return [0, 0, 0, 0, 1.4, 1.4, 1.4, 1.4][p.cached.multiplier]; },
        orb: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [2.5, 2.75, 3, 2.75, 2.5, 2.75, 3, 2.75][p.cached.multiplier] : 1; },
        affinity: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [2.25, 2.5, 2.75, 2.5, 2.25, 2.5, 2.75, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6, 7];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Stage 1", "Stage 2", "Stage 3", "Buff Clear", "Stage 1 with Chain Addition", "Stage 2 with Chain Addition", "Stage 3 with Chain Addition", "Buff Clear with Chain Addition"][n] + ' boost. To ' + ["Stage 1", "Stage 2", "Stage 3", "Buff Clear", "Stage 1 with Chain Addition", "Stage 2 with Chain Addition", "Stage 3 with Chain Addition", "Buff Clear with Chain Addition"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3722: {
        atk: function(p) { return p.tokiState ? p.cached.multiplier : 1; },
        type: "type",
        orb: function(p) { return p.tokiState ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.colorCount.STR >= 1 && p.colorCount.DEX >= 1 && p.colorCount.QCK >= 1 && p.colorCount.PSY >= 1 && p.colorCount.INT >= 1) ? 4 : (p.colorCount.PSY >= 4) ? 3.5 : 1;
        },
    },
    3723: {
        atk: function(p) { return p.tokiState ? p.cached.multiplier : 1; },
        type: "type",
        orb: function(p) { return p.tokiState ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.colorCount.STR >= 1 && p.colorCount.DEX >= 1 && p.colorCount.QCK >= 1 && p.colorCount.PSY >= 1 && p.colorCount.INT >= 1) ? 4 : (p.colorCount.PSY >= 4) ? 3.5 : 1;
        },
    },
    3724: {
        chain: function(p) { return p.cached.multiplier[0]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier[1] : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = (p.colorCount.STR >= 1 && p.colorCount.DEX >= 1 && p.colorCount.QCK >= 1 && p.colorCount.PSY >= 1 && p.colorCount.INT >= 1) ? [ 2.5, 10 ] : [ 3.25, 3.25 ];
        },
    },
    3725: {
        status: function(p) { return 1.75; },
        warning: "Selected special (%name%) assumes that the enemy has been inflicted with Burn."
    },
    3726: {
        atkPlus: function(p) { return p.cached.multiplier; },
        orbPlus: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = (p.colorCount.STR >= 1 && p.colorCount.DEX >= 1 && p.colorCount.QCK >= 1 && p.colorCount.PSY >= 1 && p.colorCount.INT >= 1) ? 0.25 : 0;
        },
    },
    3727: {
        chainAdditionPlus: function(p) { return [0, 0.3, 0.3][p.cached.multiplier]; },
        chainAddition: function(p) { return [1, 0, 1][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Addition Boost", "Chain Addition Buff", "Chain Addition Boost and Buff"][n] + '. To switch to ' + ["Chain Addition Boost", "Chain Addition Buff", "Chain Addition Boost and Buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3728: {
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        orb: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = (p.colorCount.STR >= 1 && p.colorCount.DEX >= 1 && p.colorCount.QCK >= 1 && p.colorCount.PSY >= 1 && p.colorCount.INT >= 1) ? 2.25 : 1.5;
        },
    },
    3729: {
        chainAddition: function(p) { return 1.5; },
    },
    3730: {
        chainAddition: function(p) { return 1.5; },
    },
    3731: {
        atk: function(p) { return p.unit.type == "DEX" ? 1.5 : 1; },
        type: "type",
    },
    3732: {
        affinity: function(p) { return p.unit.type == "QCK" ? 2 : 1; },
    },
    3733: {
        chain: function(p) { return p.cached.multiplier1[0]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier1[1] : 1;
        },
        chainAddition: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            p.cached.multiplier1 = p.captain != null && (p.captain.class.has("Striker") || p.captain.class.has("Driven")) ? [2, 15] : [0, Infinity];
            p.cached.multiplier2 = p.captain != null && p.captain.type == "QCK" ? 0.8 : 0;
        },
    },
    3734: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? [1, 2.25, 2.25][p.cached.multiplier] : 1; },
        type: "type",
        atkbase: function(p) { return p.unit.type == "QCK" ? [0, 1000, 1000][p.cached.multiplier] : 0; },
        orb: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? [2.75, 1, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb Boost", "ATK and Base ATK buffs", "Orb, ATK and Base ATK buffs"][n] + '. To switch to ' + ["Orb Boost", "ATK and Base ATK buffs", "Orb, ATK and Base ATK buffs"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3735: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? [1, 2.25, 2.25][p.cached.multiplier] : 1; },
        type: "type",
        atkbase: function(p) { return p.unit.type == "QCK" ? [0, 1000, 1000][p.cached.multiplier] : 0; },
        orb: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? [2.75, 1, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb Boost", "ATK and Base ATK buffs", "Orb, ATK and Base ATK buffs"][n] + '. To switch to ' + ["Orb Boost", "ATK and Base ATK buffs", "Orb, ATK and Base ATK buffs"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3737: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse") ? 2.25 : 1; },
        type: "type",
    },
    3738: {
        chainPlus: function(p) { 
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1];
            return p.chainPosition === 0 ? 0 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [0, 0.25, 0.25][p.cached.multiplier] : 0;
        }, 
        chain: function(p) { return [3, 1, 3][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [3, Infinity, 3][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Lock", "Chain Buff", "Chain Lock & Buff"][levels[n]] + '. To switch to the ' + ["Chain Lock", "Chain Buff", "Chain Lock & Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3739:{
        orb: function(p) { return (p.slot == p.sourceSlot) ? p.cached.multiplier : 1; },
        atk: function(p) { return (p.slot == p.sourceSlot) ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [[3, 3.5, 4],[3.5, 3.75, 4]][CrunchUtils.llimitUnlock(p, "specials")];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3740: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 2.75 : 1; },
        type: "type",
        turnedOn: false,
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        }
    },
    3741: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 2.75 : 1; },
        type: "type",
        turnedOn: false,
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        }
    },
    3742: {
        atk: function(p) { return p.unit.type == "INT" || p.unit.class.has("Fighter") || p.unit.class.has("Shooter") ? [2.5, 1, 2.5, 1, 2.5, 1, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        affinity: function(p) { return p.unit.type == "INT" || p.unit.class.has("Fighter") || p.unit.class.has("Shooter") ? [1, 2.25, 2.25, 1, 1, 2.25, 2.25][p.cached.multiplier] : 1; },
        chainCeil: function(p) { 
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1];
            return p.chainPosition === 0 ? 0 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [0, 0, 0, 3.75, 3.75, 3.75, 3.75][p.cached.multiplier] : 0;
        },
        orbCeil: function(p) { return [1, [1, 1, 1, 3, 3, 3, 3][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")];},
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6 ];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Affinity", "ATK and Affinity", "Chain Override", "ATK and Chain Override", "Affinity and Chain Override", "ATK, Affinity and Chain Override"][n] + ' boost. To ' + ["ATK", "Affinity", "ATK and Affinity", "Chain Override", "ATK and Chain Override", "Affinity and Chain Override", "ATK, Affinity and Chain Override"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3743: {
        orb: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? 2.25 : 1; },
    },
    3744: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? [3, 1, 3][p.cached.multiplier] : 1; },
        type: "type",
        atkPlus: function(p) { return [0, 0.25, 0.25][p.cached.multiplier]; },
        orbPlus: function(p) { return [0, 0.25, 0.25][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK Boost", "ATK/Orb buffs", "ATK and Base ATK/Orb buffs"][n] + '. To switch to ' + ["ATK Boost", "ATK/Orb buffs", "ATK and Base ATK/Orb buffs"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3745: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? [3, 1, 3][p.cached.multiplier] : 1; },
        type: "type",
        atkPlus: function(p) { return [0, 0.25, 0.25][p.cached.multiplier]; },
        orbPlus: function(p) { return [0, 0.25, 0.25][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK Boost", "ATK/Orb buffs", "ATK and Base ATK/Orb buffs"][n] + '. To switch to ' + ["ATK Boost", "ATK/Orb buffs", "ATK and Base ATK/Orb buffs"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3746: {
        orb: function(p) { return p.unit.type == "STR" || p.unit.class.has("Slasher") ? p.cached.multiplier1 : 1; },
        atkbase: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            p.cached.multiplier1 = p.classCount.Slasher >= 5 ? 2.25 : 1;
            var levels = [0, 800];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier2 = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'base ATK boost. To use the ' + levels[(n + 1) % levels.length] + 'base ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3747: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.class.has("Slasher") ? p.cached.multiplier1 : 1; },
        type: "type",
        affinity: function(p) { return p.unit.type == "STR" || p.unit.class.has("Slasher") ? p.cached.multiplier2 : 1; },
        onActivation: function(p) {
            p.cached.multiplier1 = p.classCount.Slasher >= 5 ? 2.25 : 1;
            var levels = [1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier2 = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'x Affinity boost. To use the ' + levels[(n + 1) % levels.length] + 'x Affinity boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3748: {
        def: function(p) { return 0; },
        status: function(p) { return p.defenseDown ? p.cached.multiplier[0] : 1; },
        chainAddition: function(p) { return p.cached.multiplier[1]; },
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.Slasher >= 5 ? [1.75, 1.0] : [1, 0];
        },
    },
    3749: {
        delay: function(p) { return 1; },
    },
    3750: {
        atk: function(p) { return p.unit.class.has("Driven") ? 2.5 : 1; },
        type: "type",
    },
    3751: {
        orb: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? p.cached.multiplier1 : 1; },
        affinity: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? p.cached.multiplier1 : 1; },
        increaseDamageTakenPlus: function(p) { return multiplier2; },
        onActivation: function(p) {
            p.cached.multiplier1 = p.damageCounter >= 50000 ? 2.5 : 2.25;
            p.cached.multiplier2 = p.captain.class.has("Driven") || p.captain.class.has("Powerhouse") ? 0.3 : 0;
        }
    },
    3752: {
        orb: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? p.cached.multiplier1 : 1; },
        affinity: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? p.cached.multiplier1 : 1; },
        increaseDamageTakenPlus: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            p.cached.multiplier1 = p.damageCounter >= 50000 ? 2.5 : 2.25;
            p.cached.multiplier2 = p.captain.class.has("Driven") || p.captain.class.has("Powerhouse") ? 0.3 : 0;
        }
    },
    3753: {
        chainAddition: function(p) { return 0.9; },
    },
    3754: {
        tapTiming: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? { Good: 0.2, Great: 0.3, Perfect: 0.3 } : { Good: 0, Great: 0, Perfect: 0 }; },
        chainMultiplication: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1, 1.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x chain boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x chain boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3755: {
        tapTiming: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? { Good: 0.2, Great: 0.3, Perfect: 0.3 } : { Good: 0, Great: 0, Perfect: 0 }; },
        chainMultiplication: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1, 1.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x chain boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x chain boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3756: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Cerebral") ? 2 : 1; },
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x chain boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x chain boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3757: {
        orb: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Driven") ? 2.25 : 1; },
    },
    3758: {
        increaseDamageTaken: function(p) { return 1.3; },
        chain: function(p) { return p.cached.multiplier[0]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier[1] : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Driven") || p.captain.class.has("Powerhouse")) ? [ 3.5, 3.5 ] : [ 1, Infinity ];
        },
    },
    3759: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? 1.5 : 1; },
        type: "type",
    },
    3760: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? 2.25 : 1; },
        type: "type",
    },
    3761: {
        atkPlus: function(p) { return 0.25; },
        warning: "Selected special (%name%) does not account for the Class of character that applies the buff and WILL BE INCORRECT some, if not all, of the time. Use at your own risk."
    },
    3762: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Driven") ? 2.5 : 1; },
        type: "type",
        turnedOn: false,
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = [false, true][CrunchUtils.llimitUnlock(p, "specials")];
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        }
    },
    3763: {
        atkbase: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [500, 1000];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + ' base ATK boost. To switch to the ' + levels[(n + 1) % levels.length] + ' base ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3764: {
        atkbase: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [750, 1000];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + ' base ATK boost. To switch to the ' + levels[(n + 1) % levels.length] + ' base ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3765: {
        status: function(p) { return [2, 2.25, 2.25][p.cached.multiplier]; },
        atkbase: function(p) { return p.unit.type == "INT" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [1000, 1250, 1500][p.cached.multiplier] : 0; },
        atkPlus: function(p) { return [0, 0, 0.3][p.cached.multiplier]; },
        orbPlus: function(p) { return [0, 0, 0.3][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the Stage' + [1, 2, 3][n] + ' special. To switch to ' + [1, 2, 3][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3766: {
        status: function(p) { return [2, 2.25, 2.25][p.cached.multiplier]; },
        atkbase: function(p) { return p.unit.type == "INT" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [1000, 1250, 1500][p.cached.multiplier] : 0; },
        atkPlus: function(p) { return [0, 0, 0.3][p.cached.multiplier]; },
        orbPlus: function(p) { return [0, 0, 0.3][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the Stage' + [1, 2, 3][n] + ' special. To switch to ' + [1, 2, 3][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3767: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 2.25 : 1; },
        type: "type",
    },
    3768: {
        orb: function(p) { return 2; },
    },
    3769: {
        delay: function(p) { return 2; },
    },
    3770: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1, 1.2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x chain boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x chain boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3771: {
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? 2.5 : 1; },
    },
    3772: {
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? 2.5 : 1; },
    },
    3773: {
        affinity: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3774: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        chain: function(p) { return [p.cached.multiplier1[0], 1, p.cached.multiplier1[0]][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [p.cached.multiplier1[1], Infinity, p.cached.multiplier1[1]][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = (p.percHP > 99) ? [ 3.0, 40 ] : [ 2.5, 35 ];
            p.scope.notify({
                text: 'Using the ' + ["Chain Boundary", "ATK", "Chain Boundary and ATK"][n] + ' boost. To switch to ' + ["Chain Boundary", "ATK", "Chain Boundary and ATK"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3775: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        chain: function(p) { return [p.cached.multiplier1[0], 1, p.cached.multiplier1[0]][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [p.cached.multiplier1[1], Infinity, p.cached.multiplier1[1]][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = (p.percHP > 99) ? [ 3.0, 40 ] : [ 2.5, 35 ];
            p.scope.notify({
                text: 'Using the ' + ["Chain Boundary", "ATK", "Chain Boundary and ATK"][n] + ' boost. To switch to ' + ["Chain Boundary", "ATK", "Chain Boundary and ATK"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3776: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = (p.percHP > 99) ? 1 : 0;
        },
    },
    3777: {
        atk: function(p) { return p.unit.type == "PSY" ? [1, 2, 2][p.cached.multiplier] : 1; },
        affinity: function(p) { return p.unit.type == "PSY" ? [p.cached.multiplier1, 1, p.cached.multiplier1][p.cached.multiplier] : 1; },
        orb: function(p) { return p.unit.type == "PSY" ? [p.cached.multiplier1, 1, p.cached.multiplier1][p.cached.multiplier] : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = (p.percHP > 99) ? 2 : 1.75;
            p.scope.notify({
                text: 'Using the ' + ["Affinity and Orb", "ATK", "Affinity, Orb and ATK"][n] + ' boost. To switch to ' + ["Affinity and Orb", "ATK", "Affinity, Orb and ATK"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3778: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.type == "STR" || p.captain.type == "DEX" || p.captain.type == "QCK") ? 2.25 : 1;
        },
    },
    3779: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.5 : 1; },
        type: "type",
    },
    3780: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.5 : 1; },
        type: "type",
    },
    3781: {
        orb: function(p) { return p.unit.type == "STR" || p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? 2 : 1; },
    },
    3782: {
        atkPlus: function(p) { return [0.25, 0, 0.25][p.cached.multiplier]; },
        atk: function(p) { return p.unit.type == "STR" || p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") ? [1, 2, 2][p.cached.multiplier]: 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK Buff", "ATK boost", "ATK boost and ATK buff"][n] + '. To switch to ' + ["ATK Buff", "ATK boost", "ATK boost and ATK buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3785: {
        atk: function(p) { return 2; },
        type: "type",
    },
    3786: {
        atk: function(p) { return [2.75, 3, 3.25, 1, 2.75, 3, 3.25][p.cached.multiplier]; },
        affinity: function(p) { return [1, 1, 1, 2.25, 2.25, 2.25, 2.25][p.cached.multiplier]; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["2.75x ATK boost", "3x ATK boost", "3.25x ATK boost", "Affinity boost", "2.75x ATK boost and Affinity boost", "3x ATK boost and Affinity boost", "3.25x ATK boost and Affinity boost"][n] + '. To switch to the ' + ["2.75x ATK boost", "3x ATK boost", "3.25x ATK boost", "Affinity boost", "2.75x ATK boost and Affinity boost", "3x ATK boost and Affinity boost", "3.25x ATK boost and Affinity boost"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3789: {
        chainAddition: function(p) { return Math.min(Math.max(1.5, 1.5 + 0.1 * Math.floor(p.turnCounter/5)), 2.5); },
        atkbase: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Striker") || p.unit.class.has("Free Spirit") ? Math.min(Math.max(1250, 1250 + 250 * Math.floor(p.turnCounter/5)), 3000) : 0; }
    },
    3790: {
        chainAddition: function(p) { return Math.min(Math.max(1.5, 1.5 + 0.1 * Math.floor(p.turnCounter/5)), 2.5); },
        atkbase: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Striker") || p.unit.class.has("Free Spirit") ? Math.min(Math.max(1250, 1250 + 250 * Math.floor(p.turnCounter/5)), 3000) : 0; }
    },
    3791: {
        def: function(p) { return 0.2; },
        status: function(p) { return p.defenseDown ? 2.25 : 1; },
    },
    3792: {
        def: function(p) { return 0.2; },
        status: function(p) { return p.defenseDown ? 2.25 : 1; },
    },
    3793: {
        orbPlus: function(p) { return [0, 0.3, 0.3][p.cached.multiplier]; },
        orb: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "Orb Buff", "Orb boost and Orb buff"][n] + '. To switch to ' + ["Orb boost", "Orb Buff", "Orb boost and Orb buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3794: {
        atkPlus: function(p) { return [0, 0.3, 0.3][p.cached.multiplier]; },
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "ATK Buff", "ATK boost and ATK buff"][n] + '. To switch to ' + ["ATK boost", "ATK Buff", "ATK boost and ATK buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3795: {
        tapTiming: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? { Good: 0.2, Great: 0.2, Perfect: 0.1 } : { Good: 0, Great: 0, Perfect: 0 }; },
        chain: function(p) { return p.cached.multiplier1[0]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier1[1] : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier1 = (p.captain.class.has("Striker") || p.captain.class.has("Cerebral")) ? [2.25, 10] : [1, Infinity];
        },
    },
    3796: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
    },
    3797: {
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? 1.75 : 1; },
    },
    3798: {
        increaseDamageTaken: function(p) { return 1.3; },
    },
    3801: {
        affinity: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? [2, 1, 2][p.cached.multiplier] : 1; },
        atkPlus: function(p) { return [0, 0.2, 0.2][p.cached.multiplier]; },
        orbPlus: function(p) { return [0, 0.2, 0.2][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Affinity Boost", "ATK & Orb Buff", "Affinity and ATK & Orb Buff"][n] + '. To ' + ["Affinity Boost", "ATK & Orb Buff", "Affinity and ATK & Orb Buff"][(n + 1) % levels.length] + ', disable and re-enable this special. This kind of ATK & Orb Boost Buff CAN NOT tell classes of origin yet, WIP.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3802: {
        atk: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Driven") ? 1.5 : 1; },
        type: "type",
    },
    3803: {
        def: function(p) { return [0.1, 0][p.cached.multiplier]; },
        status: function(p) { return p.defenseDown ? [1, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the Stage ' + [1, 2][levels[n]] + ' special. To switch to the Stage' + [1, 2][levels[(n + 1) % levels.length]] + ' special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3804: {
        affinity: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? 2.25 : 1; },
    },
    3805: {
        atk: function(p) { return p.unit.cost <= 40 ? [1, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "type",
        onActivation: function(p) {
            ++p.scope.tdata.sugarToysSpecialEnabled;
        },
        onDeactivation: function(p) {
            --p.scope.tdata.sugarToysSpecialEnabled;
        },
    },
    3806: {
        atkbase: function(p) { return p.unit.cost <= 40 ? 1250 : 1; },
    },
    3807: {
        atkbase: function(p) { return p.unit.cost <= 40 ? 1500 : 1; },
    },
    3808: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? [2.75, 1, 2.75][p.cached.multiplier] : 1; },
        atkPlus: function(p) { return p.cached.multiplier2; },
        orbPlus: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.percHP <= 50.0 ? 0.25 : 0;
            p.scope.notify({
                text: 'Using the ' + ["Orb Boost", "ATK Boost", "Orb and ATK Boost"][n] + '. To switch to ' + ["Orb Boost", "ATK Boost", "Orb and ATK Boost"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3809: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? [2.75, 1, 2.75][p.cached.multiplier] : 1; },
        atkPlus: function(p) { return p.cached.multiplier2; },
        orbPlus: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.percHP <= 50.0 ? 0.25 : 0;
            p.scope.notify({
                text: 'Using the ' + ["Orb Boost", "ATK Boost", "Orb and ATK Boost"][n] + '. To switch to ' + ["Orb Boost", "ATK Boost", "Orb and ATK Boost"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3812: {
        def: function(p) { return [1, 0][p.cached.multiplier]; },
        status: function(p) { return p.defenseDown ? 2 : 1; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + [0, 100][levels[n]] + '% Defense Down. To switch to the Stage' + [0, 100][levels[(n + 1) % levels.length]] + '% Defense Down, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3813: {
        def: function(p) { return 0.2; },
        chain: function(p) { return 2.0; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 10.0 : 1;
        },
    },
    3814: {
        atk: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? [3, 1, 3][p.cached.multiplier] : 1; },
        type: "class",
        orb: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? [1, 2.75, 2.75][p.cached.multiplier] : 1; },
        atkbase: function(p) { return p.slot <= 1 ? Math.min(p.rcvCounter*200,2000) : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK Boost", "Orb Boost", "ATK and Orb Boost"][n] + '. To switch to ' + ["ATK Boost", "Orb Boost", "ATK and Orb Boost"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3815: {
        atkbase: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 800 : 0; },
    },
    3816: {
        chainMultiplication: function(p) { return [1, 1, 1, 1, 1.2, 1.2, 1.2, 1.2][p.cached.multiplier]; },
        atk: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") ? [2.5, 2.75, 3, 2.5, 2.5, 2.75, 3, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") ? [2.25, 2.5, 2.75, 2.5, 2.25, 2.5, 2.75, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6, 7];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Stage 1", "Stage 2", "Stage 3", "Buff Clear", "Stage 1 with Chain Multiplication", "Stage 2 with Chain Multiplication", "Stage 3 with Chain Multiplication", "Buff Clear with Chain Multiplication"][n] + ' boost. To ' + ["Stage 1", "Stage 2", "Stage 3", "Buff Clear", "Stage 1 with Chain Multiplication", "Stage 2 with Chain Multiplication", "Stage 3 with Chain Multiplication", "Buff Clear with Chain Multiplication"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3817: {
        affinity: function(p) { return p.unit.type == "PSY" ? 1.75 : 1; },
    },
    3818: {
        atk: function(p) { return p.unit.type == "PSY" ? 1.75 : 1; },
        type: "type",
    },
    3819: {
        atkbasePlus: function(p) { return p.cached.multiplier2; },
        atkbase: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? [p.cached.multiplier1, 0][p.cached.multiplier] : 0; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = p.percHP < 50 ? 1000 : 700;
            p.cached.multiplier2 = p.percHP <= 30 ? 250 : 0;
            p.scope.notify({
                text: 'Using the ' + ["Base ATK Boost", "Base ATK Boost Disabled"][n] + '. To switch to ' + ["Base ATK Boost", "Base ATK Boost Disabled"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3820: {
        chainAddition: function(p) { return p.cached.multiplier1; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = p.captain.class.has("Slasher") || p.captain.class.has("Powerhouse") ? [1, 1.2][p.cached.multiplier] : 0;
            p.scope.notify({
                text: 'Using the ' + [1.0, 1.2][n] + 'x Chain Addition. To switch to ' + [1.0, 1.2][(n + 1) % levels.length] + 'x Chain Addition, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3821: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain.type == "DEX" || p.captain.type == "PSY" ? 2 : 1.75;
        },
    },
    3823: {
        atkbase: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? [0, 1500, 0, 1500, 1500][p.cached.multiplier] : 0; },
        chain: function(p) { return [2.75, 2.75, 3.25, 3.25, 1][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [10, 10, 15, 15, Infinity][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Stage 1 Chain Boundary", "Stage 1 Chain Boundary with Base ATK", "Stage 2 Chain Boundary", "Stage 2 Chain Boundary with Base ATK", "Base ATK"][n] + ' Effects. To switch to the ' + ["Stage 1 Chain Boundary", "Stage 1 Chain Boundary with Base ATK", "Stage 2 Chain Boundary", "Stage 2 Chain Boundary with Base ATK", "Base ATK"][(n + 1) % levels.length] + ' Effects, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3824: {
        atkbase: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? [0, 1500, 0, 1500, 1500][p.cached.multiplier] : 0; },
        chain: function(p) { return [2.75, 2.75, 3.25, 3.25, 1][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [10, 10, 15, 15, Infinity][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Stage 1 Chain Boundary", "Stage 1 Chain Boundary with Base ATK", "Stage 2 Chain Boundary", "Stage 2 Chain Boundary with Base ATK", "Base ATK"][n] + ' Effects. To switch to the ' + ["Stage 1 Chain Boundary", "Stage 1 Chain Boundary with Base ATK", "Stage 2 Chain Boundary", "Stage 2 Chain Boundary with Base ATK", "Base ATK"][(n + 1) % levels.length] + ' Effects, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3825: {
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Striker") || p.unit.class.has("Driven") ? 2.25 : 1; },
    },
    3829: {
        chainAddition: function(p) { return [1.5, 0, 1.5][p.cached.multiplier]; },
        chainCarry: function(p) { return !p.carrychainCounter ? p.carrychainCounter : Math.min(Math.max(0.2, p.carrychainCounter*0.2),2.0); },
        atkbase: function(p) { return p.unit.type == "QCK" || p.unit.type == "PSY" || p.unit.class.has("Shooter") ? [0, 1250, 1250][p.cached.multiplier] : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Addition", "Base ATK", "Chain Addition and Base ATK"][n] + '. To switch to ' + ["Chain Addition", "Base ATK", "Chain Addition and Base ATK"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        warning: "Use 0x Chain for no Carry Over chain boost (First turn). Any non-Zero value will activate the chain boost."
    },
    3830: {
        chainAddition: function(p) { return [1.5, 0, 1.5][p.cached.multiplier]; },
        chainCarry: function(p) { return !p.carrychainCounter ? p.carrychainCounter : Math.min(Math.max(0.2, p.carrychainCounter*0.2),2.0); },
        atkbase: function(p) { return p.unit.type == "QCK" || p.unit.type == "PSY" || p.unit.class.has("Shooter") ? [0, 1250, 1250][p.cached.multiplier] : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Addition", "Base ATK", "Chain Addition and Base ATK"][n] + '. To switch to ' + ["Chain Addition", "Base ATK", "Chain Addition and Base ATK"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        warning: "Use 0x Chain for no Carry Over chain boost (First turn). Any non-Zero value will activate the chain boost."
    },
    3831: {
        orb: function(p) { return [2.25, 2.25, 2.25, 1, 1, 1][p.cached.multiplier]; },
        orbPlus: function(p) { return [0, 0, 0.5, 0, 0, 0.5][p.cached.multiplier]; },
        chainMultiplication: function(p) { return p.unit.type == "QCK" || p.unit.type == "PSY" || p.unit.class.has("Shooter") ? [1.2, 1.35, 1.5, 1.2, 1.35, 1.5][p.cached.multiplier] : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Turn 1", "Turn 2", "Turn 3", "Turn 1 w/o Orb Boost", "Turn 2 w/o Orb Boost", "Turn 3 w/o Orb Boost"][n] + ' Special. To switch to ' + ["Turn 1", "Turn 2", "Turn 3", "Turn 1 w/o Orb Boost", "Turn 2 w/o Orb Boost", "Turn 3 w/o Orb Boost"][(n + 1) % levels.length] + ' Special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3832: {
        orb: function(p) { return [2.25, 2.25, 2.25, 1, 1, 1][p.cached.multiplier]; },
        orbPlus: function(p) { return [0, 0, 0.5, 0, 0, 0.5][p.cached.multiplier]; },
        chainMultiplication: function(p) { return p.unit.type == "QCK" || p.unit.type == "PSY" || p.unit.class.has("Shooter") ? [1.2, 1.35, 1.5, 1.2, 1.35, 1.5][p.cached.multiplier] : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Turn 1", "Turn 2", "Turn 3", "Turn 1 w/o Orb Boost", "Turn 2 w/o Orb Boost", "Turn 3 w/o Orb Boost"][n] + ' Special. To switch to ' + ["Turn 1", "Turn 2", "Turn 3", "Turn 1 w/o Orb Boost", "Turn 2 w/o Orb Boost", "Turn 3 w/o Orb Boost"][(n + 1) % levels.length] + ' Special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3833: {
        atk: function(p) { return p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = p.captain.type == "QCK" || p.captain.type == "PSY" ? 2 : 1;
        },
    },
    3834: {
        affinity: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain.type == "QCK" || p.captain.type == "PSY" ? 2 : 1;
        },
    },
    3835: {
        tapTiming: function(p) { return p.unit.type == "QCK" || p.unit.type == "PSY" ? [{ Good: 0.4, Great: 0, Perfect: 0.1 },{ Good: 0.1, Great: 0, Perfect: 0.2 }][p.cached.multiplier] : { Good: 0, Great: 0, Perfect: 0 }; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["+0.1-0.4", "+0.1-0.5"][n] + 'x boost. To switch to ' + ["+0.1-0.4", "+0.1-0.5"][(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3838:{
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 30 : 1;
        },
        onActivation: function(p) {
            var levels = [2.75, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Chain Boundary. To switch to the ' + levels[(n + 1) % levels.length] + 'x Chain Boundary, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3839:{
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 30 : 1;
        },
        onActivation: function(p) {
            var levels = [2.75, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Chain Boundary. To switch to the ' + levels[(n + 1) % levels.length] + 'x Chain Boundary, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3840: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Cerebral") ? 2 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Cerebral") ? 2 : 1; },
    },
    3842: {
        affinityPlus: function(p) { return 0.25; },
        warning: "Selected special (%name%) does not account for the Class of character that applies the buff and WILL BE INCORRECT some, if not all, of the time. Use at your own risk."
    },
    3843: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            var levels = [2, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3844: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Free Spirit") ? 2.25 : 1; },
    },
    3846: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 1.5 : 1; },
        type: "type",
    },
    3847: {
        affinity: function(p) { return p.unit.type == "QCK" || p.unit.type == "PSY" ? 2 : 1; },
        turnedOn: [false,false,false,false,false,false],
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = true;
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = false;
        }
    },
    3848: {
        affinity: function(p) { return p.unit.type == "QCK" || p.unit.type == "PSY" ? 2.25 : 1; },
        turnedOn: [false,false,false,false,false,false],
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = true;
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = false;
        }
    },
    3849: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? 2.5 : 1; },
        atkbase: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? [1250, 0][p.cached.multiplier] : 1; },
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? [1.5, 1][p.cached.multiplier] : 1; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = (p.percHP <= 50) ? 1 : 0;
        },
    },
    3850: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? 2.5 : 1; },
        atkbase: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? [1250, 0][p.cached.multiplier] : 1; },
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? [1.5, 1][p.cached.multiplier] : 1; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = (p.percHP <= 50) ? 1 : 0;
        },
    },
    3851: {
        orb: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier : 1; },
        onActivation: function(p) { p.cached.multiplier = p.damageCounter >= 30000 ? 2.75 : 2.5; }
    },
    3852: {
        orb: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier : 1; },
        onActivation: function(p) { p.cached.multiplier = p.damageCounter >= 30000 ? 2.75 : 2.5; }
    },
    3853: {
        def: function(p) { return 0; },
        status: function(p) { return p.defenseDown ? [2, 1, 2][p.cached.multiplier] : 1; },
        statusPlus: function(p) { return [0, 0.25, 0.25][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Conditional Boost", "Conditional Buff", "Conditional Boost and Conditional Buff"][n] + ' boost. To ' + ["Conditional Boost", "Conditional Buff", "Conditional Boost and Conditional Buff"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3854: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 2.25 : 1; },
        type: "type",
    },
    3855: {
        delay: function(p) { return [1, 0, 0, 1, 1][p.cached.multiplier]; },
        chainAddition: function(p) { return [0, 1.1, 1.2, 1.1, 1.2][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Delay", "1.1x Chain Boost", "1.2x Chain Boost", "Delay and 1.1x Chain Boost", "Delay and 1.2x Chain Boost"][n] + ' boost. To ' + ["Delay", "1.1x Chain Boost", "1.2x Chain Boost", "Delay and 1.1x Chain Boost", "Delay and 1.2x Chain Boost"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3856: {
        orb: function(p) { return 1.75; },
    },
    3857: {
        orb: function(p) { return 2; },
    },
    3858: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1.4, 1.6, 2.0];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'x Chain boost. To use the ' + levels[(n + 1) % levels.length] + 'x Chain boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3859: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1.4, 1.6, 2.0];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'x Chain boost. To use the ' + levels[(n + 1) % levels.length] + 'x Chain boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3860: {
        increaseDamageTaken: function(p) { return [1.5, 1.5, 1.5, 1.5, 1, 1, 1][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Fighter") ? [2.25, 2.5, 2.75, 1, 2.25, 2.5, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["2.25x Affinity Boost w/ Increase Damage Taken", "2.5x Affinity Boost w/ Increase Damage Taken", "2.75x Affinity Boost w/ Increase Damage Taken", "Increase Damage Taken", "2.25x Affinity Boost w/o Increase Damage Taken", "2.5x Affinity Boost w/o Increase Damage Taken", "2.75x Affinity Boost w/o Increase Damage Taken"][n] + '. To switch to the ' + ["2.25x Affinity Boost w/ Increase Damage Taken", "2.5x Affinity Boost w/ Increase Damage Taken", "2.75x Affinity Boost w/ Increase Damage Taken", "Increase Damage Taken", "2.25x Affinity Boost w/o Increase Damage Taken", "2.5x Affinity Boost w/o Increase Damage Taken", "2.75x Affinity Boost w/o Increase Damage Taken"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3861: {
        increaseDamageTaken: function(p) { return [1.5, 1.5, 1.5, 1.5, 1, 1, 1][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Fighter") ? [2.25, 2.5, 2.75, 1, 2.25, 2.5, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["2.25x Affinity Boost w/ Increase Damage Taken", "2.5x Affinity Boost w/ Increase Damage Taken", "2.75x Affinity Boost w/ Increase Damage Taken", "Increase Damage Taken", "2.25x Affinity Boost w/o Increase Damage Taken", "2.5x Affinity Boost w/o Increase Damage Taken", "2.75x Affinity Boost w/o Increase Damage Taken"][n] + '. To switch to the ' + ["2.25x Affinity Boost w/ Increase Damage Taken", "2.5x Affinity Boost w/ Increase Damage Taken", "2.75x Affinity Boost w/ Increase Damage Taken", "Increase Damage Taken", "2.25x Affinity Boost w/o Increase Damage Taken", "2.5x Affinity Boost w/o Increase Damage Taken", "2.75x Affinity Boost w/o Increase Damage Taken"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3862: {
        atk: function(p) { return p.unit.type == "INT" || p.unit.class.has("Fighter") || p.unit.class.has("Driven") ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "INT" || p.unit.class.has("Fighter") || p.unit.class.has("Driven") ? [1, 2, 2][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3863: {
        orb: function(p) { return p.unit.type == "PSY" ? p.cached.multiplier1 : 1; },
        atkbase: function(p) { return p.unit.type == "PSY" ? p.cached.multiplier2 : 0; },
        onActivation: function(p) {
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier1) + 1) % levels.length;
            p.cached.multiplier1 = levels[n];
            p.cached.multiplier2 = p.colorCount.PSY >= 4 ? [500, 1000][n] : 0;
            p.scope.notify({
                text: '' + levels[n] + 'x boost. To use the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3864: {
        orb: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Driven") ? 2.25 : 1; },
    },
    3865: {
        atk: function(p) { return p.unit.class.has("Driven") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.Driven == 6 ? 2.5 : 1.75;
        }
    },
    3866: {
        chain: function(p) { return 2.25; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 35.0 : 1;
        },
    },
    3867: {
        chainAddition: function(p) { return 1; },
    },
    3869: {
        atkbasePlus: function(p) { return [500, 0, 500][p.cached.multiplier]; }, 
        chainPlus: function(p) { 
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1];
            return p.chainPosition === 0 ? 0 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [0.25, 0, 0.25][p.cached.multiplier] : 0;
        }, 
        chain: function(p) { return [1, 2.75, 2.75][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [Infinity, 30, 30][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Lock & Base ATK Buff", "Chain Lock", "Chain Lock and Chain Lock & Base ATK Buff"][n] + '. To switch to ' + ["Chain Lock & Base ATK Buff", "Chain Lock", "Chain Lock and Chain Lock & Base ATK Buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3870: {
        atkbasePlus: function(p) { return [500, 0, 500][p.cached.multiplier]; }, 
        chainPlus: function(p) { 
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1];
            return p.chainPosition === 0 ? 0 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [0.25, 0, 0.25][p.cached.multiplier] : 0;
        }, 
        chain: function(p) { return [1, 2.75, 2.75][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [Infinity, 30, 30][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Lock & Base ATK Buff", "Chain Lock", "Chain Lock and Chain Lock & Base ATK Buff"][n] + '. To switch to ' + ["Chain Lock & Base ATK Buff", "Chain Lock", "Chain Lock and Chain Lock & Base ATK Buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3871: {
        atk: function(p) { return p.unit.type == "INT" || p.unit.class.has("Driven") ? [2, 1, 2][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "INT" || p.unit.class.has("Driven") ? [2, 1, 2][p.cached.multiplier] : 1; },
        atkPlus: function(p) { return [0, 0.2, 0.2][p.cached.multiplier]; },
        orbPlus: function(p) { return [0, 0.2, 0.2][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.scope.notify({
                text: '' + ["ATK & Orb Boosts", "ATK and Orb Buffs", "All Effects"][n] + ' boost. To ' + ["ATK & Orb Boosts", "ATK and Orb Buffs", "All Effects"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3872: {
        poison: function(p) { return 1; },
        delay: function(p) { return 1; },
        burn: function(p) { return 1; },
        paralysis: function(p) { return 1; },
        affinity: function(p) { return p.unit.type == "INT" || p.unit.class.has("Driven") ? 1.75 : 1; },
        atkbase: function(p) { return p.unit.type == "INT" || p.unit.class.has("Driven") ? 800 : 0; },
    },
    3873: {
        chainPlus: function(p) { 
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1];
            return p.chainPosition === 0 ? 0 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [0.3, 0, 0.3][p.cached.multiplier] : 0;
        }, 
        chain: function(p) { return [1, 3.25, 3.25][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [Infinity, 3.25, 3.25][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Lock Buff", "Chain Lock", "Chain Lock and Chain Lock Buff"][n] + '. To switch to ' + ["Chain Lock Buff", "Chain Lock", "Chain Lock and Chain Lock Buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3874: {
        atkbase: function(p) { return p.unit.type == "INT" || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 0; },
        onActivation: function(p) {
            var levels = [800, 1000];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + ' base ATK boost. To switch to the ' + levels[(n + 1) % levels.length] + ' base ATK boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3876: {
        affinity: function(p) { return p.unit.type == "STR" ? 1.25 : 1; },
    },
    3881: {
        atkbasePlus: function(p) { return [0, 300, 300][p.cached.multiplier]; },
        atkbase: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? [1000, 0, 1000][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Base ATK boost", "Base ATK Buff", "Base ATK boost and Base ATK buff"][n] + '. To switch to ' + ["Base ATK boost", "Base ATK Buff", "Base ATK boost and Base ATK buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3882: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? 2.25 : 1; },
        type: "type",
    },
    3883: {
        delay: function(p) { return 1; },
        status: function(p) { return p.delayed ? 2 : 1; },
        warning: "Selected special (%name%) assumes that enemies do not have Delay Debuff Protection."
    },
    3884: {
        atkbase: function(p) { return p.unit.type == "PSY" ? [0, 1000][CrunchUtils.llimitUnlock(p, "specials")] : 0; },
        warning: "Selected special (%name%) assumes that Monkey D. Luffy is on your crew."
    },
    3885: {
        atkbasePlus: function(p) { return [0, 200, 200][p.cached.multiplier]; },
        atkbase: function(p) { return p.unit.class.has("Slasher") ? [800, 0, 800][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Base ATK boost", "Base ATK Buff", "Base ATK boost and Base ATK buff"][n] + '. To switch to ' + ["Base ATK boost", "Base ATK Buff", "Base ATK boost and Base ATK buff"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3886: {
        atk: function(p) { return p.unit.type == "PSY" ? [[2, 1, 2],[2.5, 1, 2.5]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        type: "type",
        atkPlus: function(p) { return [0, 0.25, 0.25][p.cached.multiplier]; },
        orbPlus: function(p) { return [0, 0.25, 0.25][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = [0, levels[n]][CrunchUtils.llimitUnlock(p, "specials")];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: '' + ["ATK Boost", "ATK and Orb Buffs", "All Effects"][n] + '. To ' + ["ATK Boost", "ATK and Orb Buffs", "All Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3887: {
        atk: function(p) { return p.unit.class.has("Driven") ? 2.25 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Driven") ? 2.25 : 1; },
    },
    3888: {
        atkbase: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? 1500 : 0; },
        chain: function(p) { return 3.25; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 40.0 : 1;
        },
    },
    3889: {
        atkbase: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? 1500 : 0; },
        chain: function(p) { return 3.25; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 40.0 : 1;
        },
    },
    3890: {
        affinity: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        status: function(p) { return p.enemyEffects.increaseDamageTaken ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Affinity Boost", "Status Boost", "Affinity and Status Boost"][n] + '. To ' + ["Affinity Boost", "Status Boost", "Affinity and Status Boost"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3891: {
        affinity: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        status: function(p) { return p.enemyEffects.increaseDamageTaken ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Affinity Boost", "Status Boost", "Affinity and Status Boost"][n] + '. To ' + ["Affinity Boost", "Status Boost", "Affinity and Status Boost"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3892: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? 2 : 1; },
        type: "type",
    },
    3893: {
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3895: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 3.25 : 1; },
        type: "type",
        status: function(p) { return p.enemyEffects.increaseDamageTaken ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain.class.has("Slasher") || p.captain.class.has("Free Spirit") ? 2.25 : 1;
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = [true, false][levels[n]];
            p.scope.notify({
                text: 'Using the ' + ["TND Orb Buff Enabled", "TND Orb Buff Disabled"][levels[n]] + '. To switch to ' + ["TND Orb Buff Enabled", "TND Orb Buff Disabled"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = false;
        }
    },
    3896: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 3.25 : 1; },
        type: "type",
        status: function(p) { return p.enemyEffects.increaseDamageTaken ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain.class.has("Slasher") || p.captain.class.has("Free Spirit") ? 2.25 : 1;
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = [true, false][levels[n]];
            p.scope.notify({
                text: 'Using the ' + ["TND Orb Buff Enabled", "TND Orb Buff Disabled"][levels[n]] + '. To switch to ' + ["TND Orb Buff Enabled", "TND Orb Buff Disabled"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = false;
        }
    },
    3897: {
        atkbase: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [1500, 0][p.cached.multiplier] : 0; },
        tapTiming: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [{ Good: 0, Great: 0, Perfect: 0.4 },{ Good: 0, Great: 0, Perfect: 0 }][p.cached.multiplier] : { Good: 0, Great: 0, Perfect: 0 }; },
        chainAddition: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            p.cached.multiplier2 = p.captain.class.has("Driven") || p.captain.class.has("Powerhouse") ? 2 : 0;
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Base ATK and Tap Timing Buff Enabled", "Base ATK and Tap Timing Buff Disabled"][levels[n]] + '. To switch to ' + ["Base ATK and Tap Timing Buff Enabled", "Base ATK and Tap Timing Buff Disabled"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3898: {
        atkbase: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [1500, 0][p.cached.multiplier] : 0; },
        tapTiming: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [{ Good: 0, Great: 0, Perfect: 0.4 },{ Good: 0, Great: 0, Perfect: 0 }][p.cached.multiplier] : { Good: 0, Great: 0, Perfect: 0 }; },
        chainAddition: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            p.cached.multiplier2 = p.captain.class.has("Driven") || p.captain.class.has("Powerhouse") ? 2 : 0;
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Base ATK and Tap Timing Buff Enabled", "Base ATK and Tap Timing Buff Disabled"][levels[n]] + '. To switch to ' + ["Base ATK and Tap Timing Buff Enabled", "Base ATK and Tap Timing Buff Disabled"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3899: {
        affinityPlus: function(p) { return [0, 0.3, 0.3][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? [2, 1, 2][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity", "Affinity Buff", "Both Effects"][n] + '. To switch to ' + ["Affinity", "Affinity Buff", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3900: {
        chainAddition: function(p) { return [1.2, 0, 1.2][p.cached.multiplier]; },
        def: function(p) { return [1, 0, 0][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Addition", "Defense Reduction", "Both Effects"][n] + '. To switch to ' + ["Chain Addition", "Defense Reduction", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3901: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? 1.5 : 1; },
        type: "type",
    },
    3903: {
        atk: function(p) { return p.unit.class.has("Driven") ? 2.5 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Driven") ? 2.5 : 1; },
    },
    3904: {
        atk: function(p) { return p.cached.multiplier[0]; },
        type: "type",
        orb: function(p) { return p.cached.multiplier[1]; },
        affinity: function(p) { return p.cached.multiplier[2]; },
        chainAddition: function(p) { return p.cached.multiplier[3]; },
        onActivation: function(p) {
            p.cached.multiplier = [ 1, 1, 1, 0 ]
            p.cached.multiplier[0] = p.captain.class.has("Fighter") || p.captain.class.has("Slasher") ? 2.25 : 1;
            p.cached.multiplier[1] = p.captain.class.has("Shooter") || p.captain.class.has("Striker") ? 2.25 : 1;
            p.cached.multiplier[2] = p.captain.class.has("Free Spirit") || p.captain.class.has("Powerhouse") ? 2.25 : 1;
            p.cached.multiplier[3] = p.captain.class.has("Cerebral") || p.captain.class.has("Driven") ? 1.3 : 0;
        },
    },
    3905: {
        atk: function(p) { return p.cached.multiplier[0]; },
        type: "type",
        orb: function(p) { return p.cached.multiplier[1]; },
        affinity: function(p) { return p.cached.multiplier[2]; },
        chainAddition: function(p) { return p.cached.multiplier[3]; },
        onActivation: function(p) {
            p.cached.multiplier = [ 1, 1, 1, 0 ]
            p.cached.multiplier[0] = p.captain.class.has("Fighter") || p.captain.class.has("Slasher") ? 2.25 : 1;
            p.cached.multiplier[1] = p.captain.class.has("Shooter") || p.captain.class.has("Striker") ? 2.25 : 1;
            p.cached.multiplier[2] = p.captain.class.has("Free Spirit") || p.captain.class.has("Powerhouse") ? 2.25 : 1;
            p.cached.multiplier[3] = p.captain.class.has("Cerebral") || p.captain.class.has("Driven") ? 1.3 : 0;
        },
    },
    3906: {
        affinity: function(p) { return p.unit.type == "QCK" ? 2 : 1; },
    },
    3911: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "type",
    },
    3912: {
        atkPlus: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [0.25, 0.4];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'x buff. To ' + levels[(n + 1) % levels.length] + 'x buff, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3913: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = p.percHP > 50 ? [0.25, 0.4] : [1.2, 1.2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'x boost. To ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3914: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "type",
    },
    3915: {
        burn: function(p) { return 1; },
        status: function(p) { return p.cached.multiplier; },
        warning: "Selected special (%name%) assumes that the enemy has been inflicted with Burn.",
        onActivation: function(p) {
            p.cached.multiplier = p.captain.class.has("Driven") ? 2.25 : 1.75;
        },
    },
    3918: {
        chain: function(p) { return 3.25; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.25 : 1;
        },
    },
    3919: {
        orb: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Cerebral") ? 2.25 : 1; },
    },
    3925: {
        chainAddition: function(p) { return [0, 1][p.cached.multiplier]; },
        tapTiming: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Cerebral") ? [{ Good: 0.3, Great: 0.3, Perfect: 0.2 },{ Good: 0, Great: 0, Perfect: 0 }][p.cached.multiplier] : { Good: 0, Great: 0, Perfect: 0 }; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Tap Timing Bonus", "Chain Addition"][levels[n]] + '. To switch to ' + ["Tap Timing Bonus", "Chain Addition"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3926: {
        atkbase: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") ? p.cached.multiplier : 0; },
        onActivation: function(p) {
            var levels = [800, 1000];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using +' + levels[n] + ' boost. To use +' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3927: {
        atk: function(p) { return p.slot == p.sourceSlot ? p.cached.multiplier : 1; },
        type: "type",
        orb: function(p) { return p.slot == p.sourceSlot ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.percHP >= 50 ? 3 : 1;
        },
    },
    3928: {
        chain: function(p) { return [2, 2.25][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [10, 20][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["2x-10", "2.25x-20"][n] + 'x Chain Set. To switch to the ' + ["2x-10", "2.25x-20"][(n + 1) % levels.length] + 'x Chain Set, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3929: {
        atk: function(p) { return p.unit.type == "STR" ? 1.75 : 1; },
        type: "type",
    },
    3930: {
        atkbase: function(p) { return p.unit.class.has("Striker") ? 500 : 0; },
    },
    3931:{
        status: function(p) { return p.defenseDown ? 2 : 1; },
        def: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [0.2, 0];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + [80, 100][n] + '% DEF Reduction. To ' + [80, 100][(n + 1) % levels.length] + '% DEF Reduction, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3935: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? p.cached.multiplier1 : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? p.cached.multiplier : 1; },
        atkbase: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? p.cached.multiplier2 : 0; },
        onActivation: function(p) {
            p.cached.multiplier = p.healCounter >= 15000 ? 2 : 1;
            p.cached.multiplier1 = p.healCounter >= 30000 ? 2.25 : 1;
            p.cached.multiplier2 = p.healCounter >= 50000 ? 1000 : 0;
        },
    },
    3936: {
        chainAddition: function(p) { return [1.2, 0, 1.2][p.cached.multiplier]; },
        increaseDamageTaken: function(p) { return [1, 1.5, 1.5][p.cached.multiplier]; },
        delay: function(p) { return 1; },
        paralysis: function(p) { return 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Addition", "Increase Damage Taken", "Both Effects"][n] + '. To switch to ' + ["Chain Addition", "Increase Damage Taken", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3938: {
        atkbase: function(p) { return p.unit.class.has("Cerebral") ? p.cached.multiplier : 0; },
        onActivation: function(p) {
            var levels = [1000, 1250];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using +' + levels[n] + ' boost. To use +' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3939: {
        atk: function(p) { return p.unit.class.has("Cerebral") ? 2 : 1; },
        type: "type",
    },
    3941: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? [1, 2.25, 2.25][p.cached.multiplier] : 1; },
        type: "type",
        affinity: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? [2, 1, 2][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity boost", "ATK boost", "Both Effects"][n] + '. To switch to ' + ["Affinity boost", "ATK boost", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3942: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? [1, 2.25, 2.5, 2.25, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        affinity: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? [2.25, 1, 1, 2.25, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity boost", "2.25x ATK boost", "2.5x ATK boost", "Affinity and 2.25x ATK boost", "Affinity and 2.5x ATK boost"][n] + '. To switch to ' + ["Affinity boost", "2.25x ATK boost", "2.5x ATK boost", "Affinity and 2.25x ATK boost", "Affinity and 2.5x ATK boost"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3943: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "INT" ? 2.75 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Cerebral") ? 2.75 : 1; },
        turnedOn: [false,false,false,false,false,false],
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = true;
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = false;
        }
    },
    3944: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "INT" ? 2.75 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Cerebral") ? 2.75 : 1; },
        turnedOn: [false,false,false,false,false,false],
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = true;
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = false;
        }
    },
    3945: {
        atkbase: function(p) { return p.unit.class.has("Cerebral") ? 1000 : 0; },
        status: function(p) { return p.defenseDown ? 2.25 : 1; },
    },
    3946: {
        chainAddition: function(p) { return [1, 0, 0, 1, 1, 0, 1][p.cached.multiplier]; },
        chainMultiplication: function(p) { return [1, 1, 1.25, 1, 1.25, 1.25, 1.25][p.cached.multiplier]; },
        chain: function(p) { return [1, 2.25, 1, 2.25, 1, 2.25, 2.25][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [Infinity, 15, Infinity, 15, Infinity, 15, 15][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6, 7];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Addition", "Chain Boundary", "Chain Multiplication", "Chain Addition & Boundary", "Chain Addition & Multiplication", "Chain Multiplication & Boundary", "All Effects"][n] + '. To switch to ' + ["Chain Addition", "Chain Boundary", "Chain Multiplication", "Chain Addition & Boundary", "Chain Addition & Multiplication", "Chain Multiplication & Boundary", "All Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3947: {
        tapTiming: function(p) { return p.unit.type == "STR" || p.unit.class.has("Shooter") ? [{ Good: 0.2, Great: 0.3, Perfect: 0.3 },{ Good: 0, Great: 0, Perfect: 0 },{ Good: 0.2, Great: 0.3, Perfect: 0.3 }][p.cached.multiplier] : { Good: 0, Great: 0, Perfect: 0 }; },
        atkbase: function(p) { return p.unit.type == "STR" || p.unit.class.has("Shooter") ? [0, 1250, 1250][p.cached.multiplier] : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Tap Timing Buff", "Base ATK", "Tap Timing Buff and Base ATK"][n] + ' boost. To ' + ["Tap Timing Buff", "Base ATK", "Tap Timing Buff and Base ATK"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3948: {
        tapTiming: function(p) { return p.unit.type == "STR" || p.unit.class.has("Shooter") ? [{ Good: 0.2, Great: 0.3, Perfect: 0.3 },{ Good: 0, Great: 0, Perfect: 0 },{ Good: 0.2, Great: 0.3, Perfect: 0.3 }][p.cached.multiplier] : { Good: 0, Great: 0, Perfect: 0 }; },
        atkbase: function(p) { return p.unit.type == "STR" || p.unit.class.has("Shooter") ? [0, 1250, 1250][p.cached.multiplier] : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Tap Timing Buff", "Base ATK", "Tap Timing Buff and Base ATK"][n] + ' boost. To ' + ["Tap Timing Buff", "Base ATK", "Tap Timing Buff and Base ATK"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3950: {
        chainAddition: function(p) { return 1.1; },
        orb: function(p) { return p.unit.type == "STR" || p.unit.class.has("Slasher") ? 2.25 : 1; },
    },
    3951: {
        status: function(p) { return p.delayed ? 2 : 1; },
        delay: function(p) { return 1; },
        ignoresImmunities: function(p) { return [[],['delay']][p.cached.multiplier]; },
        onActivation: function(p) {
            p.cached.multiplier = p.percHP <= 10 ? 1 : 0;
        },
    },
    3952: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Shooter") ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        type: "type",
        atkbasePlus: function(p) { return [0, 300, 300][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK boost", "Base ATK buff", "ATK boost and Base ATK buff"][n] + ' boost. To ' + ["ATK boost", "Base ATK buff", "ATK boost and Base ATK buff"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3953: {
        atkbase: function(p) { return p.unit.class.has("Slasher") ? [1250, 0, 1250][p.cached.multiplier] : 1; },
        atkbasePlus: function(p) { return [0, 250, 250][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Base ATK boost", "Base ATK buff", "Base ATK boost and Base ATK buff"][n] + ' boost. To ' + ["Base ATK boost", "Base ATK buff", "Base ATK boost and Base ATK buff"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3954: {
        atkbase: function(p) { return p.unit.class.has("Slasher") ? [1250, 0, 1250][p.cached.multiplier] : 1; },
        atkbasePlus: function(p) { return [0, 250, 250][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Base ATK boost", "Base ATK buff", "Base ATK boost and Base ATK buff"][n] + ' boost. To ' + ["Base ATK boost", "Base ATK buff", "Base ATK boost and Base ATK buff"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3955: {
        affinity: function(p) { return p.unit.type == "PSY" && p.unit.class.has("Free Spirit") ? 3 : p.unit.type == "PSY" || p.unit.class.has("Free Spirit") ? 2.75 : 1; },
        orb: function(p) { return p.cached.multiplier ? p.unit.type == "PSY" && p.unit.class.has("Free Spirit") ? 3.25 : p.unit.type == "PSY" || p.unit.class.has("Free Spirit") ? 2.75 : 1 : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.actions[p.sourceSlot];
        },
    },
    3956: {
        affinity: function(p) { return p.unit.type == "PSY" && p.unit.class.has("Free Spirit") ? 3 : p.unit.type == "PSY" || p.unit.class.has("Free Spirit") ? 2.75 : 1; },
        orb: function(p) { return p.cached.multiplier ? p.unit.type == "PSY" && p.unit.class.has("Free Spirit") ? 3.25 : p.unit.type == "PSY" || p.unit.class.has("Free Spirit") ? 2.75 : 1 : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.actions[p.sourceSlot];
        },
    },
    3957: {
        atk: function(p) { return [3, 1, 3][p.cached.multiplier]; },
        atkPlus: function(p) { return [0, 0.25, 0.25][p.cached.multiplier]; },
        type: "type",
        orb: function(p) { return [1, 3, 3][p.cached.multiplier]; },
        orbPlus: function(p) { return [0.25, 0, 0.25][p.cached.multiplier]; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Use Meat Orbs for Boosted Orb Multiplier. Using ' + ["ATK Boost & Orb Buff", "Orb Boost & ATK Buff", "All Effects"][n] + '. To ' + ["ATK Boost & Orb Buff", "Orb Boost & ATK Buff", "All Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        },
    },
    3958: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Free Spirit") || p.unit.class.has("Slasher") ? 2.5 : 1; },
        type: "type",
    },
    3959: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Free Spirit") || p.unit.class.has("Slasher") ? 2.5 : 1; },
        type: "type",
    },
    3960: {
        def: function(p) { return [0, 1, 0][p.cached.multiplier]; },
        chainAddition: function(p) { return [0, 1.2, 1.2][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Defense Reduction", "Chain Addition", "Both Effects"][n] + '. To ' + ["Defense Reduction", "Chain Addition", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3961: {
        status: function(p) { return p.defenseDown ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        chainAdditionPlus: function(p) { return [0, 0.8, 0.8][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Defense Reduction Status", "Chain Addition Buff", "Both Effects"][n] + '. To ' + ["Defense Reduction Status", "Chain Addition Buff", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3962: {
        orb: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? [p.cached.multiplier1, 1, p.cached.multiplier1][p.cached.multiplier] : 1; },
        orbPlus: function(p) { return [0, 0.25, 0.25][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = p.damageCounter >= 40000 ? 2.5 : 2.25;
            p.scope.notify({
                text: 'Using the ' + ["Orb Boost", "Orb Buff", "Orb Boost and Orb Buff"][levels[n]] + '. To switch to ' + ["Orb Boost", "Orb Buff", "Orb Boost and Orb Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3963: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.damageCounter >= 40000 ? 3.5 : 3.25;
        },
    },
    3964: {
        atkbase: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? [p.cached.multiplier1, 0, p.cached.multiplier1][p.cached.multiplier] : 0; },
        atkbasePlus: function(p) { return [0, 300, 300][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = p.damageCounter >= 40000 ? 1250 : 1000;
            p.scope.notify({
                text: 'Using the ' + ["Base ATK Boost", "Base ATK Buff", "Base ATK Boost and Base ATK Buff"][levels[n]] + '. To switch to ' + ["Base ATK Boost", "Base ATK Buff", "Base ATK Boost and Base ATK Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3965: {
        affinity: function(p) { return p.unit.class.has("Slasher") ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        increaseDamageTaken: function(p) { return [1, 1.5, 1.5][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity Boost", "Increase Damage Taken", "Affinity Boost and Increase Damage Taken"][levels[n]] + '. To switch to ' + ["Affinity Boost", "Increase Damage Taken", "Affinity Boost and Increase Damage Taken"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3966: {
        status: function(p) { return p.poisoned ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2.5, 2.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ATK multiplier. To switch to the ' + levels[(n + 1) % levels.length] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3967: {
        status: function(p) { return p.poisoned ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2.5, 2.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ATK multiplier. To switch to the ' + levels[(n + 1) % levels.length] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3968: {
        chainAddition: function(p) { return 1.2; },
    },
    3972: {
        ignoresImmunities: function(p) { return ['burn']; },
        burn: function(p) { return 2; },
        status: function(p) { return p.burn ? 2.25 : 1; },
    },
    3973: {
        ignoresImmunities: function(p) { return ['burn']; },
        burn: function(p) { return 2; },
        status: function(p) { return p.burn ? 2.25 : 1; },
    },
    3974: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        type: "type",
        status: function(p) { return p.defenseDown ? [1, 2.25, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK Boost", "Status Boost", "Both Boosts"][levels[n]] + '. To switch to ' + ["ATK Boost", "Status Boost", "Both Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3975: {
        orb: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        status: function(p) { return p.defenseDown ? [1, 2.25, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb Boost", "Status Boost", "Both Boosts"][levels[n]] + '. To switch to ' + ["Orb Boost", "Status Boost", "Both Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3976: {
        affinity: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.percHP > 99 ? 2 : 1;
        },
    },
    3977: {
        atkbase: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? [1000, 0, 1000][p.cached.multiplier] : 0; },
        status: function(p) { return p.defenseDown ? [1, 2.25, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Base ATK Boost", "Status Boost", "Both Boosts"][levels[n]] + '. To switch to ' + ["Base ATK Boost", "Status Boost", "Both Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3978: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 20 : 1;
        },
    },
    3979: {
        chainAddition: function(p) { return 1.2; },
    },
    3980: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 1.75 : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 1.75 : 1; },
    },
    3981: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [2.25, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        orbPlus: function(p) { return [0, 0.25][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["No Kaido Effects", "Kaido Effects"][levels[n]] + '. To switch to ' + ["No Kaido Effects", "Kaido Effects"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3982: {
        atk: function(p) { return p.unit.class.has("Free Spirit") || p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "type",
    },
    3983: {
        status: function(p) { return p.enemyEffects.increaseDamageTaken ? p.cached.multiplier : 1; },
        orb: function(p) { return p.unit.type == "STR" || p.unit.class.has("Powerhouse") ? p.orb == 'wano' ? 3 : 2.75 : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.sourceSlot <= 1 ? 3 : 2.75;
        }
    },
    3984: {
        status: function(p) { return p.enemyEffects.increaseDamageTaken ? p.cached.multiplier : 1; },
        orb: function(p) { return p.unit.type == "STR" || p.unit.class.has("Powerhouse") ? p.orb == 'wano' ? 3 : 2.75 : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.sourceSlot <= 1 ? 3 : 2.75;
        }
    },
    3985: {
        burn: function(p) { return [3, 0, 3][p.cached.multiplier]; },
        atkbase: function(p) { return p.unit.type == "STR" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [0, 1250, 1250][p.cached.multiplier] : 0; },
        atkCeil: function(p) { return p.cached.multiplier1; },
        orbCeil: function(p) { return p.cached.multiplier1; },
        onActivation: function(p) {
            p.cached.multiplier1 = p.captain.class.has("Driven") || p.captain.class.has("Powerhouse") ? 3 : 1;
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Burn", "Base ATK Boost", "Both Effects"][levels[n]] + '. To switch to ' + ["Burn", "Base ATK Boost", "Both Effects"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3986: {
        burn: function(p) { return [3, 0, 3][p.cached.multiplier]; },
        atkbase: function(p) { return p.unit.type == "STR" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [0, 1250, 1250][p.cached.multiplier] : 0; },
        atkCeil: function(p) { return p.cached.multiplier1; },
        orbCeil: function(p) { return p.cached.multiplier1; },
        onActivation: function(p) {
            p.cached.multiplier1 = p.captain.class.has("Driven") || p.captain.class.has("Powerhouse") ? 3 : 1;
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Burn", "Base ATK Boost", "Both Effects"][levels[n]] + '. To switch to ' + ["Burn", "Base ATK Boost", "Both Effects"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    3987: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? 1.25 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? 1.25 : 1; },
        affinity: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? 2.5 : 1; },
    },
    3988: {
        chainAddition: function(p) { return 1.1; },
    },
    3990: {
        increaseDamageTaken: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain.type == "PSY" || p.captain.type == "INT" ? 1.5 : 1;
        }
    },
    3991: {
        increaseDamageTaken: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain.type == "PSY" || p.captain.type == "INT" ? 1.5 : 1;
        }
    },
    3992: {
        chain: function(p) { return [1, 1, 1, 1, 2.75, 2.75, 2.75, 2.75][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [Infinity, Infinity, Infinity, Infinity, 35, 35, 35, 35][p.cached.multiplier] : 1;
        },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Free Spirit") || p.unit.class.has("Shooter") ? [2.5, 2.75, 2.75, 2.75, 2.5, 2.75, 2.75, 2.75][p.cached.multiplier] : 1; },
        atkPlus: function(p) { return [0, 0, 0.25, 0, 0, 0, 0.25, 0][p.cached.multiplier]; },
        type: "type",
        status: function(p) { return p.delayed ? [1, 2, 2, 1, 1, 2, 2, 1][p.cached.multiplier] : 1; },
        statusPlus: function(p) { return [0, 0, 0.25, 0, 0, 0, 0.25, 0][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6, 7];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Stage 2", "Stage 3", "Stage 4", "Buff Clear", "Stage 2 with Chain Boundary", "Stage 3 with Chain Boundary", "Stage 4 with Chain Boundary", "Buff Clear with Chain Boundary"][n] + ' boost. To ' + ["Stage 2", "Stage 3", "Stage 4", "Buff Clear", "Stage 2 with Chain Boundary", "Stage 3 with Chain Boundary", "Stage 4 with Chain Boundary", "Buff Clear with Chain Boundary"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3993: {
        chain: function(p) { return [1, 1, 1, 1, 2.75, 2.75, 2.75, 2.75][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [Infinity, Infinity, Infinity, Infinity, 35, 35, 35, 35][p.cached.multiplier] : 1;
        },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Free Spirit") || p.unit.class.has("Shooter") ? [2.5, 2.75, 2.75, 2.75, 2.5, 2.75, 2.75, 2.75][p.cached.multiplier] : 1; },
        atkPlus: function(p) { return [0, 0, 0.25, 0, 0, 0, 0.25, 0][p.cached.multiplier]; },
        type: "type",
        status: function(p) { return p.delayed ? [1, 2, 2, 1, 1, 2, 2, 1][p.cached.multiplier] : 1; },
        statusPlus: function(p) { return [0, 0, 0.25, 0, 0, 0, 0.25, 0][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6, 7];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Stage 2", "Stage 3", "Stage 4", "Buff Clear", "Stage 2 with Chain Boundary", "Stage 3 with Chain Boundary", "Stage 4 with Chain Boundary", "Buff Clear with Chain Boundary"][n] + ' boost. To ' + ["Stage 2", "Stage 3", "Stage 4", "Buff Clear", "Stage 2 with Chain Boundary", "Stage 3 with Chain Boundary", "Stage 4 with Chain Boundary", "Buff Clear with Chain Boundary"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3996: {
        orb: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Free Spirit") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Orb multiplier. To switch to the ' + levels[(n + 1) % levels.length] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3997: {
        atkbase: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Slasher") || p.unit.class.has("Shooter") ? [800, 0, 800][p.cached.multiplier] : 0; },
        atkbasePlus: function(p) { return [0, 300, 300][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Base ATK Boost", "Base ATK Buff", "Base ATK Boost and Base ATK Buff"][levels[n]] + '. To switch to ' + ["Base ATK Boost", "Base ATK Buff", "Base ATK Boost and Base ATK Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3998: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [0.9, 1.1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Chain Addition. To switch to the ' + levels[(n + 1) % levels.length] + 'x addition, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    3999: {
        chain: function(p) { return 2.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 2.75 : 1;
        },
    },
    4000: {
        chain: function(p) { return 3.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.75 : 1;
        },
        chainCeil: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1];
            return p.chainPosition === 0 ? 0 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [0, 0, 4.25, 4.25][p.cached.multiplier] : 0;
        },
        atkbasePlus: function(p) { return [0, 500, 0, 500][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Chain Lock", "Chain Lock & Base ATK Buff", "Chain Lock & Chain Buff", "All Effects"][levels[n]] + '. To switch to ' + ["Chain Lock", "Chain Lock & Base ATK Buff", "Chain Lock & Chain Buff", "All Effects"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4001: {
        atk: function(p) { return p.unit.type == "INT" || p.unit.type == "DEX" || p.unit.type == "QCK" ? 2.25 : 1; },
        type: "type",
    },
    4005: {
        affinity: function(p) { return [1, 1.75, 1.75][p.cached.multiplier]; },
        orb: function(p) { return [2.5, 1, 2.5][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "Affinity boost", "Both Effects"][n] + '. To switch to ' + ["Orb boost", "Affinity boost", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4006: {
        def: function(p) { return .23; },
        status: function(p) { return p.defenseDown ? 2 : 1; },
        ignoresImmunities: function(p) { return [[], ['def']][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Normal Defense Reduction", "Immunity Ignoring Defense Reduction"][n] + '. To switch to ' + ["Normal Defense Reduction", "Immunity Ignoring Defense Reduction"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4007: {
        increaseDamageTaken: function(p) { return [2.25, 1][p.cached.multiplier]; },
        burn: function(p) { return 2; },
        orb: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") ? 2.75 : 0; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Increased Damage Taken Debuff", "Increased Damage Taken Debuff Disabled"][n] + '. To switch to ' + ["Increased Damage Taken Debuff", "Increased Damage Taken Debuff Disabled"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4008: {
        increaseDamageTaken: function(p) { return [2.25, 1][p.cached.multiplier]; },
        burn: function(p) { return 2; },
        orb: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") ? 2.75 : 1; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Increased Damage Taken Debuff", "Increased Damage Taken Debuff Disabled"][n] + '. To switch to ' + ["Increased Damage Taken Debuff", "Increased Damage Taken Debuff Disabled"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4009: {
        affinity: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Striker") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2, 2.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4010: {
        staticMult: function(p) { return 100; },
        atk: function(p) { return p.unit.class.has("Shooter") ? [2.25, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
    },
    4011: {
        ignoresImmunities: function(p) { return ['def']; },
        def: function(p) { return 0; },
        orb: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") || p.unit.class.has("Slasher") || p.unit.class.has("Fighter") ? [2.75, 1, 2.75][p.cached.multiplier] : 1; },
        orbPlus: function(p) { return [0, 0.5, 0.5][p.cached.multiplier]; },
        chainMultiplication: function(p) { return [1, 1.5, 1.5][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb Boost", "Orb Buff & Chain Multiplication", "Orb Boost, Orb Buff & Chain Multiplication"][n] + '. To switch to ' + ["Orb Boost", "Orb Buff & Chain Multiplication", "Orb Boost, Orb Buff & Chain Multiplication"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4012: {
        ignoresImmunities: function(p) { return ['increaseDamageTaken']; },
        increaseDamageTaken: function(p) { return 1.5; },
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") || p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? [2.75, 1, 2.75][p.cached.multiplier] : 1; },
        type: "class",
        atkPlus: function(p) { return [0, 0.5, 0.5][p.cached.multiplier]; },
        chain: function(p) { return [1, 2.75, 2.75][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [Infinity, 35, 35][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK Boost", "ATK Buff & Chain Boundary", "ATK Boost, ATK Buff & Chain Boundary"][n] + '. To switch to ' + ["ATK Boost", "ATK Buff & Chain Boundary", "ATK Boost, ATK Buff & Chain Boundary"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4019: {
        status: function(p) { return p.defenseDown ? [2.5, 1, 2.5, 1, 2.5, 1, 2.5][p.cached.multiplier] : 1; },
        chainAddition: function(p) { return [0, 1.5, 1.5, 0, 0, 1.5, 1.5][p.cached.multiplier]; },
        atkbase: function(p) { return [0, 0, 0, 1250, 1250, 1250, 1250][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["DEF Down Status Boost", "Chain Addition", "DEF Down Status Boost & Chain Addition", "Base ATK", "DEF Down Status Boost & Base ATK", "Chain Addition & Base ATK", "DEF Down Status Boost, Chain Addition & Base ATK"][n] + '. To switch to ' + ["DEF Down Status Boost", "Chain Addition", "DEF Down Status Boost & Chain Addition", "Base ATK", "DEF Down Status Boost & Base ATK", "Chain Addition & Base ATK", "DEF Down Status Boost, Chain Addition & Base ATK"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4020: {
        status: function(p) { return p.defenseDown ? [2.5, 1, 2.5, 1, 2.5, 1, 2.5][p.cached.multiplier] : 1; },
        chainAddition: function(p) { return [0, 1.5, 1.5, 0, 0, 1.5, 1.5][p.cached.multiplier]; },
        atkbase: function(p) { return [0, 0, 0, 1250, 1250, 1250, 1250][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["DEF Down Status Boost", "Chain Addition", "DEF Down Status Boost & Chain Addition", "Base ATK", "DEF Down Status Boost & Base ATK", "Chain Addition & Base ATK", "DEF Down Status Boost, Chain Addition & Base ATK"][n] + '. To switch to ' + ["DEF Down Status Boost", "Chain Addition", "DEF Down Status Boost & Chain Addition", "Base ATK", "DEF Down Status Boost & Base ATK", "Chain Addition & Base ATK", "DEF Down Status Boost, Chain Addition & Base ATK"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4022: {
        affinity: function(p) { return 2; },
    },
    4023: {
        paralysis: function(p) { return 3; },
    },
    4024: {
        def: function(p) { return 0; },
    },
    4025: {
        status: function(p) { return p.defenseDown ? 2 : 1; },
    },
    4026: {
        atk: function(p) { return p.unit.type == "DEX" ? 1.75 : 1; },
        type: "class",
        atkbase: function(p) { return p.slot == p.sourceSlot ? 800 : 0; },
    },
    4027: {
        atk: function(p) { return 1.5; },
        type: "class",
    },
    4028: {
        affinity: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var levels = [2.25, 2.5, 2.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = n;
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4029: {
        affinity: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var levels = [2.25, 2.5, 2.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = n;
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4030: {
        atk: function(p) { return p.unit.type == "STR" ? 1.75 : 1; },
        type: "class",
    },
    4032: {
        status: function(p) { return p.delayed > 0 ? p.cached.multiplier : 1; },
        chainAddition: function(p) { return 1.0; },
        onActivation: function(p) {
            p.cached.multiplier = p.sourceSlot <= 1 ? 2 : 1;
        },
    },
    4033: {
        status: function(p) { return p.defenseDown ? [2, 1, 2][p.cached.multiplier] : 1; },
        statusPlus: function(p) { return [0, 0.3, 0.3][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Conditional Boost", "Conditional Buff", "Conditional Boost and Conditional Buff"][n] + ' boost. To ' + ["Conditional Boost", "Conditional Buff", "Conditional Boost and Conditional Buff"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4034: {
        atk: function(p) { return p.unit.type == "INT" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? 2.5 : 1; },
        type: "class",
    },
    4035: {
        orb: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? 2.5 : 1; },
    },
    4036: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Striker") ? 2 : 1; },
        type: "class",
    },
    4037: {
        atk: function(p) { return p.slot == p.sourceSlot ? [3, 3.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "type",
        orb: function(p) { return p.slot == p.sourceSlot ? [3, 3.5][CrunchUtils.llimitUnlock(p, "specials")] : 1},
        atkbase: function(p) { return p.slot == p.sourceSlot ? [1250, 1500][CrunchUtils.llimitUnlock(p, "specials")] : 0; },
        affinityPlus: function(p) { return [[0, 0.25][CrunchUtils.llimitUnlock(p, "specials")], 0][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: 'Using the ' + ["Affinity Buff Enabled", "Affinity Buff Disabled"][levels[n]] + ' boost. To switch to the ' + ["Affinity Buff Enabled", "Affinity Buff Disabled"][levels[(n + 1) % levels.length]] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4038: {
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Driven") || p.unit.class.has("Striker") ? 2 : 1; },
    },
    4039: {
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Driven") || p.unit.class.has("Striker") ? 2.25 : 1; },
    },
    4040:{
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 30 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.Slasher >= 4 ? 3 : 2.75;
        },
    },
    4041:{
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 30 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.Slasher >= 4 ? 3 : 2.75;
        },
    },
    4042: {
        atk: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? [2.5, 1, 2.5, 2.75, 2.75][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? [2.25, 1, 2.25, 2.5, 2.5][p.cached.multiplier] : 1},
        chainAddition: function(p) { return [0, 1.6, 1.6, 0, 1.6][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Initial ATK and Orb", "Chain Boost", "Initial ATK and Orb and Chain Boost", "Strong ATK and Orb", "Strong ATK and Orb and Chain Addition"][levels[n]] + ' boost. To switch to the ' + ["Initial ATK and Orb", "Chain Boost", "Initial ATK and Orb and Chain Boost", "Strong ATK and Orb", "Strong ATK and Orb and Chain Addition"][levels[(n + 1) % levels.length]] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4043: {
        atk: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? [2.5, 1, 2.5, 2.75, 2.75][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? [2.25, 1, 2.25, 2.5, 2.5][p.cached.multiplier] : 1},
        chainAddition: function(p) { return [0, 1.6, 1.6, 0, 1.6][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Initial ATK and Orb", "Chain Boost", "Initial ATK and Orb and Chain Boost", "Strong ATK and Orb", "Strong ATK and Orb and Chain Addition"][levels[n]] + ' boost. To switch to the ' + ["Initial ATK and Orb", "Chain Boost", "Initial ATK and Orb and Chain Boost", "Strong ATK and Orb", "Strong ATK and Orb and Chain Addition"][levels[(n + 1) % levels.length]] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4044: {
        chainAdditionPlus: function(p) { return [0, 0.3, 0.6][p.cached.multiplier]; },
        chainAddition: function(p) { return [1.2, 0, 0][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["1.2x Chain Addition Buff", "+0.3 Chain Addition Buff", "+0.6 Chain Addition Buff"][levels[n]] + '. To switch to the ' + ["1.2x Chain Addition Buff", "+0.3 Chain Addition Buff", "+0.6 Chain Addition Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4045: {
        affinity: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Slasher") || p.unit.class.has("Cerebral") ? 2 : 1; },
    },
    4046:{
        status: function(p) { return p.delayed > 0 ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.Slasher >= 4 ? 2 : 1.75;
        },
    },
    4047: {
        atkbase: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? 1000 : 0; },
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [1.75, 2, 2.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'x boost. To use the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4048: {
        ignoresImmunities: function(p) { return [p.cached.multiplier2[1]]; },
        delay: function(p) { return p.cached.multiplier2[0]; },
        status: function(p) { return p.delayed > 0 ? p.cached.multiplier1 : 1; },
        onActivation: function(p) {
            p.cached.multiplier1 = p.captain ? p.captain.class.has("Shooter") || p.captain.class.has("Free Spirit") ? 2.25 : 1 : 1;
            p.cached.multiplier2 = p.captain ? p.captain.class.has("Slasher") ? [1,'delay'] : [0,''] : [0,''];
        },
    },
    4049: {
        orb: function(p) { return p.unit.type == "INT" || p.unit.class.has("Slasher") || p.unit.class.has("Shooter") ? 1.2 : 1; },
    },
    4050: {
        orb: function(p) { return p.unit.type == "DEX" ? [2.75, 1, 2.75][p.cached.multiplier] : [2.5, 1, 2.5][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb Boost", "Orb Multiplier Override", "Both Effects"][levels[n]] + '. To switch to the ' + ["Orb Boost", "Orb Multiplier Override", "Both Effects"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = [false, true, true][p.cached.multiplier];
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        }
    },
    4051: {
        burn: function(p) { return 1; },
        status: function(p) { return p.burn ? p.cached.multiplier1 : 1; },
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? p.cached.multiplier2 : 1; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier1 = p.captain ? p.captain.class.has("Powerhouse") ? 2 : 1.75 : 1.75;
            p.cached.multiplier2 = p.percHP > 99 ? 2.25 : 1;
        }
    },
    4052: {
        affinity: function(p) { return p.unit.class.has("Powerhouse") ? p.cached.multiplier1 : 1; },
        def: function(p) { return [1, 0][p.cached.multiplier]; },
        affinityPlus: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            var levels = [1.75, 2];
            var n = (levels.indexOf(p.cached.multiplier1) + 1) % levels.length;
            p.cached.multiplier = n;
            p.cached.multiplier1 = levels[n];
            p.cached.multiplier2 = p.percHP > 99 ? 0.25 : 0;
            p.scope.notify({
                text: '' + levels[n] + 'x boost. To use the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special<br><br>' + (p.percHP > 99 ? "HP is full, adding 0.25x Affinity Buff." : "HP is not full, not adding Affinity Buff."),
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4053: {
        rcv: function(p) { return 1.5; },
        atkbase: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? 1000 : 0; },
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Free Spirit") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2, 2.25, 2.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'x boost. To use the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4054: {
        orbPlus: function(p) { return [0.25, 0.5][p.cached.multiplier]; },
        statusPlus: function(p) { return [0.25, 0.5][p.cached.multiplier]; },
        onActivation: function(p) {
            console.log(p);
            var levels = [0.25, 0.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the +' + levels[n] + 'x Buff. To switch to +' + levels[(n + 1) % levels.length] + 'x Buff, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4055: {
        orb: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Powerhouse") || p.unit.class.has("Free Spirit") ? 2 : 1; },
    },
    4056: {
        atk: function(p) { return p.unit.type == p.cached.multiplier ? 2.5 : 1; },
        atkbase: function(p) { return p.unit.type == p.cached.multiplier ? [0, 1000][CrunchUtils.llimitUnlock(p, "specials")] : 0; },
        type: "type",
        chainAddition: function(p) { return [1.2, 1.4][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            p.cached.multiplier = p.colorCount.STR>=4 ? "STR" : p.colorCount.DEX>=4 ? "DEX" : p.colorCount.QCK>=4 ? "QCK" : p.colorCount.PSY>=4 ? "PSY" : p.colorCount.INT>=4 ? "INT" : "NaT";
        }
    },
    4057: {
        atk: function(p) { return [p.unit.type == "QCK" && p.unit.class.has("Slasher") ? 3.25 : p.unit.type == "QCK" || p.unit.class.has("Slasher") ? 2.75 : 1, p.unit.type == "QCK" || p.unit.class.has("Slasher") ? 2.75 : 1][p.cached.multiplier1]; },
        type: "type",
        orb: function(p) { return [p.unit.type == "QCK" && p.unit.class.has("Slasher") ? 3 : p.unit.type == "QCK" || p.unit.class.has("Slasher") ? 2.75 : 1, p.unit.type == "QCK" || p.unit.class.has("Slasher") ? 2.75 : 1][p.cached.multiplier2]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier1 = [0, 1, 0, 1][n];
            p.cached.multiplier2 = [0, 0, 1, 1][n];
            p.scope.notify({
                text: 'Using the ' + ["Stronger ATK & Orb buffs", "Weak ATK, Strong Orb buffs", "Weak Orb, Strong ATK buffs", "Weak ATK & Orb buffs"][n] + '. To switch to ' + ["Stronger ATK & Orb buffs", "Weak ATK, Strong Orb buffs", "Weak Orb, Strong ATK buffs", "Weak ATK & Orb buffs"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4058: {
        atk: function(p) { return [p.unit.type == "QCK" && p.unit.class.has("Slasher") ? 3.25 : p.unit.type == "QCK" || p.unit.class.has("Slasher") ? 2.75 : 1, p.unit.type == "QCK" || p.unit.class.has("Slasher") ? 2.75 : 1][p.cached.multiplier1]; },
        type: "type",
        orb: function(p) { return [p.unit.type == "QCK" && p.unit.class.has("Slasher") ? 3 : p.unit.type == "QCK" || p.unit.class.has("Slasher") ? 2.75 : 1, p.unit.type == "QCK" || p.unit.class.has("Slasher") ? 2.75 : 1][p.cached.multiplier2]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = [0, 1, 0, 1][n];
            p.cached.multiplier2 = [0, 0, 1, 1][n];
            p.scope.notify({
                text: 'Using the ' + ["Stronger ATK & Orb buffs", "Weak ATK, Strong Orb buffs", "Weak Orb, Strong ATK buffs", "Weak ATK & Orb buffs"][n] + '. To switch to ' + ["Stronger ATK & Orb buffs", "Weak ATK, Strong Orb buffs", "Weak Orb, Strong ATK buffs", "Weak ATK & Orb buffs"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4063: {
        increaseDamageTaken: function(p) { return p.cached.multiplier; },
        ignoresImmunities: function(p) { return ['increaseDamageTaken']; },
        atk: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Slasher") || p.unit.class.has("Cerebral") ? 2.75 : 1; },
        type: "type",
        superAffinity: function(p) { return p.unit.type == "DEX" ? 3 : 1; },
        onActivation: function(p) {
            var levels = [1.5, 1.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4066: {
        increaseDamageTaken: function(p) { return [1, 1.5][p.cached.multiplier]; },
        chain: function(p) { return p.cached.multiplier1[0]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier1[1] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = p.captain.class.has("Striker") || p.captain.class.has("Slasher") ? [2.75, 40] : [1, Infinity];
            p.scope.notify({
                text: 'Using the ' + ["Increase Damage Taken Disabled", "Increase Damage Taken Enabled"][levels[n]] + '. To switch to the ' + ["Increase Damage Taken Disabled", "Increase Damage Taken Enabled"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4067: {
        burn: function(p) { return 1; },
        ignoresImmunities: function(p) { return ['burn']; },
        status: function(p) { return p.burn ? 2 : 1; },
    },
    4068: {
        burn: function(p) { return 1; },
        ignoresImmunities: function(p) { return ['burn']; },
        status: function(p) { return p.burn ? 2 : 1; },
    },
    4071: {
        atk: function(p) { return [p.unit.type == "QCK" && p.unit.class.has("Free Spirit") ? 3 : p.unit.type == "QCK" || p.unit.class.has("Free Spirit") ? 2.75 : 1, 1, p.unit.type == "QCK" && p.unit.class.has("Free Spirit") ? 3 : p.unit.type == "QCK" || p.unit.class.has("Free Spirit") ? 2.75 : 1][p.cached.multiplier]; },
        type: "type",
        affinity: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Free Spirit") ? [1, 2.75, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "Affinity boost", "ATK and Affinity boost"][levels[n]] + '. To switch to the ' + ["ATK boost", "Affinity boost", "ATK and Affinity boost"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4072: {
        atk: function(p) { return p.cached.multiplier1 ? p.unit.type == "QCK" && p.unit.class.has("Striker") ? 2.75 : p.unit.type == "QCK" || p.unit.class.has("Striker") ? 2.5 : 1 : 1; },
        orb: function(p) { return [1, p.unit.type == "QCK" && p.unit.class.has("Striker") ? 2.75 : p.unit.type == "QCK" || p.unit.class.has("Striker") ? 2.5 : 1][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = p.percHP <= 10;
            p.scope.notify({
                text: 'Using the ' + ["Orb boost disabled", "Orb boost enabled"][levels[n]] + '. To switch to the ' + ["Orb boost disabled", "Orb boost enabled"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4073: {
        atkbase: function(p) { return p.unit.type == "QCK" || p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [1000, 1500];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the +' + levels[n] + ' boost. To switch to the +' + levels[(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4074: {
        increaseDamageTaken: function(p) { return 1.5; },
        increaseDamageTakenPlus: function(p) { return [0, 0.25][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return p.cached.multiplier2; },
        chain: function(p) { return p.cached.multiplier1[0]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier1[1] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = p.percHP <= 10 || p.captain.class.has("Striker") || p.captain.class.has("Slasher") ? [2.75, 40] : [1, Infinity];
            p.cached.multiplier2 = p.percHP <= 10 ? ['increaseDamageTaken'] : [];
            p.scope.notify({
                text: 'Using the ' + ["No TND orb effects", "TND orb effects"][levels[n]] + '. To switch to the ' + ["No TND orb effects", "TND orb effects"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4075: {
        status: function(p) { return p.enemyEffects.increaseDamageTaken || p.enemyEffects.defenseDown ? p.cached.multiplier : 1; },
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? 2.25 : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.percHP <= 10 ? 2.25 : 1;
        }
    },
    4076: {
        def: function(p) { return 0; },
    },
    4077: {
        atk: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? 2 : 1; },
        type: "type",
    },
    4078: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Driven") ? 2.25 : 1; },
    },
    4079: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Driven") ? 2.25 : 1; },
    },
    4080: {
        increaseDamageTaken: function(p) { return p.cached.multiplier1 == 2 ? p.cached.multiplier1 : [2.25, 1, 2.25][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return [[], p.cached.multiplier1 == 2 ? ["increaseDamageTaken"] : []][CrunchUtils.llimitUnlock(p, "specials")]; },
        status: function(p) { return p.enemyEffects.increaseDamageTaken ? [[1, 2.25, 2.25], [1, 2.5, 2.5]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = [1, p.enemyImmunities.increaseDamageTaken ? 2 : 1][CrunchUtils.llimitUnlock(p, "specials")];
            p.scope.notify({
                text: 'Using the ' + ["Increase Damage Taken", "Status ATK Boost", "Both Effects"][levels[n]] + '. To switch to the ' + ["ATK boost", "Affinity boost", "ATK and Affinity boost"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4081: {
        orb: function(p) { return p.unit.type == "INT" || p.unit.class.has("Cerebral") || p.unit.class.has("Shooter") ? [2.75, 1, 2.75][p.cached.multiplier] : 1; },
        orbPlus: function(p) { return [0, 0.5, 0.5][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb Boost", "Orb Buff", "Orb Boost and Orb Buff"][levels[n]] + '. To switch to ' + ["Orb Boost", "Orb Buff", "Orb Boost and Orb Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4082: {
        orb: function(p) { return p.unit.type == "INT" || p.unit.class.has("Cerebral") || p.unit.class.has("Shooter") ? [2.75, 1, 2.75][p.cached.multiplier] : 1; },
        orbPlus: function(p) { return [0, 0.5, 0.5][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb Boost", "Orb Buff", "Orb Boost and Orb Buff"][levels[n]] + '. To switch to ' + ["Orb Boost", "Orb Buff", "Orb Boost and Orb Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4083: {
        weaken: function(p) { return p.cached.multiplier; },
        status: function(p) { return p.enemyEffects.increaseDamageTaken || p.enemyEffects.weaken ? 2.25 : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.sourceSlot >= 2 ? [1.5, 1.25] : [1, 1];
        },
    },
    4084: {
        weaken: function(p) { return p.cached.multiplier; },
        status: function(p) { return p.enemyEffects.increaseDamageTaken || p.enemyEffects.weaken ? 2.25 : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.sourceSlot >= 2 ? [1.5, 1.25] : [1, 1];
        },
    },
    4085: {
        affinity: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 2.25 : 1; },
    },
    4086: {
        chainAddition: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1.1, 1.3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + levels[n] + 'x boost. To ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4087: {
        atkbase: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" || p.unit.class.has("Shooter") ? 1000 : 0; },
        atkbasePlus: function(p) { return p.cached.multiplier2; },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" || p.unit.class.has("Shooter") ? p.cached.multiplier1 : 1; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier1 = p.percHP >= 80 ? 2.25 : 2;
            p.cached.multiplier2 = p.percHP >= 80 ? 300 : 0;
        },
    },
    4090: {
        orb: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? [2, 1, 2][p.cached.multiplier] : 1; },
        orbPlus: function(p) { return [0, 0.3, 0.3][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb Boost", "Orb Buff", "Orb Boost and Orb Buff"][levels[n]] + '. To switch to ' + ["Orb Boost", "Orb Buff", "Orb Boost and Orb Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4091: {
        chainMultiplication: function(p) { return 1.25; },
    },
    4092: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? [2, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        tapTimingPlus: function(p) { return [0, 0.1][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Weak ATK Boost", "Strong ATK Boost and Tap Timing Boost Buff (WIP)"][levels[n]] + '. To switch to ' + ["Weak ATK Boost", "Strong ATK Boost and Tap Timing Boost Buff (WIP)"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4093: {
        orb: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? [2, 2.5][p.cached.multiplier] : 1; },
        atkPlus: function(p) { return [0, 0.25][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Weak Orb Boost", "Strong Orb Boost and ATK Buff"][levels[n]] + '. To switch to ' + ["Weak Orb Boost", "Strong Orb Boost and ATK Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4094: {
        tapTiming: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? [{ Good: 0.1, Great: 0.2, Perfect: 0.1 }, { Good: 0.1, Great: 0.2, Perfect: 0.2 }][p.cached.multiplier] : { Good: 0, Great: 0, Perfect: 0 }; },
        orbPlus: function(p) { return [0, 0.25][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Weak Tap Timing Bonus Boost", "Strong Tap Timing Bonus Boost and ATK Buff"][levels[n]] + '. To switch to ' + ["Weak Tap Timing Bonus Boost", "Strong Tap Timing Bonus Boost and ATK Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4095: {
        tapTiming: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") ? { Good: 0.2, Great: 0.3, Perfect: 0.4 } : { Good: 0, Great: 0, Perfect: 0 }; },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") ? [2.75, 1, 2.75][p.cached.multiplier] : 1; },
        type: "type",
        chain: function(p) { return [1, 2.75, 2.75][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [Infinity, 30, 30][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK Boost", "Chain Boundary", "ATK Boost and Chain Boundary"][levels[n]] + '. To switch to ' + ["ATK Boost", "Chain Boundary", "ATK Boost and Chain Boundary"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4096: {
        tapTiming: function(p) { return p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") ? { Good: 0.2, Great: 0.3, Perfect: 0.4 } : { Good: 0, Great: 0, Perfect: 0 }; },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.class.has("Cerebral") || p.unit.class.has("Free Spirit") ? [2.75, 1, 2.75][p.cached.multiplier] : 1; },
        type: "type",
        chain: function(p) { return [1, 2.75, 2.75][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [Infinity, 30, 30][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK Boost", "Chain Boundary", "ATK Boost and Chain Boundary"][levels[n]] + '. To switch to ' + ["ATK Boost", "Chain Boundary", "ATK Boost and Chain Boundary"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4097: {
        affinity: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 2.25 : 1; },
        chainPlus: function(p) { return 0.3; },
    },
    4098: {
        atk: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Cerebral")) ? [2.5, 2.75][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class",
        orb: function(p) { return (p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Cerebral")) ? 2.5 : 1; },
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = true;
            p.scope.notify({
                text: 'Additionally affects damage if Rayleigh is your captain',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = false;
        }
    },
    4099: {
        orb: function(p) { return p.unit.type == "STR" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [2.75, 3, 3, 3, 3, 3, 3][p.cached.multiplier] : 1; },
        increaseDamageTaken: function(p) { return [1.75, 1.75, 1.75, 1.75, 2.25, 2.25, 2.25][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return [[], [], [], [], ["increaseDamageTaken"], ["increaseDamageTaken"], ["increaseDamageTaken"]][p.cached.multiplier]; },
        atkPlus: function(p) { return [0, 0.25, 0, 0.25, 0.25, 0, 0.25][p.cached.multiplier]; },
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = [false , false, true, true, false, true, true][n];
            p.scope.notify({
                text: 'Using the ' + ["No Confitions Met", "Tri-Color + RCV/TND Condition Met", "Bi-Color + EMPTY Condition Met", "Both Orb Conditions Met", "Enemy Buff & Tri-Color + RCV/TND Condition Met", "Enemy Buff & Bi-Color + EMPTY Condition Met", "Enemy Buff & Both Orb Conditions Met"][levels[n]] + ' Special. To switch to ' + ["No Confitions Met", "Tri-Color + RCV/TND Condition Met", "Bi-Color + EMPTY Condition Met", "Both Orb Conditions Met", "Enemy Buff & Tri-Color + RCV/TND Condition Met", "Enemy Buff & Bi-Color + EMPTY Condition Met", "Enemy Buff & Both Orb Conditions Met"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4100: {
        orb: function(p) { return p.unit.type == "STR" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [2.75, 3, 3, 3, 3, 3, 3][p.cached.multiplier] : 1; },
        increaseDamageTaken: function(p) { return [1.75, 1.75, 1.75, 1.75, 2.25, 2.25, 2.25][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return [[], [], [], [], ["increaseDamageTaken"], ["increaseDamageTaken"], ["increaseDamageTaken"]][p.cached.multiplier]; },
        atkPlus: function(p) { return [0, 0.25, 0, 0.25, 0.25, 0, 0.25][p.cached.multiplier]; },
        turnedOn: [ false, false, false, false, false, false ],
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn[p.slot] = [false , false, true, true, false, true, true][n];
            p.scope.notify({
                text: 'Using the ' + ["No Confitions Met", "Tri-Color + RCV/TND Condition Met", "Bi-Color + EMPTY Condition Met", "Both Orb Conditions Met", "Enemy Buff & Tri-Color + RCV/TND Condition Met", "Enemy Buff & Bi-Color + EMPTY Condition Met", "Enemy Buff & Both Orb Conditions Met"][levels[n]] + ' Special. To switch to ' + ["No Confitions Met", "Tri-Color + RCV/TND Condition Met", "Bi-Color + EMPTY Condition Met", "Both Orb Conditions Met", "Enemy Buff & Tri-Color + RCV/TND Condition Met", "Enemy Buff & Bi-Color + EMPTY Condition Met", "Enemy Buff & Both Orb Conditions Met"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4101: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.class.has("Driven") || p.unit.class.has("Fighter") ? [2.75, 3][p.cached.multiplier] : 1; },
        type: "class",
        chainAddition: function(p) { return [0, 1.6][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Weak Boost", "Strong Boost and Chain Addition"][levels[n]] + '. To switch to ' + ["Weak Boost", "Strong Boost and Chain Addition"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4102: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.class.has("Driven") || p.unit.class.has("Fighter") ? [2.75, 3][p.cached.multiplier] : 1; },
        type: "class",
        chainAddition: function(p) { return [0, 1.6][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Weak Boost", "Strong Boost and Chain Addition"][levels[n]] + '. To switch to ' + ["Weak Boost", "Strong Boost and Chain Addition"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4103: {
        affinity: function(p) { return p.unit.class.has("Driven") ? [1, 2.25][p.cached.multiplier] : 1; },
        delay: function(p) { return 2; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["No Affinity Boost", "Affinity Boost"][levels[n]] + '. To switch to ' + ["No Affinity Boost", "Affinity Boost"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4104: {
        chain: function(p) { return 2.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 20 : 1;
        },
    },
    4105: {
        weaken: function(p) { return [1.2, 1.4]; },
    },
    4106: {
        atkbase: function(p) { return p.unit.type == "STR" || p.unit.class.has("Driven") ? [1250, 0, 1250][p.cached.multiplier] : 1; },
        atkbasePlus: function(p) { return [0, 500, 500][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Base ATK Boost", "Base ATK Buff", "Both Effects"][levels[n]] + '. To switch to ' + ["Base ATK Boost", "Base ATK Buff", "Both Effects"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4107: {
        atkPlus: function(p) { return [0, 0.25][p.cached.multiplier]; },
        orbPlus: function(p) { return [0, 0.25][p.cached.multiplier]; },
        chainAddition: function(p) { return 1.1; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["No ATK/Orb Buff", "ATK/Orb Buff"][levels[n]] + '. To switch to ' + ["No ATK/Orb Buff", "ATK/Orb Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4108: {
        atkPlus: function(p) { return [0, 0.25][p.cached.multiplier]; },
        orbPlus: function(p) { return [0, 0.25][p.cached.multiplier]; },
        chainAddition: function(p) { return 1.3; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["No ATK/Orb Buff", "ATK/Orb Buff"][levels[n]] + '. To switch to ' + ["No ATK/Orb Buff", "ATK/Orb Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4109: {
        tapTiming: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Driven") ? { Good: 0.2, Great: 0.3, Perfect: 0.3 } : { Good: 0, Great: 0, Perfect: 0 }; },
    },
    4110: {
        orb: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Slasher") ? [2.75, 1, 2.75][p.cached.multiplier] : 1; },
        chain: function(p) { return [1, 3, 3][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [Infinity, 20, 20][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb Boost", "Chain Boundary", "Orb Boost and Chain Boundary"][levels[n]] + '. To switch to ' + ["Orb Boost", "Chain Boundary", "Orb Boost and Chain Boundary"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4111: {
        orb: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Slasher") ? [2.75, 1, 2.75][p.cached.multiplier] : 1; },
        chain: function(p) { return [1, 3, 3][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [Infinity, 20, 20][p.cached.multiplier] : 1;
        },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb Boost", "Chain Boundary", "Orb Boost and Chain Boundary"][levels[n]] + '. To switch to ' + ["Orb Boost", "Chain Boundary", "Orb Boost and Chain Boundary"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4112: {
        affinity: function(p) { return p.unit.class.has(p.cached.multiplier1) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.Driven == 6 ? 2 : p.classCount.Striker == 6 ? 2.25 : 1;
            p.cached.multiplier1 = p.classCount.Driven == 6 ? "Driven" : p.classCount.Striker == 6 ? "Striker" : "None";
        },
    },
    4113: {
        atk: function(p) { return p.unit.class.has(p.cached.multiplier1) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.Driven == 6 ? 2.25 : p.classCount.Striker == 6 ? 2.5 : 1;
            p.cached.multiplier1 = p.classCount.Driven == 6 ? "Driven" : p.classCount.Striker == 6 ? "Striker" : "None";
        },
    },
    4114: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [1, 2.5, 2.5, 1, 1, 2.5, 2.5][p.cached.multiplier] : 1; },
        type: "class",
        chainAddition: function(p) { return [0, 1.8, 1.8, 0, 0, 1.8, 1.8][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.type == "STR" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [2.75, 1, 2.75, 1, 2.75, 1, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = [false, false, false, true, true, true, true][n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity Boost", "ATK Boost and Chain Addition", "ATK, Affinity and Chain Addition", "Orb Multiplier Buff", "Affinity Boost and Orb Multiplier Buff", "ATK Boost, Chain Addition and Orb Multiplier Buff", "ATK, Affinity, Chain Addition and Orb Multiplier Buff"][levels[n]] + '. To switch to ' + ["Affinity Boost", "ATK Boost and Chain Addition", "ATK, Affinity and Chain Addition", "Orb Multiplier Buff", "Affinity Boost and Orb Multiplier Buff", "ATK Boost, Chain Addition and Orb Multiplier Buff", "ATK, Affinity, Chain Addition and Orb Multiplier Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4115: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [1, 2.5, 2.5, 1, 1, 2.5, 2.5][p.cached.multiplier] : 1; },
        type: "class",
        chainAddition: function(p) { return [0, 1.8, 1.8, 0, 0, 1.8, 1.8][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.type == "STR" || p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? [2.75, 1, 2.75, 1, 2.75, 1, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4, 5, 6];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = [false, false, false, true, true, true, true][n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity Boost", "ATK Boost and Chain Addition", "ATK, Affinity and Chain Addition", "Orb Multiplier Buff", "Affinity Boost and Orb Multiplier Buff", "ATK Boost, Chain Addition and Orb Multiplier Buff", "ATK, Affinity, Chain Addition and Orb Multiplier Buff"][levels[n]] + '. To switch to ' + ["Affinity Boost", "ATK Boost and Chain Addition", "ATK, Affinity and Chain Addition", "Orb Multiplier Buff", "Affinity Boost and Orb Multiplier Buff", "ATK Boost, Chain Addition and Orb Multiplier Buff", "ATK, Affinity, Chain Addition and Orb Multiplier Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4116: {
        def: function(p) { return 0; },
        dmgredatk: function(p) { return 1+((p.dmgreductionCounter/100)/2); },
        status: function(p) { return p.enemyEffects.increaseDamageTaken || p.delayed > 0 ? 2.25 : 1; },
        affinity: function(p) { return p.unit.type == "STR" || p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? 1.5 : 1; },
    },
    4117: {
        atk: function(p) { return p.unit.class.has("Driven") ? 2 : 1; },
    },
    4119: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Slasher") ? [2, 1, 2][p.cached.multiplier] : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Slasher") ? [1, 2, 2][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK Boost", "Orb Boost", "Both Boosts"][levels[n]] + '. To switch to ' + ["ATK Boost", "Orb Boost", "Both Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    4120: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Slasher") ? [2, 1, 2][p.cached.multiplier] : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Slasher") ? [1, 2.25, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["ATK Boost", "Orb Boost", "Both Boosts"][levels[n]] + '. To switch to ' + ["ATK Boost", "Orb Boost", "Both Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
};

var calcGhostStartIDSpecials = { "start": 5000 };

// for global exclusive units. Will be inserted into window.specials, but the id
// will be deducted from `calcGhostStartIDSpecials`.
var globalEXSpecials = {
    0: {
        atk: function(p) { return 1.75; },
        type: "type",
    },
    1: {
        atk: function(p) { return 1.75; },
        type: "type",
    },
    2: {
        orb: function(p) { return 1.75; },
    },
    3: {
        orb: function(p) { return 1.75; },
    },
    4: {
    },
    5: {
    },
    6: {
    },
    7: {
    },
    8: {
    },
    9: {
    },
    10: {
    },
    11: {
    },
    12: {
    },
    13: {
    },
};

Object.keys(globalEXSpecials).forEach(function (key) {
    window.specials[calcGhostStartIDSpecials["start"]-(Object.keys(globalEXSpecials).length-key)] = globalEXSpecials[key];
});

// for dual/VS units, which use a different id number in the calc. Will be
// inserted into window.specials, but the ids will be offset by `calcGhostStartIDSpecials`,
// so that it wil be easy to move the start of the ids for ghost units.
var ghostsSpecials = {
    0: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 1.5 : 1; },
        type: "type",
    },
    1: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 1.5 : 1; },
        type: "type",
    },
    2: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 1.5 : 1; },
        type: "type",
    },
    3: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 1.5 : 1; },
        type: "type",
    },
    4: {
        orb: function(p) { return 2; }
    },
    5: {
        orb: function(p) { return 2; }
    },
    6: {
        orb: function(p) { return 2; }
    },
    7: {
        orb: function(p) { return 2; }
    },
    8: {
        orb: function(p) { return 2; }
    },
    9: {
        orb: function(p) { return 2; }
    },
    10: {
        orb: function(p) { return 2; }
    },
    11: {
        orb: function(p) { return 2; }
    },
    12: {
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "PSY") ? [2.25, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
    },
    13: {
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "PSY") ? [2.25, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
    },
    14: {
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "PSY") ? [2.25, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
    },
    15: {
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "PSY") ? [2.25, 2.5][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
    },
    16: {
    },
    17: {
    },
    18: {
    },
    19: {
    },
    20: {
    },
    21: {
    },
    22: {
    },
    23: {
    },
    24: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" ? 1.5 : 1; },
        type: "type",
    },
    25: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" ? 1.5 : 1; },
        type: "type",
    },
    26: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" ? 1.5 : 1; },
        type: "type",
    },
    27: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" ? 1.5 : 1; },
        type: "type",
    },
    28: {
        atk: function(p) { return p.unit.class.has("Driven") ? 2.25 : 1; },
        type: "class",
    },
    29: {
        atk: function(p) { return p.unit.class.has("Driven") ? 2.25 : 1; },
        type: "class",
    },
    30: {
        atk: function(p) { return p.unit.class.has("Driven") ? 2.25 : 1; },
        type: "class",
    },
    31: {
        atk: function(p) { return p.unit.class.has("Driven") ? 2.25 : 1; },
        type: "class",
    },
    32: {
        atk: function(p) { return p.unit.class.has("Driven") ? 2.25 : 1; },
        type: "class",
    },
    33: {
        atk: function(p) { return p.unit.class.has("Driven") ? 2.25 : 1; },
        type: "class",
    },
    34: {
        atk: function(p) { return p.unit.class.has("Driven") ? 2.25 : 1; },
        type: "class",
    },
    35: {
        atk: function(p) { return p.unit.class.has("Driven") ? 2.25 : 1; },
        type: "class",
    },
    36: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; }
    },
    37: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; }
    },
    38: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; }
    },
    39: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; }
    },
    40: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; }
    },
    41: {
        atk: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Powerhouse") ? 2 : 1; }
    },
    42: {
        orb: function(p) { return (p.unit.type == "QCK" || p.unit.type == "PSY" || p.unit.type == "INT") ? 2 : 1; },
    },
    43: {
        orb: function(p) { return (p.unit.type == "QCK" || p.unit.type == "PSY" || p.unit.type == "INT") ? 2 : 1; },
    },
    44: {
        orb: function(p) { return (p.unit.type == "QCK" || p.unit.type == "PSY" || p.unit.type == "INT") ? 2 : 1; },
    },
    45: {
        orb: function(p) { return (p.unit.type == "QCK" || p.unit.type == "PSY" || p.unit.type == "INT") ? 2 : 1; },
    },
    46: {
        orb: function(p) { return (p.unit.type == "QCK" || p.unit.type == "PSY" || p.unit.type == "INT") ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        delay: function(p) { return [0, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: '' + ["No Delay", "Delay"][n] + '. To use the ' + ["No Delay", "Delay"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    47: {
        orb: function(p) { return (p.unit.type == "QCK" || p.unit.type == "PSY" || p.unit.type == "INT") ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        delay: function(p) { return [0, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: '' + ["No Delay", "Delay"][n] + '. To use the ' + ["No Delay", "Delay"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    48: {
        orb: function(p) { return (p.unit.type == "QCK" || p.unit.type == "PSY" || p.unit.type == "INT") ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        delay: function(p) { return [0, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: '' + ["No Delay", "Delay"][n] + '. To use the ' + ["No Delay", "Delay"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    49: {
        orb: function(p) { return (p.unit.type == "QCK" || p.unit.type == "PSY" || p.unit.type == "INT") ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        delay: function(p) { return [0, p.cached.multiplier][CrunchUtils.llimitUnlock(p, "specials")]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            if (CrunchUtils.llimitUnlock(p, "specials") > 0) p.scope.notify({
                text: '' + ["No Delay", "Delay"][n] + '. To use the ' + ["No Delay", "Delay"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    50:{
        poison: function(p) { return 99; },
        affinity: function(p) { return window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn ? (p.unit.type == "QCK" || p.unit.type == "INT") ? 2 : 1 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = p.captain != null && (p.captain.type == "QCK" || p.captain.type == "INT");
        },
    },
    51:{
        poison: function(p) { return 99; },
        affinity: function(p) { return window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn ? (p.unit.type == "QCK" || p.unit.type == "INT") ? 2 : 1 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = p.captain != null && (p.captain.type == "QCK" || p.captain.type == "INT");
        },
    },
    52:{
        poison: function(p) { return 99; },
        affinity: function(p) { return window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn ? (p.unit.type == "QCK" || p.unit.type == "INT") ? 2 : 1 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = p.captain != null && (p.captain.type == "QCK" || p.captain.type == "INT");
        },
    },
    53:{
        poison: function(p) { return 99; },
        affinity: function(p) { return window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn ? (p.unit.type == "QCK" || p.unit.type == "INT") ? 2 : 1 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = p.captain != null && (p.captain.type == "QCK" || p.captain.type == "INT");
        },
    },
    54:{
        poison: function(p) { return 99; },
        affinity: function(p) { return window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn ? (p.unit.type == "QCK" || p.unit.type == "INT") ? 2 : 1 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = p.captain != null && (p.captain.type == "QCK" || p.captain.type == "INT");
        },
    },
    55:{
        poison: function(p) { return 99; },
        affinity: function(p) { return window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn ? (p.unit.type == "QCK" || p.unit.type == "INT") ? 2 : 1 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = p.captain != null && (p.captain.type == "QCK" || p.captain.type == "INT");
        },
    },
    56:{
        poison: function(p) { return 99; },
        affinity: function(p) { return window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn ? (p.unit.type == "QCK" || p.unit.type == "INT") ? 2 : 1 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = p.captain != null && (p.captain.type == "QCK" || p.captain.type == "INT");
        },
    },
    57:{
        poison: function(p) { return 99; },
        affinity: function(p) { return window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn ? (p.unit.type == "QCK" || p.unit.type == "INT") ? 2 : 1 : 1; },
        turnedOn: false,
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = p.captain != null && (p.captain.type == "QCK" || p.captain.type == "INT");
        },
    },
    58: {
        atk: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Fighter")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.75 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.75 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    59: {
        atk: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Fighter")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.75 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.75 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    60: {
        atk: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Fighter")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.75 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.75 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    61: {
        atk: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Fighter")) ? p.cached.multiplier : 1; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.75 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.75 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    62: {
        atk: function(p) { return 1.75; },
        type: "class"
    },
    63: {
        atk: function(p) { return 1.75; },
        type: "class"
    },
    64: {
        atk: function(p) { return 1.75; },
        type: "class"
    },
    65: {
        atk: function(p) { return 1.75; },
        type: "class"
    },
    66: {
        orb: function(p) { return 2.5; }
    },
    67: {
        orb: function(p) { return 2.5; }
    },
    68: {
        orb: function(p) { return 2.5; }
    },
    69: {
        orb: function(p) { return 2.5; }
    },
    70: {
        orb: function(p) { return 2.5; }
    },
    71: {
        orb: function(p) { return 2.5; }
    },
    72: {
        orb: function(p) { return 2.5; }
    },
    73: {
        orb: function(p) { return 2.5; }
    },
    74: {
        atkbase: function(p) { return Math.min(1000,window.specials[p.team[p.sourceSlot].unit.number+1].momBoost); },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 3.5) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.percHP >= 50) {
                p.cached.multiplier = 3.5;
            }
            window.specials[p.team[p.sourceSlot].unit.number+1].momBoost = Math.floor(p.percHP*p.maxHP/10000);
        },
    },
    75: {
        atkbase: function(p) { return Math.min(1000,window.specials[p.team[p.sourceSlot].unit.number+1].momBoost); },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 3.5) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.percHP >= 50) {
                p.cached.multiplier = 3.5;
            }
            window.specials[p.team[p.sourceSlot].unit.number+1].momBoost = Math.floor(p.percHP*p.maxHP/10000);
        },
    },
    76: {
        atkbase: function(p) { return Math.min(1000,window.specials[p.team[p.sourceSlot].unit.number+1].momBoost); },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 3.5) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.percHP >= 50) {
                p.cached.multiplier = 3.5;
            }
            window.specials[p.team[p.sourceSlot].unit.number+1].momBoost = Math.floor(p.percHP*p.maxHP/10000);
        },
    },
    77: {
        atkbase: function(p) { return Math.min(1000,window.specials[p.team[p.sourceSlot].unit.number+1].momBoost); },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 3.5) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.percHP >= 50) {
                p.cached.multiplier = 3.5;
            }
            window.specials[p.team[p.sourceSlot].unit.number+1].momBoost = Math.floor(p.percHP*p.maxHP/10000);
        },
    },
    78: {
        atkbase: function(p) { return Math.min(1000,window.specials[p.team[p.sourceSlot].unit.number+1].momBoost); },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 3.5) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.percHP >= 50) {
                p.cached.multiplier = 3.5;
            }
            window.specials[p.team[p.sourceSlot].unit.number+1].momBoost = Math.floor(p.percHP*p.maxHP/10000);
        },
    },
    79: {
        atkbase: function(p) { return Math.min(1000,window.specials[p.team[p.sourceSlot].unit.number+1].momBoost); },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 3.5) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = 1;
            if (p.percHP >= 50) {
                p.cached.multiplier = 3.5;
            }
            window.specials[p.team[p.sourceSlot].unit.number+1].momBoost = Math.floor(p.percHP*p.maxHP/10000);
        },
    },
    80: {
        atk: function(p) { return !(p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse")) ? 1 : p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Fighter") || p.captain.class.has("Slasher") || p.captain.class.has("Powerhouse")) ? 2 : 1;
        }
    },
    81: {
        atk: function(p) { return !(p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse")) ? 1 : p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Fighter") || p.captain.class.has("Slasher") || p.captain.class.has("Powerhouse")) ? 2 : 1;
        }
    },
    82: {
        atk: function(p) { return !(p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse")) ? 1 : p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Fighter") || p.captain.class.has("Slasher") || p.captain.class.has("Powerhouse")) ? 2 : 1;
        }
    },
    83: {
        atk: function(p) { return !(p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse")) ? 1 : p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Fighter") || p.captain.class.has("Slasher") || p.captain.class.has("Powerhouse")) ? 2 : 1;
        }
    },
    84: {
        atk: function(p) { return !(p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse")) ? 1 : p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Fighter") || p.captain.class.has("Slasher") || p.captain.class.has("Powerhouse")) ? 2 : 1;
        }
    },
    85: {
        atk: function(p) { return !(p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse")) ? 1 : p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Fighter") || p.captain.class.has("Slasher") || p.captain.class.has("Powerhouse")) ? 2 : 1;
        }
    },
    86: {
        atk: function(p) { return !(p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse")) ? 1 : p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Fighter") || p.captain.class.has("Slasher") || p.captain.class.has("Powerhouse")) ? 2 : 1;
        }
    },
    87: {
        atk: function(p) { return !(p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Powerhouse")) ? 1 : p.cached.multiplier; },
        type: "type",
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.class.has("Fighter") || p.captain.class.has("Slasher") || p.captain.class.has("Powerhouse")) ? 2 : 1;
        }
    },
    88: {
    },
    89: {
    },
    90: {
    },
    91: {
    },
    92: {
    },
    93: {
    },
    94: {
    },
    95: {
    },
    96: {
    },
    97: {
    },
    98: {
    },
    99: {
    },
    100: {
    },
    101: {
    },
    102: {
    },
    103: {
    },
    104: {
        affinity: function(p) { return 1.75; }
    },
    105: {
        affinity: function(p) { return 1.75; }
    },
    106: {
        affinity: function(p) { return 1.75; }
    },
    107: {
        affinity: function(p) { return 1.75; }
    },
    108: {
        affinity: function(p) { return 1.75; }
    },
    109: {
        affinity: function(p) { return 1.75; }
    },
    110: {
        affinity: function(p) { return 1.75; }
    },
    111: {
        affinity: function(p) { return 1.75; }
    },
    112: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2.75 ? 1 : 0);
            p.cached.multiplier = [2.75,3.25][n];
            p.scope.notify({
                text: 'Using the ' + [2.75, 3.25][n] + 'x Chain Lock. To switch to the ' + [3.25, 2.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    113: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2.75 ? 1 : 0);
            p.cached.multiplier = [2.75,3.25][n];
            p.scope.notify({
                text: 'Using the ' + [2.75, 3.25][n] + 'x Chain Lock. To switch to the ' + [3.25, 2.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    114: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2.75 ? 1 : 0);
            p.cached.multiplier = [2.75,3.25][n];
            p.scope.notify({
                text: 'Using the ' + [2.75, 3.25][n] + 'x Chain Lock. To switch to the ' + [3.25, 2.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    115: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2.75 ? 1 : 0);
            p.cached.multiplier = [2.75,3.25][n];
            p.scope.notify({
                text: 'Using the ' + [2.75, 3.25][n] + 'x Chain Lock. To switch to the ' + [3.25, 2.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    116: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2.75 ? 1 : 0);
            p.cached.multiplier = [2.75,3.25][n];
            p.scope.notify({
                text: 'Using the ' + [2.75, 3.25][n] + 'x Chain Lock. To switch to the ' + [3.25, 2.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    117: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2.75 ? 1 : 0);
            p.cached.multiplier = [2.75,3.25][n];
            p.scope.notify({
                text: 'Using the ' + [2.75, 3.25][n] + 'x Chain Lock. To switch to the ' + [3.25, 2.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    118: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2.75 ? 1 : 0);
            p.cached.multiplier = [2.75,3.25][n];
            p.scope.notify({
                text: 'Using the ' + [2.75, 3.25][n] + 'x Chain Lock. To switch to the ' + [3.25, 2.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    119: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2.75 ? 1 : 0);
            p.cached.multiplier = [2.75,3.25][n];
            p.scope.notify({
                text: 'Using the ' + [2.75, 3.25][n] + 'x Chain Lock. To switch to the ' + [3.25, 2.75][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    120: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; }
    },
    121: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; }
    },
    122: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; }
    },
    123: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; }
    },
    124: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; }
    },
    125: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; }
    },
    126: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; }
    },
    127: {
        atk: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Fighter") ? 1.75 : 1; }
    },
    128: {
        affinity: function(p) { return 3; },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    129: {
        affinity: function(p) { return 3; },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    130: {
        affinity: function(p) { return 3; },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    131: {
        affinity: function(p) { return 3; },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    132: {
        affinity: function(p) { return 3; },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    133: {
        affinity: function(p) { return 3; },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    134: {
        affinity: function(p) { return 3; },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    135: {
        affinity: function(p) { return 3; },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        }
    },
    136: {
        atk: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral")) ? 2.25 : 1; },
        type: "class"
    },
    137: {
        atk: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral")) ? 2.25 : 1; },
        type: "class"
    },
    138: {
        atk: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral")) ? 2.25 : 1; },
        type: "class"
    },
    139: {
        atk: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral")) ? 2.25 : 1; },
        type: "class"
    },
    140: {
        atk: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral")) ? 2.25 : 1; },
        type: "class"
    },
    141: {
        atk: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral")) ? 2.25 : 1; },
        type: "class"
    },
    142: {
        atk: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral")) ? 2.25 : 1; },
        type: "class"
    },
    143: {
        atk: function(p) { return (p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral")) ? 2.25 : 1; },
        type: "class"
    },
    144: {
        atk: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1.75, 1.75, 1.75, 1, 1 ][p.cached.multiplier] : 1; },
        type: "class",
        affinity: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1.75, 1.75, 1, 1.75, 1 ][p.cached.multiplier] : 1; },
        orb: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1, 2.25, 2.25, 2.25, 2.25 ][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == undefined ? 0 : (p.cached.multiplier + 1) % 5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['ATK and Affinity Boost', 'ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost'][n] + '. To switch to the ' + ['ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost', 'ATK and Affinity Boost' ][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    145: {
        atk: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1.75, 1.75, 1.75, 1, 1 ][p.cached.multiplier] : 1; },
        type: "class",
        affinity: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1.75, 1.75, 1, 1.75, 1 ][p.cached.multiplier] : 1; },
        orb: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1, 2.25, 2.25, 2.25, 2.25 ][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == undefined ? 0 : (p.cached.multiplier + 1) % 5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['ATK and Affinity Boost', 'ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost'][n] + '. To switch to the ' + ['ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost', 'ATK and Affinity Boost' ][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    146: {
        atk: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1.75, 1.75, 1.75, 1, 1 ][p.cached.multiplier] : 1; },
        type: "class",
        affinity: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1.75, 1.75, 1, 1.75, 1 ][p.cached.multiplier] : 1; },
        orb: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1, 2.25, 2.25, 2.25, 2.25 ][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == undefined ? 0 : (p.cached.multiplier + 1) % 5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['ATK and Affinity Boost', 'ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost'][n] + '. To switch to the ' + ['ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost', 'ATK and Affinity Boost' ][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    147: {
        atk: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1.75, 1.75, 1.75, 1, 1 ][p.cached.multiplier] : 1; },
        type: "class",
        affinity: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1.75, 1.75, 1, 1.75, 1 ][p.cached.multiplier] : 1; },
        orb: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1, 2.25, 2.25, 2.25, 2.25 ][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == undefined ? 0 : (p.cached.multiplier + 1) % 5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['ATK and Affinity Boost', 'ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost'][n] + '. To switch to the ' + ['ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost', 'ATK and Affinity Boost' ][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    148: {
        atk: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1.75, 1.75, 1.75, 1, 1 ][p.cached.multiplier] : 1; },
        type: "class",
        affinity: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1.75, 1.75, 1, 1.75, 1 ][p.cached.multiplier] : 1; },
        orb: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1, 2.25, 2.25, 2.25, 2.25 ][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == undefined ? 0 : (p.cached.multiplier + 1) % 5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['ATK and Affinity Boost', 'ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost'][n] + '. To switch to the ' + ['ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost', 'ATK and Affinity Boost' ][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    149: {
        atk: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1.75, 1.75, 1.75, 1, 1 ][p.cached.multiplier] : 1; },
        type: "class",
        affinity: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1.75, 1.75, 1, 1.75, 1 ][p.cached.multiplier] : 1; },
        orb: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1, 2.25, 2.25, 2.25, 2.25 ][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == undefined ? 0 : (p.cached.multiplier + 1) % 5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['ATK and Affinity Boost', 'ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost'][n] + '. To switch to the ' + ['ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost', 'ATK and Affinity Boost' ][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    150: {
        atk: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1.75, 1.75, 1.75, 1, 1 ][p.cached.multiplier] : 1; },
        type: "class",
        affinity: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1.75, 1.75, 1, 1.75, 1 ][p.cached.multiplier] : 1; },
        orb: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1, 2.25, 2.25, 2.25, 2.25 ][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == undefined ? 0 : (p.cached.multiplier + 1) % 5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['ATK and Affinity Boost', 'ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost'][n] + '. To switch to the ' + ['ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost', 'ATK and Affinity Boost' ][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    151: {
        atk: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1.75, 1.75, 1.75, 1, 1 ][p.cached.multiplier] : 1; },
        type: "class",
        affinity: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1.75, 1.75, 1, 1.75, 1 ][p.cached.multiplier] : 1; },
        orb: function(p) { return (p.unit.class.has("Striker") || p.unit.class.has("Cerebral")) ? [ 1, 2.25, 2.25, 2.25, 2.25 ][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == undefined ? 0 : (p.cached.multiplier + 1) % 5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['ATK and Affinity Boost', 'ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost'][n] + '. To switch to the ' + ['ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost', 'ATK and Affinity Boost' ][n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    152: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
    },
    153: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
    },
    154: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
    },
    155: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
    },
    156: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
    },
    157: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
    },
    158: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
    },
    159: {
        affinity: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
    },
    160: {
    },
    161: {
    },
    162: {
    },
    163: {
    },
    164: {
    },
    165: {
    },
    166: {
    },
    167: {
    },
    168: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "INT") ? [1, 1.75][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "INT") ? [1, 1.75][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class"
    },
    169: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "INT") ? [1, 1.75][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "INT") ? [1, 1.75][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class"
    },
    170: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "INT") ? [1, 1.75][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "INT") ? [1, 1.75][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class"
    },
    171: {
        atk: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "INT") ? [1, 1.75][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "INT") ? [1, 1.75][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        type: "class"
    },
    172: {
        atk: function(p) { return (p.unit.type == "PSY" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            if (p.colorCount.PSY + p.colorCount.INT >= 5) {
                p.cached.multiplier = 2;
            }
            else {
                p.cached.multiplier = 1.75;
            }
        },
    },
    173: {
        atk: function(p) { return (p.unit.type == "PSY" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            if (p.colorCount.PSY + p.colorCount.INT >= 5) {
                p.cached.multiplier = 2;
            }
            else {
                p.cached.multiplier = 1.75;
            }
        },
    },
    174: {
        atk: function(p) { return (p.unit.type == "PSY" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            if (p.colorCount.PSY + p.colorCount.INT >= 5) {
                p.cached.multiplier = 2;
            }
            else {
                p.cached.multiplier = 1.75;
            }
        },
    },
    175: {
        atk: function(p) { return (p.unit.type == "PSY" || p.unit.type == "INT") ? p.cached.multiplier : 1; },
        type: "type",
        onActivation: function(p) {
            if (p.colorCount.PSY + p.colorCount.INT >= 5) {
                p.cached.multiplier = 2;
            }
            else {
                p.cached.multiplier = 1.75;
            }
        },
    },
    176: {
        orb: function(p) { return (p.unit.class.has('Slasher') || p.unit.class.has('Free Spirit')) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : p.cached.multiplier == 2.5 ? 2 : 0);
            p.cached.multiplier = [2, 2.5, 2.75][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.5, 2.75][n] + 'x Orb multiplier. To switch to the ' + [2.5, 2.75, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        },
    },
    177: {
        orb: function(p) { return (p.unit.class.has('Slasher') || p.unit.class.has('Free Spirit')) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : p.cached.multiplier == 2.5 ? 2 : 0);
            p.cached.multiplier = [2, 2.5, 2.75][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.5, 2.75][n] + 'x Orb multiplier. To switch to the ' + [2.5, 2.75, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        },
    },
    178: {
        orb: function(p) { return (p.unit.class.has('Slasher') || p.unit.class.has('Free Spirit')) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : p.cached.multiplier == 2.5 ? 2 : 0);
            p.cached.multiplier = [2, 2.5, 2.75][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.5, 2.75][n] + 'x Orb multiplier. To switch to the ' + [2.5, 2.75, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        },
    },
    179: {
        orb: function(p) { return (p.unit.class.has('Slasher') || p.unit.class.has('Free Spirit')) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : p.cached.multiplier == 2.5 ? 2 : 0);
            p.cached.multiplier = [2, 2.5, 2.75][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.5, 2.75][n] + 'x Orb multiplier. To switch to the ' + [2.5, 2.75, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        },
    },
    180: {
        orb: function(p) { return (p.unit.class.has('Slasher') || p.unit.class.has('Free Spirit')) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : p.cached.multiplier == 2.5 ? 2 : 0);
            p.cached.multiplier = [2, 2.5, 2.75][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.5, 2.75][n] + 'x Orb multiplier. To switch to the ' + [2.5, 2.75, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        },
    },
    181: {
        orb: function(p) { return (p.unit.class.has('Slasher') || p.unit.class.has('Free Spirit')) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : p.cached.multiplier == 2.5 ? 2 : 0);
            p.cached.multiplier = [2, 2.5, 2.75][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.5, 2.75][n] + 'x Orb multiplier. To switch to the ' + [2.5, 2.75, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        },
    },
    182: {
        orb: function(p) { return (p.unit.class.has('Slasher') || p.unit.class.has('Free Spirit')) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : p.cached.multiplier == 2.5 ? 2 : 0);
            p.cached.multiplier = [2, 2.5, 2.75][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.5, 2.75][n] + 'x Orb multiplier. To switch to the ' + [2.5, 2.75, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        },
    },
    183: {
        orb: function(p) { return (p.unit.class.has('Slasher') || p.unit.class.has('Free Spirit')) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 2 ? 1 : p.cached.multiplier == 2.5 ? 2 : 0);
            p.cached.multiplier = [2, 2.5, 2.75][n];
            p.scope.notify({
                text: 'Using the ' + [2, 2.5, 2.75][n] + 'x Orb multiplier. To switch to the ' + [2.5, 2.75, 2][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        chain: function(p) { return 3; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3 : 1;
        },
    },
    184: {
        atk: function(p) { return p.delayed > 0 ? p.cached.multiplier : 1; },
        type: "condition",
        delay: function(p) { return p.cached.multiplier == 1.75 ? 2 : 0; },
        onActivation: function(p) {
            var n = (p.percHP <= 50 ? 1.75 : 1);
            p.cached.multiplier = n;
        }
    },
    185: {
        atk: function(p) { return p.delayed > 0 ? p.cached.multiplier : 1; },
        type: "condition",
        delay: function(p) { return p.cached.multiplier == 1.75 ? 2 : 0; },
        onActivation: function(p) {
            var n = (p.percHP <= 50 ? 1.75 : 1);
            p.cached.multiplier = n;
        }
    },
    186: {
        atk: function(p) { return p.delayed > 0 ? p.cached.multiplier : 1; },
        type: "condition",
        delay: function(p) { return p.cached.multiplier == 1.75 ? 2 : 0; },
        onActivation: function(p) {
            var n = (p.percHP <= 50 ? 1.75 : 1);
            p.cached.multiplier = n;
        }
    },
    187: {
        atk: function(p) { return p.delayed > 0 ? p.cached.multiplier : 1; },
        type: "condition",
        delay: function(p) { return p.cached.multiplier == 1.75 ? 2 : 0; },
        onActivation: function(p) {
            var n = (p.percHP <= 50 ? 1.75 : 1);
            p.cached.multiplier = n;
        }
    },
    188: {
        atk: function(p) { return p.delayed > 0 ? p.cached.multiplier : 1; },
        type: "condition",
        delay: function(p) { return p.cached.multiplier == 1.75 ? 2 : 0; },
        onActivation: function(p) {
            var n = (p.percHP <= 50 ? 1.75 : 1);
            p.cached.multiplier = n;
        }
    },
    189: {
        atk: function(p) { return p.delayed > 0 ? p.cached.multiplier : 1; },
        type: "condition",
        delay: function(p) { return p.cached.multiplier == 1.75 ? 2 : 0; },
        onActivation: function(p) {
            var n = (p.percHP <= 50 ? 1.75 : 1);
            p.cached.multiplier = n;
        }
    },
    190: {
        atk: function(p) { return p.delayed > 0 ? p.cached.multiplier : 1; },
        type: "condition",
        delay: function(p) { return p.cached.multiplier == 1.75 ? 2 : 0; },
        onActivation: function(p) {
            var n = (p.percHP <= 50 ? 1.75 : 1);
            p.cached.multiplier = n;
        }
    },
    191: {
        atk: function(p) { return p.delayed > 0 ? p.cached.multiplier : 1; },
        type: "condition",
        delay: function(p) { return p.cached.multiplier == 1.75 ? 2 : 0; },
        onActivation: function(p) {
            var n = (p.percHP <= 50 ? 1.75 : 1);
            p.cached.multiplier = n;
        }
    },
    192: {
        atk: function(p) { return p.unit.type == "STR" ? 2.75 : 1; },
        type: "type",
    },
    193: {
        atk: function(p) { return p.unit.type == "STR" ? 2.75 : 1; },
        type: "type",
    },
    194: {
        atk: function(p) { return p.unit.type == "STR" ? 2.75 : 1; },
        type: "type",
    },
    195: {
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "INT") ? 2.5 : 1; },
    },
    196: {
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "INT") ? 2.5 : 1; },
    },
    197: {
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "INT") ? 2.5 : 1; },
    },
    198: {
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "INT") ? 2.5 : 1; },
    },
    199: {
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "INT") ? 2.5 : 1; },
    },
    200: {
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "INT") ? 2.5 : 1; },
    },
    201: {
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "INT") ? 2.5 : 1; },
    },
    202: {
        orb: function(p) { return (p.unit.type == "DEX" || p.unit.type == "INT") ? 2.5 : 1; },
    },
    203: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 3 ? 1 : p.cached.multiplier == 3.25 ? 2 : 0);
            p.cached.multiplier = [3, 3.25, 3.5][n];
            p.scope.notify({
                text: 'Using the ' + [3, 3.25, 3.5][n] + 'x Chain Lock. To switch to the ' + [3.25, 3.5, 3][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    204: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 3 ? 1 : p.cached.multiplier == 3.25 ? 2 : 0);
            p.cached.multiplier = [3, 3.25, 3.5][n];
            p.scope.notify({
                text: 'Using the ' + [3, 3.25, 3.5][n] + 'x Chain Lock. To switch to the ' + [3.25, 3.5, 3][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    205: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 3 ? 1 : p.cached.multiplier == 3.25 ? 2 : 0);
            p.cached.multiplier = [3, 3.25, 3.5][n];
            p.scope.notify({
                text: 'Using the ' + [3, 3.25, 3.5][n] + 'x Chain Lock. To switch to the ' + [3.25, 3.5, 3][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    206: {
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 3 ? 1 : p.cached.multiplier == 3.25 ? 2 : 0);
            p.cached.multiplier = [3, 3.25, 3.5][n];
            p.scope.notify({
                text: 'Using the ' + [3, 3.25, 3.5][n] + 'x Chain Lock. To switch to the ' + [3.25, 3.5, 3][n] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    207: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP >= 30 ? 2 : 2.5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 30%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    208: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP >= 30 ? 2 : 2.5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 30%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    209: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP >= 30 ? 2 : 2.5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 30%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    210: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP >= 30 ? 2 : 2.5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 30%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    211: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP >= 30 ? 2 : 2.5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 30%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    212: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP >= 30 ? 2 : 2.5);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2 ? 'above' : 'below') + ' 30%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    213: {
        chain: function(p) { return 3.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.5 : 1;
        }
    },
    214: {
        chain: function(p) { return 3.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.5 : 1;
        }
    },
    215: {
        chain: function(p) { return 3.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.5 : 1;
        }
    },
    216: {
        chain: function(p) { return 3.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.5 : 1;
        }
    },
    217: {
        chain: function(p) { return 3.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.5 : 1;
        }
    },
    218: {
        chain: function(p) { return 3.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.5 : 1;
        }
    },
    219: {
        chain: function(p) { return 3.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.5 : 1;
        }
    },
    220: {
        chain: function(p) { return 3.5; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.5 : 1;
        }
    },
    221: {
        orb: function(p) { return 2; },
        warning: "Selected special (%name%) assumes that the enemy has Delay Protection."
    },
    222: {
        orb: function(p) { return 2; },
        warning: "Selected special (%name%) assumes that the enemy has Delay Protection."
    },
    223: {
        orb: function(p) { return 2; },
        warning: "Selected special (%name%) assumes that the enemy has Delay Protection."
    },
    224: {
        orb: function(p) { return 2; },
        warning: "Selected special (%name%) assumes that the enemy has Delay Protection."
    },
    225: {
        orb: function(p) { return 2; },
        warning: "Selected special (%name%) assumes that the enemy has Delay Protection."
    },
    226: {
        orb: function(p) { return 2; },
        warning: "Selected special (%name%) assumes that the enemy has Delay Protection."
    },
    227: {
        orb: function(p) { return 2; },
        warning: "Selected special (%name%) assumes that the enemy has Delay Protection."
    },
    228: {
        orb: function(p) { return 2; },
        warning: "Selected special (%name%) assumes that the enemy has Delay Protection."
    },
    229: {
        atk: function(p) { return p.delayed > 0 ? 1.75 : 1; },
        type: "condition",
    },
    230: {
        atk: function(p) { return p.delayed > 0 ? 1.75 : 1; },
        type: "condition",
    },
    231: {
        atk: function(p) { return p.delayed > 0 ? 1.75 : 1; },
        type: "condition",
    },
    232: {
        atk: function(p) { return p.delayed > 0 ? 1.75 : 1; },
        type: "condition",
    },
    233: {
        atk: function(p) { return p.delayed > 0 ? 1.75 : 1; },
        type: "condition",
    },
    234: {
        atk: function(p) { return p.delayed > 0 ? 1.75 : 1; },
        type: "condition",
    },
    235: {
        atk: function(p) { return p.delayed > 0 ? 1.75 : 1; },
        type: "condition",
    },
    236: {
        atk: function(p) { return p.delayed > 0 ? 1.75 : 1; },
        type: "condition",
    },
    237: {
        delay: function(p) { return 2; },
    },
    238: {
        delay: function(p) { return 2; },
    },
    239: {
        delay: function(p) { return 2; },
    },
    240: {
        atk: function(p) { return 2; },
        type: "condition",
    },
    241: {
        atk: function(p) { return 2; },
        type: "condition",
    },
    242: {
        atk: function(p) { return 2; },
        type: "condition",
    },
    243: {
        atk: function(p) { return 2; },
        type: "condition",
    },
    244: {
        atk: function(p) { return 2; },
        type: "condition",
    },
    245: {
        atk: function(p) { return 2; },
        type: "condition",
    },
    246: {
        atk: function(p) { return 2; },
        type: "condition",
    },
    247: {
        atk: function(p) { return 2; },
        type: "condition",
    },
    248: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.75 : 1; },
    },
    249: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.75 : 1; },
    },
    250: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.75 : 1; },
    },
    251: {
        affinity: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 1.75 : 1; },
    },
    252:{
        affinity: function(p) { return (p.unit.type == "PSY" || p.unit.type == "INT") ? 2.25 : 1; },
    },
    253:{
        affinity: function(p) { return (p.unit.type == "PSY" || p.unit.type == "INT") ? 2.25 : 1; },
    },
    254:{
        affinity: function(p) { return (p.unit.type == "PSY" || p.unit.type == "INT") ? 2.25 : 1; },
    },
    255:{
        affinity: function(p) { return (p.unit.type == "PSY" || p.unit.type == "INT") ? 2.25 : 1; },
    },
    256: {
        orb: function(p) { return (p.unit.class.has('Fighter') || p.unit.class.has('Free Spirit')) ? 2 : 1; }
    },
    257: {
        orb: function(p) { return (p.unit.class.has('Fighter') || p.unit.class.has('Free Spirit')) ? 2 : 1; }
    },
    258: {
        orb: function(p) { return (p.unit.class.has('Fighter') || p.unit.class.has('Free Spirit')) ? 2 : 1; }
    },
    259: {
        orb: function(p) { return (p.unit.class.has('Fighter') || p.unit.class.has('Free Spirit')) ? 2 : 1; }
    },
    260: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.5 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.5 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    261: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.5 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.5 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    262: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.5 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.5 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    263: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.5 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.5 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    264: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.5 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.5 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    265: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.5 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.5 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    266: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.5 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.5 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    267: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        onActivation: function(p) {
            var n = (p.percHP > 99  ? 2.5 : 2);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'HP ' + (n == 2.5 ? 'above' : 'below') + ' 99%, using the ' + n + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    268: {
        orb: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Driven")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.type == "STR" || p.captain.type == "PSY") ? 2.75 : 2;
        }
    },
    269: {
        orb: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Driven")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.type == "STR" || p.captain.type == "PSY") ? 2.75 : 2;
        }
    },
    270: {
        orb: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Driven")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.type == "STR" || p.captain.type == "PSY") ? 2.75 : 2;
        }
    },
    271: {
        orb: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Driven")) ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = (p.captain.type == "STR" || p.captain.type == "PSY") ? 2.75 : 2;
        }
    },
    272: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "INT" ? p.cached.multiplier != 1 ? 2.25 : 1 : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "INT" ? p.cached.multiplier != 0 ? 2.5 : 1 : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    273: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier != 1 ? 2.25 : 1 : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier != 0 ? 2.5 : 1 : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    274: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "INT" ? p.cached.multiplier != 1 ? 2.25 : 1 : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "INT" ? p.cached.multiplier != 0 ? 2.5 : 1 : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    275: {
        atk: function(p) { return p.unit.type == "STR" || p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier != 1 ? 2.25 : 1 : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier != 0 ? 2.5 : 1 : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["ATK", "Orb", "ATK and Orb"][n] + ' boost. To ' + ["ATK", "Orb", "ATK and Orb"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    276: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; }
    },
    277: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; }
    },
    278: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; }
    },
    279: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; }
    },
    280: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; }
    },
    281: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; }
    },
    282: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; }
    },
    283: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; },
        type: "class",
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Cerebral") ? 2 : 1; }
    },
    284: {
        chainAddition: function(p) { return 1.2; }
    },
    285: {
        chainAddition: function(p) { return 1.2; }
    },
    286: {
        chainAddition: function(p) { return 1.2; }
    },
    287: {
        chainAddition: function(p) { return 1.2; }
    },
    288: {
        chainAddition: function(p) { return 1.2; }
    },
    289: {
        chainAddition: function(p) { return 1.2; }
    },
    290: {
        chainAddition: function(p) { return 1.2; }
    },
    291: {
        chainAddition: function(p) { return 1.2; }
    },
    292: {
        affinity: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Cerebral") ? 2.25 : 1; },
    },
    293: {
        affinity: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Cerebral") ? 2.25 : 1; },
    },
    294: {
        affinity: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Cerebral") ? 2.25 : 1; },
    },
    295: {
        affinity: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Cerebral") ? 2.25 : 1; },
    },
    296: {
        affinity: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Cerebral") ? 2.25 : 1; },
    },
    297: {
        affinity: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Cerebral") ? 2.25 : 1; },
    },
    298: {
        affinity: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Cerebral") ? 2.25 : 1; },
    },
    299: {
        affinity: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Cerebral") ? 2.25 : 1; },
    },
    300: {
        orb: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.5 : 1; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2.5) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 35 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            var levels = [2.5, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Activating Chain Boundary", "Not Activating Chain Boundary"][n] + ' boost. To ' + ["Enable the Chain Boundary", "Disable the Chain Boundary"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    301: {
        orb: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? 2.5 : 1; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var levels = [3, 3.25, 3.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Chain Lock. To switch to the ' + levels[(n + 1) % levels.length] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    302: {
        orb: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.5 : 1; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            if (p.cached.multiplier == 2.5) return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 35 : 1;
            else return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? Infinity : 1;
        },
        onActivation: function(p) {
            var levels = [2.5, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Activating Chain Boundary", "Not Activating Chain Boundary"][n] + ' boost. To ' + ["Enable the Chain Boundary", "Disable the Chain Boundary"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    303: {
        orb: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Powerhouse") ? 2.5 : 1; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier : 1;
        },
        onActivation: function(p) {
            var levels = [3, 3.25, 3.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Chain Lock. To switch to the ' + levels[(n + 1) % levels.length] + 'x multiplier, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    304: {
        chainAddition: function(p) { return 1; }
    },
    305: {
        chainAddition: function(p) { return 1; }
    },
    306: {
        chainAddition: function(p) { return 1; }
    },
    307: {
        chainAddition: function(p) { return 1; }
    },
    308: {
        chainAddition: function(p) { return 1; }
    },
    309: {
        chainAddition: function(p) { return 1; }
    },
    310: {
        atk: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Driven") ? 2.5 : 1; },
        type: "class"
    },
    311: {
        atk: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Driven") ? 2.5 : 1; },
        type: "class"
    },
    312: {
        atk: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Driven") ? 2.5 : 1; },
        type: "class"
    },
    313: {
        atk: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Driven") ? 2.5 : 1; },
        type: "class"
    },
    314: {
        atk: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Driven") ? 2.5 : 1; },
        type: "class"
    },
    315: {
        atk: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Driven") ? 2.5 : 1; },
        type: "class"
    },
    316: {
        atk: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Driven") ? 2.5 : 1; },
        type: "class"
    },
    317: {
        atk: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Driven") ? 2.5 : 1; },
        type: "class"
    },
    318: {
    },
    319: {
    },
    320: {
    },
    321: {
    },
    322: {
        atk: function(p) { return [ 1.5, 1.75 ][p.cached.multiplier]; },
        type: "type",
        orb: function(p) { return [ 1.5, 1.75 ][p.cached.multiplier]; },
        delay: function(p) { return 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 0 ? 1 : 0);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['1.5x', '1.75x'][n] + ' boosts. To switch to the ' + ['1.75x', '1.5x'][n] + ' boosts, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    323: {
        atk: function(p) { return [ 1.5, 1.75 ][p.cached.multiplier]; },
        type: "type",
        orb: function(p) { return [ 1.5, 1.75 ][p.cached.multiplier]; },
        delay: function(p) { return 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 0 ? 1 : 0);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['1.5x', '1.75x'][n] + ' boosts. To switch to the ' + ['1.75x', '1.5x'][n] + ' boosts, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    324: {
        atk: function(p) { return [ 1.5, 1.75 ][p.cached.multiplier]; },
        type: "type",
        orb: function(p) { return [ 1.5, 1.75 ][p.cached.multiplier]; },
        delay: function(p) { return 1; },
        onActivation: function(p) {
            var n = (p.cached.multiplier == 0 ? 1 : 0);
            p.cached.multiplier = n;
            p.scope.notify({
                text: 'Using the ' + ['1.5x', '1.75x'][n] + ' boosts. To switch to the ' + ['1.75x', '1.5x'][n] + ' boosts, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    325: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 2.25 : 1; },
    },
    326: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 2.25 : 1; },
    },
    327: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 2.25 : 1; },
    },
    328: {
        orb: function(p) { return (p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK") ? 2.25 : 1; },
    },
    329: {
        orb: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.5 : 1; }
    },
    330: {
        orb: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.5 : 1; }
    },
    331: {
        orb: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.5 : 1; }
    },
    332: {
        orb: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.5 : 1; }
    },
    333: {
        orb: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.5 : 1; }
    },
    334: {
        orb: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.5 : 1; }
    },
    335: {
        orb: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.5 : 1; }
    },
    336: {
        orb: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.5 : 1; }
    },
    337: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" || p.unit.class.has("Striker") ? 2.5 : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" || p.unit.class.has("Striker") ? p.cached.multiplier : 1},
        atkbase: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" || p.unit.class.has("Striker") ? 1000 : 0; },
        onActivation: function(p) {
            var levels = [1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x orb boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    338: {
        orb: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" || p.unit.class.has("Slasher") ? 2.5 : 1},
        atkbase: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" || p.unit.class.has("Slasher") ? 1000 : 0; },
        def: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1, 0];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + [0, 100][n] + '% Defense Reduction. To switch to the ' + [0, 100][(n + 1) % levels.length] + '% Defense Reduction, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    339: {
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" || p.unit.class.has("Striker") ? 2.5 : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" || p.unit.class.has("Striker") ? p.cached.multiplier : 1},
        atkbase: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" || p.unit.class.has("Striker") ? 1000 : 0; },
        onActivation: function(p) {
            var levels = [1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x orb boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    340: {
        orb: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" || p.unit.class.has("Slasher") ? 2.5 : 1},
        atkbase: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" || p.unit.class.has("Slasher") ? 1000 : 0; },
        def: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1, 0];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + [0, 100][n] + '% Defense Reduction. To switch to the ' + [0, 100][(n + 1) % levels.length] + '% Defense Reduction, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    341: {
        mark: function(p) { return 1; },
        status: function(p) { return p.marked ? 2.25 : 1; },
    },
    342: {
        mark: function(p) { return 1; },
        status: function(p) { return p.marked ? 2.25 : 1; },
    },
    343: {
        mark: function(p) { return 1; },
        status: function(p) { return p.marked ? 2.25 : 1; },
    },
    344: {
        mark: function(p) { return 1; },
        status: function(p) { return p.marked ? 2.25 : 1; },
    },
    345: {
        mark: function(p) { return 1; },
        status: function(p) { return p.marked ? 2.25 : 1; },
    },
    346: {
        mark: function(p) { return 1; },
        status: function(p) { return p.marked ? 2.25 : 1; },
    },
    347: {
        mark: function(p) { return 1; },
        status: function(p) { return p.marked ? 2.25 : 1; },
    },
    348: {
        mark: function(p) { return 1; },
        status: function(p) { return p.marked ? 2.25 : 1; },
    },
    349: {
        delay: function(p) { return 2; },
        affinity: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") ? p.cached.multiplier != 1 ? 2.25 : 1 : 1; },
        statusPlus: function(p) { return p.cached.multiplier != 0 ? 0.3 : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Affinity", "Conditional Buff", "Affinity and Conditional Buff"][n] + ' boost. To ' + ["Affinity", "Conditional Buff", "Affinity and Conditional Buff"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    350: {
        delay: function(p) { return 2; },
        affinity: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") ? p.cached.multiplier != 1 ? 2.25 : 1 : 1; },
        statusPlus: function(p) { return p.cached.multiplier != 0 ? 0.3 : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Affinity", "Conditional Buff", "Affinity and Conditional Buff"][n] + ' boost. To ' + ["Affinity", "Conditional Buff", "Affinity and Conditional Buff"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    351: {
        delay: function(p) { return 2; },
        affinity: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") ? p.cached.multiplier != 1 ? 2.25 : 1 : 1; },
        statusPlus: function(p) { return p.cached.multiplier != 0 ? 0.3 : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Affinity", "Conditional Buff", "Affinity and Conditional Buff"][n] + ' boost. To ' + ["Affinity", "Conditional Buff", "Affinity and Conditional Buff"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    352: {
        delay: function(p) { return 2; },
        affinity: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") ? p.cached.multiplier != 1 ? 2.25 : 1 : 1; },
        statusPlus: function(p) { return p.cached.multiplier != 0 ? 0.3 : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Affinity", "Conditional Buff", "Affinity and Conditional Buff"][n] + ' boost. To ' + ["Affinity", "Conditional Buff", "Affinity and Conditional Buff"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    353: {
        delay: function(p) { return 2; },
        affinity: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") ? p.cached.multiplier != 1 ? 2.25 : 1 : 1; },
        statusPlus: function(p) { return p.cached.multiplier != 0 ? 0.3 : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Affinity", "Conditional Buff", "Affinity and Conditional Buff"][n] + ' boost. To ' + ["Affinity", "Conditional Buff", "Affinity and Conditional Buff"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    354: {
        delay: function(p) { return 2; },
        affinity: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") ? p.cached.multiplier != 1 ? 2.25 : 1 : 1; },
        statusPlus: function(p) { return p.cached.multiplier != 0 ? 0.3 : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Affinity", "Conditional Buff", "Affinity and Conditional Buff"][n] + ' boost. To ' + ["Affinity", "Conditional Buff", "Affinity and Conditional Buff"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    355: {
        delay: function(p) { return 2; },
        affinity: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") ? p.cached.multiplier != 1 ? 2.25 : 1 : 1; },
        statusPlus: function(p) { return p.cached.multiplier != 0 ? 0.3 : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Affinity", "Conditional Buff", "Affinity and Conditional Buff"][n] + ' boost. To ' + ["Affinity", "Conditional Buff", "Affinity and Conditional Buff"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    356: {
        delay: function(p) { return 2; },
        affinity: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Cerebral") ? p.cached.multiplier != 1 ? 2.25 : 1 : 1; },
        statusPlus: function(p) { return p.cached.multiplier != 0 ? 0.3 : 0; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: '' + ["Affinity", "Conditional Buff", "Affinity and Conditional Buff"][n] + ' boost. To ' + ["Affinity", "Conditional Buff", "Affinity and Conditional Buff"][(n + 1) % levels.length] + ' boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    357: {
        atkbase: function(p) { return 1000; },
    },
    358: {
        atkbase: function(p) { return 1000; },
    },
    359: {
        atkbase: function(p) { return 1000; },
    },
    360: {
        atkbase: function(p) { return 1000; },
    },
    361: {
        atkbase: function(p) { return 1000; },
    },
    362: {
        atkbase: function(p) { return 1000; },
    },
    363: {
        atkbase: function(p) { return 1000; },
    },
    364: {
        atkbase: function(p) { return 1000; },
    },
    365: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.Powerhouse >= 5 ? 2.5 : 2.25;
        }
    },
    366: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.Powerhouse >= 5 ? 2.5 : 2.25;
        }
    },
    367: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.Powerhouse >= 5 ? 2.5 : 2.25;
        }
    },
    368: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.Powerhouse >= 5 ? 2.5 : 2.25;
        }
    },
    369: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.Powerhouse >= 5 ? 2.5 : 2.25;
        }
    },
    370: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.Powerhouse >= 5 ? 2.5 : 2.25;
        }
    },
    371: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.Powerhouse >= 5 ? 2.5 : 2.25;
        }
    },
    372: {
        affinity: function(p) { return p.unit.type == "STR" || p.unit.type == "QCK" || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            p.cached.multiplier = p.classCount.Powerhouse >= 5 ? 2.5 : 2.25;
        }
    },
    373: {
        affinityPlus: function(p) { return 0.5; },
        atkCeil: function(p) { return 3; },
    },
    374: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? 2 : 1; },
        orbCeil: function(p) { return 3; },
        turnedOn: false,
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        },
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
        },
    },
    375: {
        affinityPlus: function(p) { return 0.5; },
        atkCeil: function(p) { return 3; },
    },
    376: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? 2 : 1; },
        orbCeil: function(p) { return 3; },
        turnedOn: false,
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        },
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
        },
    },
    377: {
        affinityPlus: function(p) { return 0.5; },
        atkCeil: function(p) { return 3; },
    },
    378: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? 2 : 1; },
        orbCeil: function(p) { return 3; },
        turnedOn: false,
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        },
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
        },
    },
    379: {
        affinityPlus: function(p) { return 0.5; },
        atkCeil: function(p) { return 3; },
    },
    380: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? 2 : 1; },
        orbCeil: function(p) { return 3; },
        turnedOn: false,
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        },
        onActivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
        },
    },
    381: {
        atk: function(p) { return 2; },
        type: "type",
        affinity: function(p) { return 2; },
        orb: function(p) { return 2},
        chainAddition: function(p) { return 0.8; }
    },
    382: {
        atk: function(p) { return 2; },
        type: "type",
        affinity: function(p) { return 2; },
        orb: function(p) { return 2},
        chainAddition: function(p) { return 0.8; }
    },
    383: {
        atk: function(p) { return 2; },
        type: "type",
        affinity: function(p) { return 2; },
        orb: function(p) { return 2},
        chainAddition: function(p) { return 0.8; }
    },
    384: {
        atk: function(p) { return 2; },
        type: "type",
        affinity: function(p) { return 2; },
        orb: function(p) { return 2},
        chainAddition: function(p) { return 0.8; }
    },
    385: {
        atk: function(p) { return 2; },
        type: "type",
        affinity: function(p) { return 2; },
        orb: function(p) { return 2},
        chainAddition: function(p) { return 0.8; }
    },
    386: {
        atk: function(p) { return 2; },
        type: "type",
        affinity: function(p) { return 2; },
        orb: function(p) { return 2},
        chainAddition: function(p) { return 0.8; }
    },
    387: {
        atk: function(p) { return 2; },
        type: "type",
        affinity: function(p) { return 2; },
        orb: function(p) { return 2},
        chainAddition: function(p) { return 0.8; }
    },
    388: {
        atk: function(p) { return 2; },
        type: "type",
        affinity: function(p) { return 2; },
        orb: function(p) { return 2},
        chainAddition: function(p) { return 0.8; }
    },
    389: {
        def: function(p) { return 0; },
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2, 2.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ORB boost. To switch to the ' + levels[(n + 1) % levels.length] + ' ORB boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    390: {
        def: function(p) { return 0; },
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2, 2.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ORB boost. To switch to the ' + levels[(n + 1) % levels.length] + ' ORB boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    391: {
        def: function(p) { return 0; },
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2, 2.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ORB boost. To switch to the ' + levels[(n + 1) % levels.length] + ' ORB boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    392: {
        def: function(p) { return 0; },
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2, 2.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ORB boost. To switch to the ' + levels[(n + 1) % levels.length] + ' ORB boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    393: {
        def: function(p) { return 0; },
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2, 2.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ORB boost. To switch to the ' + levels[(n + 1) % levels.length] + ' ORB boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    394: {
        def: function(p) { return 0; },
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2, 2.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ORB boost. To switch to the ' + levels[(n + 1) % levels.length] + ' ORB boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    395: {
        def: function(p) { return 0; },
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2, 2.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ORB boost. To switch to the ' + levels[(n + 1) % levels.length] + ' ORB boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    396: {
        def: function(p) { return 0; },
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 1; },
        onActivation: function(p) {
            var levels = [2, 2.5];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x ORB boost. To switch to the ' + levels[(n + 1) % levels.length] + ' ORB boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    397: {
        orb: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit")) ? 2.75 : 1; },
        atkbase: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 500 : 0; },
    },
    398: {
        orb: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit")) ? 2.75 : 1; },
        atkbase: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 500 : 0; },
    },
    399: {
        orb: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit")) ? 2.75 : 1; },
        atkbase: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 500 : 0; },
    },
    400: {
        orb: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit")) ? 2.75 : 1; },
        atkbase: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 500 : 0; },
    },
    401: {
        orb: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit")) ? 2.75 : 1; },
        atkbase: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 500 : 0; },
    },
    402: {
        orb: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit")) ? 2.75 : 1; },
        atkbase: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 500 : 0; },
    },
    403: {
        orb: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit")) ? 2.75 : 1; },
        atkbase: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 500 : 0; },
    },
    404: {
        orb: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit")) ? 2.75 : 1; },
        atkbase: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Free Spirit") ? 500 : 0; },
    },
    405: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Shooter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? 2.5 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven") ? 2.5 : 1; },
    },
    406: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Shooter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? 2.5 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven") ? 2.5 : 1; },
    },
    407: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Shooter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? 2.5 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven") ? 2.5 : 1; },
    },
    408: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Shooter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? 2.5 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven") ? 2.5 : 1; },
    },
    409: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Shooter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? 2.5 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven") ? 2.5 : 1; },
    },
    410: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Shooter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? 2.5 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven") ? 2.5 : 1; },
    },
    411: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Shooter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? 2.5 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven") ? 2.5 : 1; },
    },
    412: {
        atk: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Shooter") || p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? 2.5 : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Free Spirit") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse") || p.unit.class.has("Driven") ? 2.5 : 1; },
    },
    413: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.75 : 1; },
        type: "type",
        status: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1, 1.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Status boost. To switch to the ' + levels[(n + 1) % levels.length] + ' Status boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    414: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.75 : 1; },
        type: "type",
        status: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1, 1.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Status boost. To switch to the ' + levels[(n + 1) % levels.length] + ' Status boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    415: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.75 : 1; },
        type: "type",
        status: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1, 1.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Status boost. To switch to the ' + levels[(n + 1) % levels.length] + ' Status boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    416: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.75 : 1; },
        type: "type",
        status: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1, 1.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Status boost. To switch to the ' + levels[(n + 1) % levels.length] + ' Status boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    417: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.75 : 1; },
        type: "type",
        status: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1, 1.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Status boost. To switch to the ' + levels[(n + 1) % levels.length] + ' Status boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    418: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.75 : 1; },
        type: "type",
        status: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1, 1.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Status boost. To switch to the ' + levels[(n + 1) % levels.length] + ' Status boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    419: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.75 : 1; },
        type: "type",
        status: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1, 1.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Status boost. To switch to the ' + levels[(n + 1) % levels.length] + ' Status boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    420: {
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 2.75 : 1; },
        type: "type",
        status: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            var levels = [1, 1.75];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Status boost. To switch to the ' + levels[(n + 1) % levels.length] + ' Status boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    421: {
        delay: function(p) { return 1; },
        status: function(p) { return p.delayed > 0 ? 2.25 : 1; },
        atkbase: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 1250 : 1; },
        ignoresImmunities: function(p) { return (p.captain.class.has("Shooter") || p.captain.class.has("Free Spirit")) ? ['delay'] : []; },
    },
    422: {
        delay: function(p) { return 1; },
        status: function(p) { return p.delayed > 0 ? 2.25 : 1; },
        atkbase: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 1250 : 1; },
        ignoresImmunities: function(p) { return (p.captain.class.has("Shooter") || p.captain.class.has("Free Spirit")) ? ['delay'] : []; },
    },
    423: {
        delay: function(p) { return 1; },
        status: function(p) { return p.delayed > 0 ? 2.25 : 1; },
        atkbase: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 1250 : 1; },
        ignoresImmunities: function(p) { return (p.captain.class.has("Shooter") || p.captain.class.has("Free Spirit")) ? ['delay'] : []; },
    },
    424: {
        delay: function(p) { return 1; },
        status: function(p) { return p.delayed > 0 ? 2.25 : 1; },
        atkbase: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 1250 : 1; },
        ignoresImmunities: function(p) { return (p.captain.class.has("Shooter") || p.captain.class.has("Free Spirit")) ? ['delay'] : []; },
    },
    425: {
        delay: function(p) { return 1; },
        status: function(p) { return p.delayed > 0 ? 2.25 : 1; },
        atkbase: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 1250 : 1; },
        ignoresImmunities: function(p) { return (p.captain.class.has("Shooter") || p.captain.class.has("Free Spirit")) ? ['delay'] : []; },
    },
    426: {
        delay: function(p) { return 1; },
        status: function(p) { return p.delayed > 0 ? 2.25 : 1; },
        atkbase: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 1250 : 1; },
        ignoresImmunities: function(p) { return (p.captain.class.has("Shooter") || p.captain.class.has("Free Spirit")) ? ['delay'] : []; },
    },
    427: {
        delay: function(p) { return 1; },
        status: function(p) { return p.delayed > 0 ? 2.25 : 1; },
        atkbase: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 1250 : 1; },
        ignoresImmunities: function(p) { return (p.captain.class.has("Shooter") || p.captain.class.has("Free Spirit")) ? ['delay'] : []; },
    },
    428: {
        delay: function(p) { return 1; },
        status: function(p) { return p.delayed > 0 ? 2.25 : 1; },
        atkbase: function(p) { return p.unit.class.has("Shooter") || p.unit.class.has("Free Spirit") ? 1250 : 1; },
        ignoresImmunities: function(p) { return (p.captain.class.has("Shooter") || p.captain.class.has("Free Spirit")) ? ['delay'] : []; },
    },
    429: {
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? 3.25 : 1; },
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? 3 : 1; },
        type: "type",
    },
    430: {
        turnedOn: false,
        dmgredatk: function(p) { return 1+(p.dmgreductionCounter/100); },
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Free Spirit") ? [3, 1, 3][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Free Spirit") ? [1, 2.75, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "Orb boost", "Both Boosts"][levels[n]] + '. To switch to ' + ["ATK boost", "Orb boost", "Both Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        }
    },
    431: {
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? 3.25 : 1; },
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Driven") ? 3 : 1; },
        type: "type",
    },
    432: {
        turnedOn: false,
        dmgredatk: function(p) { return 1+(p.dmgreductionCounter/100); },
        atk: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Free Spirit") ? [3, 1, 3][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.class.has("Striker") || p.unit.class.has("Free Spirit") ? [1, 2.75, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = true;
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "Orb boost", "Both Boosts"][levels[n]] + '. To switch to ' + ["ATK boost", "Orb boost", "Both Boosts"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            window.specials[p.team[p.sourceSlot].unit.number+1].turnedOn = false;
        }
    },
    433: {
        orb: function(p) { return p.cached.multiplier; },
        atkPlus: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            var levels = [2.5, 2.75, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.sourceSlot > 1 ? 0.25 : 0;
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Orb boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    434: {
        orb: function(p) { return p.cached.multiplier; },
        atkPlus: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            var levels = [2.5, 2.75, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.sourceSlot > 1 ? 0.25 : 0;
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Orb boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    435: {
        orb: function(p) { return p.cached.multiplier; },
        atkPlus: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            var levels = [2.5, 2.75, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.sourceSlot > 1 ? 0.25 : 0;
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Orb boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    436: {
        orb: function(p) { return p.cached.multiplier; },
        atkPlus: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            var levels = [2.5, 2.75, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.sourceSlot > 1 ? 0.25 : 0;
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Orb boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    437: {
        orb: function(p) { return p.cached.multiplier; },
        atkPlus: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            var levels = [2.5, 2.75, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.sourceSlot > 1 ? 0.25 : 0;
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Orb boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    438: {
        orb: function(p) { return p.cached.multiplier; },
        atkPlus: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            var levels = [2.5, 2.75, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.sourceSlot > 1 ? 0.25 : 0;
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Orb boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    439: {
        orb: function(p) { return p.cached.multiplier; },
        atkPlus: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            var levels = [2.5, 2.75, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.sourceSlot > 1 ? 0.25 : 0;
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Orb boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    440: {
        orb: function(p) { return p.cached.multiplier; },
        atkPlus: function(p) { return p.cached.multiplier2; },
        onActivation: function(p) {
            var levels = [2.5, 2.75, 3];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.sourceSlot > 1 ? 0.25 : 0;
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x Orb boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x Orb boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    441: {
        atk: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) ? [[ 2.25, 2.25, 2.25, 1, 1, 1, 1, 1, 1, 1 ],[ 2.25, 2.25, 2.25, 1, 1, 2.25, 2.25, 2.25, 1, 1 ]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        type: "class",
        affinity: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) ? [[ 2.25, 2.25, 1, 2.25, 1, 1, 1, 1, 1, 1 ],[ 2.25, 2.25, 1, 2.25, 1, 2.25, 2.25, 1, 2.25, 1 ]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        orb: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) ? [[ 1, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5 ],[ 1, 2.5, 2.5, 2.5, 2.5, 1, 2.5, 2.5, 2.5, 2.5 ]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        status: function(p) { return p.defenseDown ? [[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],[ 1, 1, 1, 1, 1, 2, 2, 2, 2, 2 ]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [[0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]][CrunchUtils.llimitUnlock(p, "specials")];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = n;
            var effecttext = [['ATK and Affinity Boost', 'ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost'], ['ATK and Affinity Boost', 'ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost', 'Status, ATK and Affinity Boost', 'Status, ATK, Affinity and Orb Boost', 'Status, ATK and Orb Boost', 'Status, Affinity and Orb Boost', 'Status and Orb Boost']];
            p.scope.notify({
                text: 'Using the ' + effecttext[n] + '. To switch to the ' + effecttext[n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    442: {
        atk: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) ? [[ 2.25, 2.25, 2.25, 1, 1, 1, 1, 1, 1, 1 ],[ 2.25, 2.25, 2.25, 1, 1, 2.25, 2.25, 2.25, 1, 1 ]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        type: "class",
        affinity: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) ? [[ 2.25, 2.25, 1, 2.25, 1, 1, 1, 1, 1, 1 ],[ 2.25, 2.25, 1, 2.25, 1, 2.25, 2.25, 1, 2.25, 1 ]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        orb: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) ? [[ 1, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5 ],[ 1, 2.5, 2.5, 2.5, 2.5, 1, 2.5, 2.5, 2.5, 2.5 ]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        status: function(p) { return p.defenseDown ? [[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],[ 1, 1, 1, 1, 1, 2, 2, 2, 2, 2 ]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [[0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]][CrunchUtils.llimitUnlock(p, "specials")];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = n;
            var effecttext = [['ATK and Affinity Boost', 'ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost'], ['ATK and Affinity Boost', 'ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost', 'Status, ATK and Affinity Boost', 'Status, ATK, Affinity and Orb Boost', 'Status, ATK and Orb Boost', 'Status, Affinity and Orb Boost', 'Status and Orb Boost']];
            p.scope.notify({
                text: 'Using the ' + effecttext[n] + '. To switch to the ' + effecttext[n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    443: {
        atk: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) ? [[ 2.25, 2.25, 2.25, 1, 1, 1, 1, 1, 1, 1 ],[ 2.25, 2.25, 2.25, 1, 1, 2.25, 2.25, 2.25, 1, 1 ]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        type: "class",
        affinity: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) ? [[ 2.25, 2.25, 1, 2.25, 1, 1, 1, 1, 1, 1 ],[ 2.25, 2.25, 1, 2.25, 1, 2.25, 2.25, 1, 2.25, 1 ]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        orb: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) ? [[ 1, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5 ],[ 1, 2.5, 2.5, 2.5, 2.5, 1, 2.5, 2.5, 2.5, 2.5 ]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        status: function(p) { return p.defenseDown ? [[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],[ 1, 1, 1, 1, 1, 2, 2, 2, 2, 2 ]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [[0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]][CrunchUtils.llimitUnlock(p, "specials")];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = n;
            var effecttext = [['ATK and Affinity Boost', 'ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost'], ['ATK and Affinity Boost', 'ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost', 'Status, ATK and Affinity Boost', 'Status, ATK, Affinity and Orb Boost', 'Status, ATK and Orb Boost', 'Status, Affinity and Orb Boost', 'Status and Orb Boost']];
            p.scope.notify({
                text: 'Using the ' + effecttext[n] + '. To switch to the ' + effecttext[n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    444: {
        atk: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) ? [[ 2.25, 2.25, 2.25, 1, 1, 1, 1, 1, 1, 1 ],[ 2.25, 2.25, 2.25, 1, 1, 2.25, 2.25, 2.25, 1, 1 ]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        type: "class",
        affinity: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) ? [[ 2.25, 2.25, 1, 2.25, 1, 1, 1, 1, 1, 1 ],[ 2.25, 2.25, 1, 2.25, 1, 2.25, 2.25, 1, 2.25, 1 ]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        orb: function(p) { return (p.unit.class.has("Slasher") || p.unit.class.has("Striker") || p.unit.class.has("Cerebral") || p.unit.class.has("Powerhouse")) ? [[ 1, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5 ],[ 1, 2.5, 2.5, 2.5, 2.5, 1, 2.5, 2.5, 2.5, 2.5 ]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        status: function(p) { return p.defenseDown ? [[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],[ 1, 1, 1, 1, 1, 2, 2, 2, 2, 2 ]][CrunchUtils.llimitUnlock(p, "specials")][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [[0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]][CrunchUtils.llimitUnlock(p, "specials")];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = n;
            var effecttext = [['ATK and Affinity Boost', 'ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost'], ['ATK and Affinity Boost', 'ATK, Affinity and Orb Boost', 'ATK and Orb Boost', 'Affinity and Orb Boost', 'Orb Boost', 'Status, ATK and Affinity Boost', 'Status, ATK, Affinity and Orb Boost', 'Status, ATK and Orb Boost', 'Status, Affinity and Orb Boost', 'Status and Orb Boost']];
            p.scope.notify({
                text: 'Using the ' + effecttext[n] + '. To switch to the ' + effecttext[n] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    445: {
        affinity: function(p) { return p.cached.multiplier2; },
        atkbase: function(p) { return p.cached.multiplier1; },
        chain: function(p) { return 3.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.75 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier1 = (p.captain.type == "QCK") ? 1000 : 0;
            p.cached.multiplier2 = (p.captain.type == "PSY") ? 2.25 : 1;
        }
    },
    446: {
        affinity: function(p) { return p.cached.multiplier2; },
        atkbase: function(p) { return p.cached.multiplier1; },
        chain: function(p) { return 3.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.75 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier1 = (p.captain.type == "QCK") ? 1000 : 0;
            p.cached.multiplier2 = (p.captain.type == "PSY") ? 2.25 : 1;
        }
    },
    447: {
        affinity: function(p) { return p.cached.multiplier2; },
        atkbase: function(p) { return p.cached.multiplier1; },
        chain: function(p) { return 3.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.75 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier1 = (p.captain.type == "QCK") ? 1000 : 0;
            p.cached.multiplier2 = (p.captain.type == "PSY") ? 2.25 : 1;
        }
    },
    448: {
        affinity: function(p) { return p.cached.multiplier2; },
        atkbase: function(p) { return p.cached.multiplier1; },
        chain: function(p) { return 3.75; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 3.75 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier1 = (p.captain.type == "QCK") ? 1000 : 0;
            p.cached.multiplier2 = (p.captain.type == "PSY") ? 2.25 : 1;
        }
    },
    449: {
        atk: function(p) { return p.unit.class.has("Driven") ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        type: "class",
        orbPlus: function(p) { return [0, 0.25, 0.25][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.class.has("Driven") ? [1, p.cached.multiplier1][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = p.damageCounter >= 30000 ? 2.25 : 1;
            p.scope.notify({
                text: 'Using the ' + ["ATK Boost", "Orb Buff", "ATK Boost and Orb Buff"][levels[n]] + '. To switch to ' + ["ATK Boost", "Orb Buff", "ATK Boost and Orb Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    450: {
        atk: function(p) { return p.unit.class.has("Driven") ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        type: "class",
        orbPlus: function(p) { return [0, 0.25, 0.25][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.class.has("Driven") ? [1, p.cached.multiplier1][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = p.damageCounter >= 30000 ? 2.25 : 1;
            p.scope.notify({
                text: 'Using the ' + ["ATK Boost", "Orb Buff", "ATK Boost and Orb Buff"][levels[n]] + '. To switch to ' + ["ATK Boost", "Orb Buff", "ATK Boost and Orb Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    451: {
        atk: function(p) { return p.unit.class.has("Driven") ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        type: "class",
        orbPlus: function(p) { return [0, 0.25, 0.25][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.class.has("Driven") ? [1, p.cached.multiplier1][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = p.damageCounter >= 30000 ? 2.25 : 1;
            p.scope.notify({
                text: 'Using the ' + ["ATK Boost", "Orb Buff", "ATK Boost and Orb Buff"][levels[n]] + '. To switch to ' + ["ATK Boost", "Orb Buff", "ATK Boost and Orb Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    452: {
        atk: function(p) { return p.unit.class.has("Driven") ? [2.25, 1, 2.25][p.cached.multiplier] : 1; },
        type: "class",
        orbPlus: function(p) { return [0, 0.25, 0.25][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.class.has("Driven") ? [1, p.cached.multiplier1][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = p.damageCounter >= 30000 ? 2.25 : 1;
            p.scope.notify({
                text: 'Using the ' + ["ATK Boost", "Orb Buff", "ATK Boost and Orb Buff"][levels[n]] + '. To switch to ' + ["ATK Boost", "Orb Buff", "ATK Boost and Orb Buff"][levels[(n + 1) % levels.length]] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    453: {
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? [3, 3.25][p.cached.multiplier] : 1; },
        increaseDamageTaken: function(p) { return [1.75, 2][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return [[], ['increaseDamageTaken']][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Singular Form", "Double Form"][levels[n]] + ' special. To switch to the Stage' + ["Singular Form", "Double Form"][levels[(n + 1) % levels.length]] + ' special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    454: {
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? [3, 3.25][p.cached.multiplier] : 1; },
        increaseDamageTaken: function(p) { return [1.75, 2][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return [[], ['increaseDamageTaken']][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Singular Form", "Double Form"][levels[n]] + ' special. To switch to the Stage' + ["Singular Form", "Double Form"][levels[(n + 1) % levels.length]] + ' special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    455: {
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? [3, 3.25][p.cached.multiplier] : 1; },
        increaseDamageTaken: function(p) { return [1.75, 2][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return [[], ['increaseDamageTaken']][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Singular Form", "Double Form"][levels[n]] + ' special. To switch to the Stage' + ["Singular Form", "Double Form"][levels[(n + 1) % levels.length]] + ' special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    456: {
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? [3, 3.25][p.cached.multiplier] : 1; },
        increaseDamageTaken: function(p) { return [1.75, 2][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return [[], ['increaseDamageTaken']][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Singular Form", "Double Form"][levels[n]] + ' special. To switch to the Stage' + ["Singular Form", "Double Form"][levels[(n + 1) % levels.length]] + ' special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    457: {
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? [3, 3.25][p.cached.multiplier] : 1; },
        increaseDamageTaken: function(p) { return [1.75, 2][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return [[], ['increaseDamageTaken']][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Singular Form", "Double Form"][levels[n]] + ' special. To switch to the Stage' + ["Singular Form", "Double Form"][levels[(n + 1) % levels.length]] + ' special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    458: {
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? [3, 3.25][p.cached.multiplier] : 1; },
        increaseDamageTaken: function(p) { return [1.75, 2][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return [[], ['increaseDamageTaken']][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Singular Form", "Double Form"][levels[n]] + ' special. To switch to the Stage' + ["Singular Form", "Double Form"][levels[(n + 1) % levels.length]] + ' special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    459: {
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? [3, 3.25][p.cached.multiplier] : 1; },
        increaseDamageTaken: function(p) { return [1.75, 2][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return [[], ['increaseDamageTaken']][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Singular Form", "Double Form"][levels[n]] + ' special. To switch to the Stage' + ["Singular Form", "Double Form"][levels[(n + 1) % levels.length]] + ' special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    460: {
        orb: function(p) { return p.unit.type == "STR" || p.unit.type == "DEX" || p.unit.type == "QCK" ? [3, 3.25][p.cached.multiplier] : 1; },
        increaseDamageTaken: function(p) { return [1.75, 2][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return [[], ['increaseDamageTaken']][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Singular Form", "Double Form"][levels[n]] + ' special. To switch to the Stage' + ["Singular Form", "Double Form"][levels[(n + 1) % levels.length]] + ' special, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    461: {
        affinity: function(p) { return p.unit.class.has("Slasher") ? 2.75 : 1; },
    },
    462: {
        affinity: function(p) { return p.unit.class.has("Slasher") ? 2.75 : 1; },
    },
    463: {
        affinity: function(p) { return p.unit.class.has("Slasher") ? 2.75 : 1; },
    },
    464: {
        affinity: function(p) { return p.unit.class.has("Slasher") ? 2.75 : 1; },
    },
    465: {
        affinity: function(p) { return p.unit.class.has("Slasher") ? 2.75 : 1; },
    },
    466: {
        affinity: function(p) { return p.unit.class.has("Slasher") ? 2.75 : 1; },
    },
    467: {
        affinity: function(p) { return p.unit.class.has("Slasher") ? 2.75 : 1; },
    },
    468: {
        affinity: function(p) { return p.unit.class.has("Slasher") ? 2.75 : 1; },
    },
    469: {
        atkbase: function(p) { return p.cached.multiplier; },
        chain: function(p) { return p.cached.multiplier1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier1 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = Math.min(2000, Math.max(1000, Math.floor(p.percHP*p.maxHP/10000)));
            p.cached.multiplier1 = Math.min([4, 4.5][CrunchUtils.llimitUnlock(p, "specials")], 3.5 + (Math.floor(p.turnCounter/5) * 0.25));
        },
    },
    470: {
        atkbase: function(p) { return p.cached.multiplier; },
        chain: function(p) { return p.cached.multiplier1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier1 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = Math.min(2000, Math.max(1000, Math.floor(p.percHP*p.maxHP/10000)));
            p.cached.multiplier1 = Math.min([4, 4.5][CrunchUtils.llimitUnlock(p, "specials")], 3.5 + (Math.floor(p.turnCounter/5) * 0.25));
        },
    },
    471: {
        atkbase: function(p) { return p.cached.multiplier; },
        chain: function(p) { return p.cached.multiplier1; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? p.cached.multiplier1 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = Math.min(2000, Math.max(1000, Math.floor(p.percHP*p.maxHP/10000)));
            p.cached.multiplier1 = Math.min([4, 4.5][CrunchUtils.llimitUnlock(p, "specials")], 3.5 + (Math.floor(p.turnCounter/5) * 0.25));
        },
    },
    474: {
        chain: function(p) { return [2.75, 1, 2.75][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [35, Infinity, 35][p.cached.multiplier] : 1;
        },
        tapTiming: function(p) { return [{ Good: 0, Great: 0, Perfect: 0 }, p.cached.multiplier1, p.cached.multiplier1][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = p.percHP >= 50 ? { Good: 0.2, Great: 0.3, Perfect: 0.3 } : { Good: 0, Great: 0, Perfect: 0 };
            p.scope.notify({
                text: 'Using the ' + ["Chain Boundary", "Tap Bonus", "Both Effects"][n] + '. To switch to ' + ["Chain Boundary", "Tap Bonus", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    473: {
        orb: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Powerhouse") ? 2.5 : 1; },
        atkbase: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 0; },
        onActivation: function(p) {
            p.cached.multiplier = p.percHP >= 51 ? 1000 : p.percHP >= 21 ? 1500 : 1750;
        },
    },
    474: {
        chain: function(p) { return [2.75, 1, 2.75][p.cached.multiplier]; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? [35, Infinity, 35][p.cached.multiplier] : 1;
        },
        tapTiming: function(p) { return [{ Good: 0, Great: 0, Perfect: 0 }, p.cached.multiplier1, p.cached.multiplier1][p.cached.multiplier]; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = p.percHP >= 50 ? { Good: 0.2, Great: 0.3, Perfect: 0.3 } : { Good: 0, Great: 0, Perfect: 0 };
            p.scope.notify({
                text: 'Using the ' + ["Chain Boundary", "Tap Bonus", "Both Effects"][n] + '. To switch to ' + ["Chain Boundary", "Tap Bonus", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    475: {
        orb: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Powerhouse") ? 2.5 : 1; },
        atkbase: function(p) { return p.unit.type == "DEX" || p.unit.class.has("Powerhouse") ? p.cached.multiplier : 0; },
        onActivation: function(p) {
            p.cached.multiplier = p.percHP >= 51 ? 1000 : p.percHP >= 21 ? 1500 : 1750;
        },
    },
    476: {
        affinityPlus: function(p) { return [0, 0.75, 0.75][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "PSY" ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity", "Affinity Buff", "Both Effects"][n] + '. To switch to ' + ["Affinity", "Affinity Buff", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    477: {
        affinityPlus: function(p) { return [0, 0.75, 0.75][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "PSY" ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity", "Affinity Buff", "Both Effects"][n] + '. To switch to ' + ["Affinity", "Affinity Buff", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    478: {
        affinityPlus: function(p) { return [0, 0.75, 0.75][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "PSY" ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity", "Affinity Buff", "Both Effects"][n] + '. To switch to ' + ["Affinity", "Affinity Buff", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    479: {
        affinityPlus: function(p) { return [0, 0.75, 0.75][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "PSY" ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity", "Affinity Buff", "Both Effects"][n] + '. To switch to ' + ["Affinity", "Affinity Buff", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    480: {
        affinityPlus: function(p) { return [0, 0.75, 0.75][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "PSY" ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity", "Affinity Buff", "Both Effects"][n] + '. To switch to ' + ["Affinity", "Affinity Buff", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    481: {
        affinityPlus: function(p) { return [0, 0.75, 0.75][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "PSY" ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity", "Affinity Buff", "Both Effects"][n] + '. To switch to ' + ["Affinity", "Affinity Buff", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    482: {
        affinityPlus: function(p) { return [0, 0.75, 0.75][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "PSY" ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity", "Affinity Buff", "Both Effects"][n] + '. To switch to ' + ["Affinity", "Affinity Buff", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    483: {
        affinityPlus: function(p) { return [0, 0.75, 0.75][p.cached.multiplier]; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "PSY" ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Affinity", "Affinity Buff", "Both Effects"][n] + '. To switch to ' + ["Affinity", "Affinity Buff", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    484: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? 2.75 : 1; },
        type: "type",
    },
    485: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? 2.75 : 1; },
        type: "type",
    },
    486: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? 2.75 : 1; },
        type: "type",
    },
    487: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? 2.75 : 1; },
        type: "type",
    },
    488: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? 2.75 : 1; },
        type: "type",
    },
    489: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? 2.75 : 1; },
        type: "type",
    },
    490: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? 2.75 : 1; },
        type: "type",
    },
    491: {
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? 2.75 : 1; },
        type: "type",
    },
    492: {
        burn: function(p) { return 1; },
        orb: function(p) { return [[2.25, 2.5][CrunchUtils.llimitUnlock(p, "specials")], 1, [2.25, 2.5][CrunchUtils.llimitUnlock(p, "specials")]][p.cached.multiplier]; },
        atk: function(p) { return [1, [1, 2.25, 2.25][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")]; },
        type: "type",
        status: function(p) { return p.cached.captain.type == "STR" || p.cached.captain.type == "QCK" ? [1, 2][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "ATK boost", "Both boosts"][n] + '. To switch to ' + ["Orb boost", "ATK boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    493: {
        burn: function(p) { return 1; },
        orb: function(p) { return [[2.25, 2.5][CrunchUtils.llimitUnlock(p, "specials")], 1, [2.25, 2.5][CrunchUtils.llimitUnlock(p, "specials")]][p.cached.multiplier]; },
        atk: function(p) { return [1, [1, 2.25, 2.25][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")]; },
        type: "type",
        status: function(p) { return p.cached.captain.type == "STR" || p.cached.captain.type == "QCK" ? [1, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "ATK boost", "Both boosts"][n] + '. To switch to ' + ["Orb boost", "ATK boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    494: {
        burn: function(p) { return 2; },
        orb: function(p) { return [[2.5, 2.75][CrunchUtils.llimitUnlock(p, "specials")], 1, [2.5, 2.75][CrunchUtils.llimitUnlock(p, "specials")]][p.cached.multiplier]; },
        atk: function(p) { return [1, [1, 2.5, 2.5][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")]; },
        type: "type",
        status: function(p) { return p.cached.captain.type == "STR" || p.cached.captain.type == "QCK" ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "ATK boost", "Both boosts"][n] + '. To switch to ' + ["Orb boost", "ATK boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    495: {
        burn: function(p) { return 2; },
        orb: function(p) { return [[2.5, 2.75][CrunchUtils.llimitUnlock(p, "specials")], 1, [2.5, 2.75][CrunchUtils.llimitUnlock(p, "specials")]][p.cached.multiplier]; },
        atk: function(p) { return [1, [1, 2.5, 2.5][p.cached.multiplier]][CrunchUtils.llimitUnlock(p, "specials")]; },
        type: "type",
        status: function(p) { return p.cached.captain.type == "STR" || p.cached.captain.type == "QCK" ? [2, 2.25][CrunchUtils.llimitUnlock(p, "specials")] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "ATK boost", "Both boosts"][n] + '. To switch to ' + ["Orb boost", "ATK boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    496: {
        orb: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [1, 2.75, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "Affinity boost", "Both boosts"][n] + '. To switch to ' + ["Orb boost", "Affinity boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    497: {
        orb: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [1, 2.75, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "Affinity boost", "Both boosts"][n] + '. To switch to ' + ["Orb boost", "Affinity boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    498: {
        orb: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [1, 2.75, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "Affinity boost", "Both boosts"][n] + '. To switch to ' + ["Orb boost", "Affinity boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    499: {
        orb: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [1, 2.75, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "Affinity boost", "Both boosts"][n] + '. To switch to ' + ["Orb boost", "Affinity boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    500: {
        orb: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [1, 2.75, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "Affinity boost", "Both boosts"][n] + '. To switch to ' + ["Orb boost", "Affinity boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    501: {
        orb: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [1, 2.75, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "Affinity boost", "Both boosts"][n] + '. To switch to ' + ["Orb boost", "Affinity boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    502: {
        orb: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [1, 2.75, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "Affinity boost", "Both boosts"][n] + '. To switch to ' + ["Orb boost", "Affinity boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    503: {
        orb: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        affinity: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [1, 2.75, 2.75][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "Affinity boost", "Both boosts"][n] + '. To switch to ' + ["Orb boost", "Affinity boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    504: {
        delay: function(p) { return p.cached.multiplier2; },
        ignoresImmunities: function(p) { return [[],['delay']][p.cached.multiplier2]; },
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        status: function(p) { return p.delayed ? [1, 2.25, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.captain.class.has("Driven") || p.captain.class.has("Cerebral") ? 1 : 0;
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "Status boost", "Both boosts"][n] + '. To switch to ' + ["ATK boost", "Status boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    505: {
        delay: function(p) { return p.cached.multiplier2; },
        ignoresImmunities: function(p) { return [[],['delay']][p.cached.multiplier2]; },
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        status: function(p) { return p.delayed ? [1, 2.25, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.captain.class.has("Driven") || p.captain.class.has("Cerebral") ? 1 : 0;
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "Status boost", "Both boosts"][n] + '. To switch to ' + ["ATK boost", "Status boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    506: {
        delay: function(p) { return p.cached.multiplier2; },
        ignoresImmunities: function(p) { return [[],['delay']][p.cached.multiplier2]; },
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        status: function(p) { return p.delayed ? [1, 2.25, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.captain.class.has("Driven") || p.captain.class.has("Cerebral") ? 1 : 0;
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "Status boost", "Both boosts"][n] + '. To switch to ' + ["ATK boost", "Status boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    507: {
        delay: function(p) { return p.cached.multiplier2; },
        ignoresImmunities: function(p) { return [[],['delay']][p.cached.multiplier2]; },
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        status: function(p) { return p.delayed ? [1, 2.25, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.captain.class.has("Driven") || p.captain.class.has("Cerebral") ? 1 : 0;
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "Status boost", "Both boosts"][n] + '. To switch to ' + ["ATK boost", "Status boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    508: {
        delay: function(p) { return p.cached.multiplier2; },
        ignoresImmunities: function(p) { return [[],['delay']][p.cached.multiplier2]; },
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        status: function(p) { return p.delayed ? [1, 2.25, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.captain.class.has("Driven") || p.captain.class.has("Cerebral") ? 1 : 0;
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "Status boost", "Both boosts"][n] + '. To switch to ' + ["ATK boost", "Status boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    509: {
        delay: function(p) { return p.cached.multiplier2; },
        ignoresImmunities: function(p) { return [[],['delay']][p.cached.multiplier2]; },
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        status: function(p) { return p.delayed ? [1, 2.25, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.captain.class.has("Driven") || p.captain.class.has("Cerebral") ? 1 : 0;
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "Status boost", "Both boosts"][n] + '. To switch to ' + ["ATK boost", "Status boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    510: {
        delay: function(p) { return p.cached.multiplier2; },
        ignoresImmunities: function(p) { return [[],['delay']][p.cached.multiplier2]; },
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        status: function(p) { return p.delayed ? [1, 2.25, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.captain.class.has("Driven") || p.captain.class.has("Cerebral") ? 1 : 0;
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "Status boost", "Both boosts"][n] + '. To switch to ' + ["ATK boost", "Status boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    511: {
        delay: function(p) { return p.cached.multiplier2; },
        ignoresImmunities: function(p) { return [[],['delay']][p.cached.multiplier2]; },
        atk: function(p) { return p.unit.class.has("Driven") || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        status: function(p) { return p.delayed ? [1, 2.25, 2.25][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier2 = p.captain.class.has("Driven") || p.captain.class.has("Cerebral") ? 1 : 0;
            p.scope.notify({
                text: 'Using the ' + ["ATK boost", "Status boost", "Both boosts"][n] + '. To switch to ' + ["ATK boost", "Status boost", "Both boosts"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    512: {
        chainMultiplication: function(p) { return p.cached.multiplier1; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 40 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.healCounter >= 50000 ? 3.25 : p.healCounter >= 20000 ? 3 : 2.75;
            p.cached.multiplier1 = p.healCounter >= 50000 ? 1.5 : 1;
        },
    },
    513: {
        chainMultiplication: function(p) { return p.cached.multiplier1; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 40 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.healCounter >= 50000 ? 3.25 : p.healCounter >= 20000 ? 3 : 2.75;
            p.cached.multiplier1 = p.healCounter >= 50000 ? 1.5 : 1;
        },
    },
    514: {
        chainMultiplication: function(p) { return p.cached.multiplier1; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 40 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.healCounter >= 50000 ? 3.25 : p.healCounter >= 20000 ? 3 : 2.75;
            p.cached.multiplier1 = p.healCounter >= 50000 ? 1.5 : 1;
        },
    },
    515: {
        chainMultiplication: function(p) { return p.cached.multiplier1; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 40 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.healCounter >= 50000 ? 3.25 : p.healCounter >= 20000 ? 3 : 2.75;
            p.cached.multiplier1 = p.healCounter >= 50000 ? 1.5 : 1;
        },
    },
    516: {
        chainMultiplication: function(p) { return p.cached.multiplier1; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 40 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.healCounter >= 50000 ? 3.25 : p.healCounter >= 20000 ? 3 : 2.75;
            p.cached.multiplier1 = p.healCounter >= 50000 ? 1.5 : 1;
        },
    },
    517: {
        chainMultiplication: function(p) { return p.cached.multiplier1; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 40 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.healCounter >= 50000 ? 3.25 : p.healCounter >= 20000 ? 3 : 2.75;
            p.cached.multiplier1 = p.healCounter >= 50000 ? 1.5 : 1;
        },
    },
    518: {
        chainMultiplication: function(p) { return p.cached.multiplier1; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 40 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.healCounter >= 50000 ? 3.25 : p.healCounter >= 20000 ? 3 : 2.75;
            p.cached.multiplier1 = p.healCounter >= 50000 ? 1.5 : 1;
        },
    },
    519: {
        chainMultiplication: function(p) { return p.cached.multiplier1; },
        chain: function(p) { return p.cached.multiplier; },
        chainLimiter: function(p) {
            var prev = p.hitcombo[p.hitcombo.length - 1][p.chainPosition - 1]
            return p.chainPosition === 0 ? 1 : (prev == 'Good'  || prev == 'Great' || prev == 'Perfect') ? 40 : 1;
        },
        onActivation: function(p) {
            p.cached.multiplier = p.healCounter >= 50000 ? 3.25 : p.healCounter >= 20000 ? 3 : 2.75;
            p.cached.multiplier1 = p.healCounter >= 50000 ? 1.5 : 1;
        },
    },
    520: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "ATK boost", "Both Effects"][n] + '. To switch to ' + ["Orb boost", "ATK boost", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    521: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "ATK boost", "Both Effects"][n] + '. To switch to ' + ["Orb boost", "ATK boost", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    522: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "ATK boost", "Both Effects"][n] + '. To switch to ' + ["Orb boost", "ATK boost", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    523: {
        atk: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [1, 2.5, 2.5][p.cached.multiplier] : 1; },
        type: "type",
        orb: function(p) { return p.unit.type == "DEX" || p.unit.type == "INT" || p.unit.class.has("Cerebral") ? [2.5, 1, 2.5][p.cached.multiplier] : 1; },
        onActivation: function(p) {
            var levels = [0, 1, 2];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Orb boost", "ATK boost", "Both Effects"][n] + '. To switch to ' + ["Orb boost", "ATK boost", "Both Effects"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    524: {
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? 2.5 : 1; },
        atkPlus: function(p) { return p.cached.multiplier; },
        orbPlus: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = (p.colorCount.STR >= 1 && p.colorCount.DEX >= 1 && p.colorCount.QCK >= 1 && p.colorCount.PSY >= 1 && p.colorCount.INT >= 1) ? 0.25 : 0;
        },
    },
    525: {
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? 2.5 : 1; },
        atkPlus: function(p) { return p.cached.multiplier; },
        orbPlus: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = (p.colorCount.STR >= 1 && p.colorCount.DEX >= 1 && p.colorCount.QCK >= 1 && p.colorCount.PSY >= 1 && p.colorCount.INT >= 1) ? 0.25 : 0;
        },
    },
    526: {
        orb: function(p) { return p.unit.class.has("Fighter") || p.unit.class.has("Powerhouse") ? 2.5 : 1; },
        atkPlus: function(p) { return p.cached.multiplier; },
        orbPlus: function(p) { return p.cached.multiplier; },
        onActivation: function(p) {
            p.cached.multiplier = (p.colorCount.STR >= 1 && p.colorCount.DEX >= 1 && p.colorCount.QCK >= 1 && p.colorCount.PSY >= 1 && p.colorCount.INT >= 1) ? 0.25 : 0;
        },
    },
    527: {
        def: function(p) { return 0; },
        ignoresImmunities: function(p) { return ['def']; },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier : 1; },
        type: "type",
        superAffinity: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 3 : 1; },
        onActivation: function(p) {
            var levels = [3, 3.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    528: {
        def: function(p) { return 0; },
        ignoresImmunities: function(p) { return ['def']; },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier : 1; },
        type: "type",
        superAffinity: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 3 : 1; },
        onActivation: function(p) {
            var levels = [3, 3.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    529: {
        def: function(p) { return 0; },
        ignoresImmunities: function(p) { return ['def']; },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier : 1; },
        type: "type",
        superAffinity: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 3 : 1; },
        onActivation: function(p) {
            var levels = [3, 3.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    530: {
        def: function(p) { return 0; },
        ignoresImmunities: function(p) { return ['def']; },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier : 1; },
        type: "type",
        superAffinity: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 3 : 1; },
        onActivation: function(p) {
            var levels = [3, 3.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    531: {
        def: function(p) { return 0; },
        ignoresImmunities: function(p) { return ['def']; },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier : 1; },
        type: "type",
        superAffinity: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 3 : 1; },
        onActivation: function(p) {
            var levels = [3, 3.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    532: {
        def: function(p) { return 0; },
        ignoresImmunities: function(p) { return ['def']; },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier : 1; },
        type: "type",
        superAffinity: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 3 : 1; },
        onActivation: function(p) {
            var levels = [3, 3.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    533: {
        def: function(p) { return 0; },
        ignoresImmunities: function(p) { return ['def']; },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier : 1; },
        type: "type",
        superAffinity: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 3 : 1; },
        onActivation: function(p) {
            var levels = [3, 3.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    534: {
        def: function(p) { return 0; },
        ignoresImmunities: function(p) { return ['def']; },
        atk: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? p.cached.multiplier : 1; },
        type: "type",
        superAffinity: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? 3 : 1; },
        onActivation: function(p) {
            var levels = [3, 3.25];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + levels[n] + 'x boost. To switch to the ' + levels[(n + 1) % levels.length] + 'x boost, disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    535: {
        atkbase: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? [1250, 1500][CrunchUtils.llimitUnlock(p, "specials")] : 0; },
    },
    536: {
        atkbase: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? [1250, 1500][CrunchUtils.llimitUnlock(p, "specials")] : 0; },
    },
    537: {
        atkbase: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? [1250, 1500][CrunchUtils.llimitUnlock(p, "specials")] : 0; },
    },
    538: {
        atkbase: function(p) { return p.unit.type == "PSY" || p.unit.type == "INT" ? [1250, 1500][CrunchUtils.llimitUnlock(p, "specials")] : 0; },
    },
    539: {
        tapTiming: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Shooter") ? p.cached.multiplier : { Good: 0, Great: 0, Perfect: 0 }; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain ? p.captain.class.has("Slasher") || p.captain.class.has("Shooter") ? { Good: 0, Great: 0, Perfect: 0.4 } : { Good: 0, Great: 0, Perfect: 0 } : { Good: 0, Great: 0, Perfect: 0 };
        },
    },
    540: {
        tapTiming: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Shooter") ? p.cached.multiplier : { Good: 0, Great: 0, Perfect: 0 }; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain ? p.captain.class.has("Slasher") || p.captain.class.has("Shooter") ? { Good: 0, Great: 0, Perfect: 0.4 } : { Good: 0, Great: 0, Perfect: 0 } : { Good: 0, Great: 0, Perfect: 0 };
        },
    },
    541: {
        tapTiming: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Shooter") ? p.cached.multiplier : { Good: 0, Great: 0, Perfect: 0 }; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain ? p.captain.class.has("Slasher") || p.captain.class.has("Shooter") ? { Good: 0, Great: 0, Perfect: 0.4 } : { Good: 0, Great: 0, Perfect: 0 } : { Good: 0, Great: 0, Perfect: 0 };
        },
    },
    542: {
        tapTiming: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Shooter") ? p.cached.multiplier : { Good: 0, Great: 0, Perfect: 0 }; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain ? p.captain.class.has("Slasher") || p.captain.class.has("Shooter") ? { Good: 0, Great: 0, Perfect: 0.4 } : { Good: 0, Great: 0, Perfect: 0 } : { Good: 0, Great: 0, Perfect: 0 };
        },
    },
    543: {
        tapTiming: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Shooter") ? p.cached.multiplier : { Good: 0, Great: 0, Perfect: 0 }; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain ? p.captain.class.has("Slasher") || p.captain.class.has("Shooter") ? { Good: 0, Great: 0, Perfect: 0.4 } : { Good: 0, Great: 0, Perfect: 0 } : { Good: 0, Great: 0, Perfect: 0 };
        },
    },
    544: {
        tapTiming: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Shooter") ? p.cached.multiplier : { Good: 0, Great: 0, Perfect: 0 }; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain ? p.captain.class.has("Slasher") || p.captain.class.has("Shooter") ? { Good: 0, Great: 0, Perfect: 0.4 } : { Good: 0, Great: 0, Perfect: 0 } : { Good: 0, Great: 0, Perfect: 0 };
        },
    },
    545: {
        tapTiming: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Shooter") ? p.cached.multiplier : { Good: 0, Great: 0, Perfect: 0 }; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain ? p.captain.class.has("Slasher") || p.captain.class.has("Shooter") ? { Good: 0, Great: 0, Perfect: 0.4 } : { Good: 0, Great: 0, Perfect: 0 } : { Good: 0, Great: 0, Perfect: 0 };
        },
    },
    546: {
        tapTiming: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Shooter") ? p.cached.multiplier : { Good: 0, Great: 0, Perfect: 0 }; },
        onActivation: function(p) {
            p.cached.multiplier = p.captain ? p.captain.class.has("Slasher") || p.captain.class.has("Shooter") ? { Good: 0, Great: 0, Perfect: 0.4 } : { Good: 0, Great: 0, Perfect: 0 } : { Good: 0, Great: 0, Perfect: 0 };
        },
    },
    547: {
        atk: function(p) { return 2.25; },
        type: "type",
    },
    548: {
        orb: function(p) { return 2.25; },
    },
    549: {
        atk: function(p) { return 2.25; },
        type: "type",
    },
    550: {
        orb: function(p) { return 2.25; },
    },
    551: {
        atk: function(p) { return 2.25; },
        type: "type",
    },
    552: {
        orb: function(p) { return 2.25; },
    },
    553: {
        atk: function(p) { return 2.25; },
        type: "type",
    },
    554: {
        orb: function(p) { return 2.25; },
    },
    555: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? [2.5, 2.75, 2.5, 2.75, 2.75][p.cached.multiplier] : 1; },
        affinityPlus: function(p) { return [0, 0.25, 0, 0.25, 0.25][p.cached.multiplier]; },
        increaseDamageTaken: function(p) { return [1.75, 1.75, 1, 1, 1.75][p.cached.multiplier]; },
        increaseDamageTakenCeil: function(p) { return [1, 1, 2.25, 2.25, 2.25][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return ["increaseDamageTaken"]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Special & Increased Damage Taken", "Combined Special & Increased Damage Taken", "Special & Increased Damage Taken Buff", "Combined Special & Increased Damage Taken Buff", "Combined Special Used Twice"][n] + '. To switch to ' + ["Special & Increased Damage Taken", "Combined Special & Increased Damage Taken", "Special & Increased Damage Taken Buff", "Combined Special & Increased Damage Taken Buff", "Combined Special Used Twice"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    556: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? [2.5, 2.75, 2.5, 2.75, 2.75][p.cached.multiplier] : 1; },
        affinityPlus: function(p) { return [0, 0.25, 0, 0.25, 0.25][p.cached.multiplier]; },
        increaseDamageTaken: function(p) { return [1.75, 1.75, 1, 1, 1.75][p.cached.multiplier]; },
        increaseDamageTakenCeil: function(p) { return [1, 1, 2.25, 2.25, 2.25][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return ["increaseDamageTaken"]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Special & Increased Damage Taken", "Combined Special & Increased Damage Taken", "Special & Increased Damage Taken Buff", "Combined Special & Increased Damage Taken Buff", "Combined Special Used Twice"][n] + '. To switch to ' + ["Special & Increased Damage Taken", "Combined Special & Increased Damage Taken", "Special & Increased Damage Taken Buff", "Combined Special & Increased Damage Taken Buff", "Combined Special Used Twice"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    557: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? [2.5, 2.75, 2.5, 2.75, 2.75][p.cached.multiplier] : 1; },
        affinityPlus: function(p) { return [0, 0.25, 0, 0.25, 0.25][p.cached.multiplier]; },
        increaseDamageTaken: function(p) { return [1.75, 1.75, 1, 1, 1.75][p.cached.multiplier]; },
        increaseDamageTakenCeil: function(p) { return [1, 1, 2.25, 2.25, 2.25][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return ["increaseDamageTaken"]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Special & Increased Damage Taken", "Combined Special & Increased Damage Taken", "Special & Increased Damage Taken Buff", "Combined Special & Increased Damage Taken Buff", "Combined Special Used Twice"][n] + '. To switch to ' + ["Special & Increased Damage Taken", "Combined Special & Increased Damage Taken", "Special & Increased Damage Taken Buff", "Combined Special & Increased Damage Taken Buff", "Combined Special Used Twice"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    558: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? [2.5, 2.75, 2.5, 2.75, 2.75][p.cached.multiplier] : 1; },
        affinityPlus: function(p) { return [0, 0.25, 0, 0.25, 0.25][p.cached.multiplier]; },
        increaseDamageTaken: function(p) { return [1.75, 1.75, 1, 1, 1.75][p.cached.multiplier]; },
        increaseDamageTakenCeil: function(p) { return [1, 1, 2.25, 2.25, 2.25][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return ["increaseDamageTaken"]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Special & Increased Damage Taken", "Combined Special & Increased Damage Taken", "Special & Increased Damage Taken Buff", "Combined Special & Increased Damage Taken Buff", "Combined Special Used Twice"][n] + '. To switch to ' + ["Special & Increased Damage Taken", "Combined Special & Increased Damage Taken", "Special & Increased Damage Taken Buff", "Combined Special & Increased Damage Taken Buff", "Combined Special Used Twice"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    559: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? [2.5, 2.75, 2.5, 2.75, 2.75][p.cached.multiplier] : 1; },
        affinityPlus: function(p) { return [0, 0.25, 0, 0.25, 0.25][p.cached.multiplier]; },
        increaseDamageTaken: function(p) { return [1.75, 1.75, 1, 1, 1.75][p.cached.multiplier]; },
        increaseDamageTakenCeil: function(p) { return [1, 1, 2.25, 2.25, 2.25][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return ["increaseDamageTaken"]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Special & Increased Damage Taken", "Combined Special & Increased Damage Taken", "Special & Increased Damage Taken Buff", "Combined Special & Increased Damage Taken Buff", "Combined Special Used Twice"][n] + '. To switch to ' + ["Special & Increased Damage Taken", "Combined Special & Increased Damage Taken", "Special & Increased Damage Taken Buff", "Combined Special & Increased Damage Taken Buff", "Combined Special Used Twice"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    560: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? [2.5, 2.75, 2.5, 2.75, 2.75][p.cached.multiplier] : 1; },
        affinityPlus: function(p) { return [0, 0.25, 0, 0.25, 0.25][p.cached.multiplier]; },
        increaseDamageTaken: function(p) { return [1.75, 1.75, 1, 1, 1.75][p.cached.multiplier]; },
        increaseDamageTakenCeil: function(p) { return [1, 1, 2.25, 2.25, 2.25][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return ["increaseDamageTaken"]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Special & Increased Damage Taken", "Combined Special & Increased Damage Taken", "Special & Increased Damage Taken Buff", "Combined Special & Increased Damage Taken Buff", "Combined Special Used Twice"][n] + '. To switch to ' + ["Special & Increased Damage Taken", "Combined Special & Increased Damage Taken", "Special & Increased Damage Taken Buff", "Combined Special & Increased Damage Taken Buff", "Combined Special Used Twice"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    561: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? [2.5, 2.75, 2.5, 2.75, 2.75][p.cached.multiplier] : 1; },
        affinityPlus: function(p) { return [0, 0.25, 0, 0.25, 0.25][p.cached.multiplier]; },
        increaseDamageTaken: function(p) { return [1.75, 1.75, 1, 1, 1.75][p.cached.multiplier]; },
        increaseDamageTakenCeil: function(p) { return [1, 1, 2.25, 2.25, 2.25][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return ["increaseDamageTaken"]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Special & Increased Damage Taken", "Combined Special & Increased Damage Taken", "Special & Increased Damage Taken Buff", "Combined Special & Increased Damage Taken Buff", "Combined Special Used Twice"][n] + '. To switch to ' + ["Special & Increased Damage Taken", "Combined Special & Increased Damage Taken", "Special & Increased Damage Taken Buff", "Combined Special & Increased Damage Taken Buff", "Combined Special Used Twice"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    562: {
        affinity: function(p) { return p.unit.class.has("Slasher") || p.unit.class.has("Striker") ? [2.5, 2.75, 2.5, 2.75, 2.75][p.cached.multiplier] : 1; },
        affinityPlus: function(p) { return [0, 0.25, 0, 0.25, 0.25][p.cached.multiplier]; },
        increaseDamageTaken: function(p) { return [1.75, 1.75, 1, 1, 1.75][p.cached.multiplier]; },
        increaseDamageTakenCeil: function(p) { return [1, 1, 2.25, 2.25, 2.25][p.cached.multiplier]; },
        ignoresImmunities: function(p) { return ["increaseDamageTaken"]; },
        onActivation: function(p) {
            var levels = [0, 1, 2, 3, 4];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.scope.notify({
                text: 'Using the ' + ["Special & Increased Damage Taken", "Combined Special & Increased Damage Taken", "Special & Increased Damage Taken Buff", "Combined Special & Increased Damage Taken Buff", "Combined Special Used Twice"][n] + '. To switch to ' + ["Special & Increased Damage Taken", "Combined Special & Increased Damage Taken", "Special & Increased Damage Taken Buff", "Combined Special & Increased Damage Taken Buff", "Combined Special Used Twice"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
    },
    563: {
        chainAddition: function(p) { return [1, 2][p.cached.multiplier]; },
        chainMultiplication: function(p) { return [1.75, 1.75][p.cached.multiplier]; },
        atkPlus: function(p) { return [0.3, 0.5][p.cached.multiplier]; },
        orbPlus: function(p) { return [0.3, 0.5][p.cached.multiplier]; },
        classOverride: function(p) { return p.cached.multiplier1; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = [p.captain.class.has("Slasher") ? [null, "Slasher"] : [null, null], p.captain.class.has("Slasher") || p.captain.class.has("Free Spirit") ? ["Slasher", "Free Spirit"] : [null, null]][n];
            p.scope.notify({
                text: 'Using the ' + ["Solo", "Combined"][n] + ' special. To switch to ' + ["Solo", "Combined"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            p.cached.multiplier1 = [null, null];
        },
    },
    564: {
        chainAddition: function(p) { return [2, 2][p.cached.multiplier]; },
        chainMultiplication: function(p) { return [1.5, 1.75][p.cached.multiplier]; },
        atkPlus: function(p) { return [0.3, 0.5][p.cached.multiplier]; },
        orbPlus: function(p) { return [0.3, 0.5][p.cached.multiplier]; },
        classOverride: function(p) { return p.cached.multiplier1; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = [p.captain.class.has("Free Spirit") ? [null, "Free Spirit"] : [null, null], p.captain.class.has("Slasher") || p.captain.class.has("Free Spirit") ? ["Slasher", "Free Spirit"] : [null, null]][n];
            p.scope.notify({
                text: 'Using the ' + ["Solo", "Combined"][n] + ' special. To switch to ' + ["Solo", "Combined"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            p.cached.multiplier1 = [null, null];
        },
    },
    565: {
        chainAddition: function(p) { return [1, 2][p.cached.multiplier]; },
        chainMultiplication: function(p) { return [1.75, 1.75][p.cached.multiplier]; },
        atkPlus: function(p) { return [0.3, 0.5][p.cached.multiplier]; },
        orbPlus: function(p) { return [0.3, 0.5][p.cached.multiplier]; },
        classOverride: function(p) { return p.cached.multiplier1; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = [p.captain.class.has("Slasher") ? [null, "Slasher"] : [null, null], p.captain.class.has("Slasher") || p.captain.class.has("Free Spirit") ? ["Slasher", "Free Spirit"] : [null, null]][n];
            p.scope.notify({
                text: 'Using the ' + ["Solo", "Combined"][n] + ' special. To switch to ' + ["Solo", "Combined"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            p.cached.multiplier1 = [null, null];
        },
    },
    566: {
        chainAddition: function(p) { return [2, 2][p.cached.multiplier]; },
        chainMultiplication: function(p) { return [1.5, 1.75][p.cached.multiplier]; },
        atkPlus: function(p) { return [0.3, 0.5][p.cached.multiplier]; },
        orbPlus: function(p) { return [0.3, 0.5][p.cached.multiplier]; },
        classOverride: function(p) { return p.cached.multiplier1; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = [p.captain.class.has("Free Spirit") ? [null, "Free Spirit"] : [null, null], p.captain.class.has("Slasher") || p.captain.class.has("Free Spirit") ? ["Slasher", "Free Spirit"] : [null, null]][n];
            p.scope.notify({
                text: 'Using the ' + ["Solo", "Combined"][n] + ' special. To switch to ' + ["Solo", "Combined"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            p.cached.multiplier1 = [null, null];
        },
    },
    567: {
        chainAddition: function(p) { return [1, 2][p.cached.multiplier]; },
        chainMultiplication: function(p) { return [1.75, 1.75][p.cached.multiplier]; },
        atkPlus: function(p) { return [0.3, 0.5][p.cached.multiplier]; },
        orbPlus: function(p) { return [0.3, 0.5][p.cached.multiplier]; },
        classOverride: function(p) { return p.cached.multiplier1; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = [p.captain.class.has("Slasher") ? [null, "Slasher"] : [null, null], p.captain.class.has("Slasher") || p.captain.class.has("Free Spirit") ? ["Slasher", "Free Spirit"] : [null, null]][n];
            p.scope.notify({
                text: 'Using the ' + ["Solo", "Combined"][n] + ' special. To switch to ' + ["Solo", "Combined"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            p.cached.multiplier1 = [null, null];
        },
    },
    568: {
        chainAddition: function(p) { return [2, 2][p.cached.multiplier]; },
        chainMultiplication: function(p) { return [1.5, 1.75][p.cached.multiplier]; },
        atkPlus: function(p) { return [0.3, 0.5][p.cached.multiplier]; },
        orbPlus: function(p) { return [0.3, 0.5][p.cached.multiplier]; },
        classOverride: function(p) { return p.cached.multiplier1; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = [p.captain.class.has("Free Spirit") ? [null, "Free Spirit"] : [null, null], p.captain.class.has("Slasher") || p.captain.class.has("Free Spirit") ? ["Slasher", "Free Spirit"] : [null, null]][n];
            p.scope.notify({
                text: 'Using the ' + ["Solo", "Combined"][n] + ' special. To switch to ' + ["Solo", "Combined"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            p.cached.multiplier1 = [null, null];
        },
    },
    569: {
        chainAddition: function(p) { return [1, 2][p.cached.multiplier]; },
        chainMultiplication: function(p) { return [1.75, 1.75][p.cached.multiplier]; },
        atkPlus: function(p) { return [0.3, 0.5][p.cached.multiplier]; },
        orbPlus: function(p) { return [0.3, 0.5][p.cached.multiplier]; },
        classOverride: function(p) { return p.cached.multiplier1; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = [p.captain.class.has("Slasher") ? [null, "Slasher"] : [null, null], p.captain.class.has("Slasher") || p.captain.class.has("Free Spirit") ? ["Slasher", "Free Spirit"] : [null, null]][n];
            p.scope.notify({
                text: 'Using the ' + ["Solo", "Combined"][n] + ' special. To switch to ' + ["Solo", "Combined"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            p.cached.multiplier1 = [null, null];
        },
    },
    570: {
        chainAddition: function(p) { return [2, 2][p.cached.multiplier]; },
        chainMultiplication: function(p) { return [1.5, 1.75][p.cached.multiplier]; },
        atkPlus: function(p) { return [0.3, 0.5][p.cached.multiplier]; },
        orbPlus: function(p) { return [0.3, 0.5][p.cached.multiplier]; },
        classOverride: function(p) { return p.cached.multiplier1; },
        onActivation: function(p) {
            var levels = [0, 1];
            var n = (levels.indexOf(p.cached.multiplier) + 1) % levels.length;
            p.cached.multiplier = levels[n];
            p.cached.multiplier1 = [p.captain.class.has("Free Spirit") ? [null, "Free Spirit"] : [null, null], p.captain.class.has("Slasher") || p.captain.class.has("Free Spirit") ? ["Slasher", "Free Spirit"] : [null, null]][n];
            p.scope.notify({
                text: 'Using the ' + ["Solo", "Combined"][n] + ' special. To switch to ' + ["Solo", "Combined"][(n + 1) % levels.length] + ', disable and re-enable this special',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        },
        onDeactivation: function(p) {
            p.cached.multiplier1 = [null, null];
        },
    },
    571: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        atkPlus: function(p) { return p.cached.multiplier1; },
        onActivation: function(p) {
            p.cached.multiplier = p.percHP <= 30 ? 2.75 : 2.5;
            p.cached.multiplier1 = (p.colorCount.INT>=1 && p.colorCount.PSY>=1 && p.colorCount.STR>=1 && p.colorCount.DEX>=1 && p.colorCount.QCK>=1) ? [0.25, 0.5][CrunchUtils.llimitUnlock(p, "specials")] : 0;
            p.scope.notify({
                text: 'HP ' + (p.percHP <= 30 ? 'below' : 'above') + ' 30%, using the ' + p.cached.multiplier + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    572: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        atkPlus: function(p) { return p.cached.multiplier1; },
        onActivation: function(p) {
            p.cached.multiplier = p.percHP <= 30 ? 2.75 : 2.5;
            p.cached.multiplier1 = (p.colorCount.INT>=1 && p.colorCount.PSY>=1 && p.colorCount.STR>=1 && p.colorCount.DEX>=1 && p.colorCount.QCK>=1) ? [0.25, 0.5][CrunchUtils.llimitUnlock(p, "specials")] : 0;
            p.scope.notify({
                text: 'HP ' + (p.percHP <= 30 ? 'below' : 'above') + ' 30%, using the ' + p.cached.multiplier + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
    573: {
        atk: function(p) { return p.cached.multiplier; },
        type: "class",
        atkPlus: function(p) { return p.cached.multiplier1; },
        onActivation: function(p) {
            p.cached.multiplier = p.percHP <= 30 ? 2.75 : 2.5;
            p.cached.multiplier1 = (p.colorCount.INT>=1 && p.colorCount.PSY>=1 && p.colorCount.STR>=1 && p.colorCount.DEX>=1 && p.colorCount.QCK>=1) ? [0.25, 0.5][CrunchUtils.llimitUnlock(p, "specials")] : 0;
            p.scope.notify({
                text: 'HP ' + (p.percHP <= 30 ? 'below' : 'above') + ' 30%, using the ' + p.cached.multiplier + 'x multiplier.',
                name: (p.team[p.sourceSlot].unit.number+1).toString() + 'warning'
            });
        }
    },
};

Object.keys(ghostsSpecials).forEach(function (key) {
    window.specials[calcGhostStartIDSpecials["start"] + parseInt(key)] = ghostsSpecials[key];
});
